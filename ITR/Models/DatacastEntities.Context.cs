//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ITR.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class DatacastEntities : DbContext
    {
        public DatacastEntities()
            : base("name=DatacastEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Company> Companies { get; set; }
        public DbSet<CompanyWeb> CompanyWebs { get; set; }
        public DbSet<CompanyWebForNew> CompanyWebForNews { get; set; }
        public DbSet<CustomerDataSet> CustomerDataSets { get; set; }
        public DbSet<DateRanx> DateRanges { get; set; }
        public DbSet<ForeCastData> ForeCastDatas { get; set; }
        public DbSet<ForeCastMetaData> ForeCastMetaDatas { get; set; }
        public DbSet<Indicator> Indicators { get; set; }
        public DbSet<IndicatorWeb> IndicatorWebs { get; set; }
        public DbSet<IndicatorWebForNew> IndicatorWebForNews { get; set; }
        public DbSet<MasterMetaData> MasterMetaDatas { get; set; }
        public DbSet<Month> Months { get; set; }
        public DbSet<ShortCode> ShortCodes { get; set; }
        public DbSet<TEMP_CompanyReporting_Logic> TEMP_CompanyReporting_Logic { get; set; }
        public DbSet<TEMP_CompanyReporting_Logic_Portal> TEMP_CompanyReporting_Logic_Portal { get; set; }
        public DbSet<UI_ForeCastData> UI_ForeCastData { get; set; }
        public DbSet<UI_ForeCastMetaData> UI_ForeCastMetaData { get; set; }
        public DbSet<VWTBL_COMPANY> VWTBL_COMPANY { get; set; }
        public DbSet<VWTBL_COMPANY_PORTAL> VWTBL_COMPANY_PORTAL { get; set; }
        public DbSet<VWTBL_INDICATOR> VWTBL_INDICATOR { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<CategoryDropDown> CategoryDropDowns { get; set; }
        public DbSet<CompaniesList> CompaniesLists { get; set; }
        public DbSet<CompanyList> CompanyLists { get; set; }
        public DbSet<CompanyMasterMetaData> CompanyMasterMetaDatas { get; set; }
        public DbSet<CompanyShortCode> CompanyShortCodes { get; set; }
        public DbSet<CompanyStagingLoadInfo> CompanyStagingLoadInfoes { get; set; }
        public DbSet<Continent> Continents { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<CustomerDatasetsProcess> CustomerDatasetsProcesses { get; set; }
        public DbSet<CustomerDatasetsProcess_Schedule> CustomerDatasetsProcess_Schedule { get; set; }
        public DbSet<Dumped> Dumpeds { get; set; }
        public DbSet<ExceptionLog> ExceptionLogs { get; set; }
        public DbSet<FavouriteList> FavouriteLists { get; set; }
        public DbSet<ForeCastCheckData> ForeCastCheckDatas { get; set; }
        public DbSet<IndicatorList> IndicatorLists { get; set; }
        public DbSet<Industry> Industries { get; set; }
        public DbSet<MasterMetaData_Backup> MasterMetaData_Backup { get; set; }
        public DbSet<Notify> Notifies { get; set; }
        public DbSet<NotifyDev> NotifyDevs { get; set; }
        public DbSet<PaidForecast> PaidForecasts { get; set; }
        public DbSet<PopupAccess> PopupAccesses { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<Region> Regions { get; set; }
        public DbSet<ReleaseSchedule> ReleaseSchedules { get; set; }
        public DbSet<StagingCompany> StagingCompanies { get; set; }
        public DbSet<StagingCompanyData> StagingCompanyDatas { get; set; }
        public DbSet<StagingCompanyWeb> StagingCompanyWebs { get; set; }
        public DbSet<StagingForeCast> StagingForeCasts { get; set; }
        public DbSet<StagingForecastTest> StagingForecastTests { get; set; }
        public DbSet<StagingIndicatorTest> StagingIndicatorTests { get; set; }
        public DbSet<StagingIndicatorWeb> StagingIndicatorWebs { get; set; }
        public DbSet<StagingIndicatorWebForNewIndicator> StagingIndicatorWebForNewIndicators { get; set; }
        public DbSet<StagingLoadInfo> StagingLoadInfoes { get; set; }
        public DbSet<StateProvince> StateProvinces { get; set; }
        public DbSet<SubCategory> SubCategories { get; set; }
        public DbSet<SubProduct> SubProducts { get; set; }
        public DbSet<TEMP_IndicatorReporting_Logic> TEMP_IndicatorReporting_Logic { get; set; }
        public DbSet<TempTable> TempTables { get; set; }
        public DbSet<TempTableForRawData> TempTableForRawDatas { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<vwCompanyAVG> vwCompanyAVGs { get; set; }
        public DbSet<vwCompanyForecast> vwCompanyForecasts { get; set; }
        public DbSet<vwCustomer> vwCustomers { get; set; }
        public DbSet<vwDataSet> vwDataSets { get; set; }
        public DbSet<vwIndicatorAVG> vwIndicatorAVGs { get; set; }
        public DbSet<vwIndicatorForecast> vwIndicatorForecasts { get; set; }
        public DbSet<vwSelectIndicator> vwSelectIndicators { get; set; }
        public DbSet<vwTableau> vwTableaux { get; set; }
    
        [EdmFunction("DatacastEntities", "f_split")]
        public virtual IQueryable<f_split_Result> f_split(string param, string delimiter)
        {
            var paramParameter = param != null ?
                new ObjectParameter("param", param) :
                new ObjectParameter("param", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f_split_Result>("[DatacastEntities].[f_split](@param, @delimiter)", paramParameter, delimiterParameter);
        }
    
        [EdmFunction("DatacastEntities", "Split")]
        public virtual IQueryable<Split_Result> Split(string line, string splitOn)
        {
            var lineParameter = line != null ?
                new ObjectParameter("Line", line) :
                new ObjectParameter("Line", typeof(string));
    
            var splitOnParameter = splitOn != null ?
                new ObjectParameter("SplitOn", splitOn) :
                new ObjectParameter("SplitOn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[DatacastEntities].[Split](@Line, @SplitOn)", lineParameter, splitOnParameter);
        }
    
        public virtual int GetCompany(string companyName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string showMonthYear, string showRawValue, string showAdjValue, string show1By12, string show3MMA, string show3MMT, string show3BY12, string show12BY12, string show12MMA, string show12MMT)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var showMonthYearParameter = showMonthYear != null ?
                new ObjectParameter("showMonthYear", showMonthYear) :
                new ObjectParameter("showMonthYear", typeof(string));
    
            var showRawValueParameter = showRawValue != null ?
                new ObjectParameter("showRawValue", showRawValue) :
                new ObjectParameter("showRawValue", typeof(string));
    
            var showAdjValueParameter = showAdjValue != null ?
                new ObjectParameter("showAdjValue", showAdjValue) :
                new ObjectParameter("showAdjValue", typeof(string));
    
            var show1By12Parameter = show1By12 != null ?
                new ObjectParameter("show1By12", show1By12) :
                new ObjectParameter("show1By12", typeof(string));
    
            var show3MMAParameter = show3MMA != null ?
                new ObjectParameter("show3MMA", show3MMA) :
                new ObjectParameter("show3MMA", typeof(string));
    
            var show3MMTParameter = show3MMT != null ?
                new ObjectParameter("show3MMT", show3MMT) :
                new ObjectParameter("show3MMT", typeof(string));
    
            var show3BY12Parameter = show3BY12 != null ?
                new ObjectParameter("show3BY12", show3BY12) :
                new ObjectParameter("show3BY12", typeof(string));
    
            var show12BY12Parameter = show12BY12 != null ?
                new ObjectParameter("show12BY12", show12BY12) :
                new ObjectParameter("show12BY12", typeof(string));
    
            var show12MMAParameter = show12MMA != null ?
                new ObjectParameter("show12MMA", show12MMA) :
                new ObjectParameter("show12MMA", typeof(string));
    
            var show12MMTParameter = show12MMT != null ?
                new ObjectParameter("show12MMT", show12MMT) :
                new ObjectParameter("show12MMT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCompany", companyNameParameter, startDateParameter, endDateParameter, showMonthYearParameter, showRawValueParameter, showAdjValueParameter, show1By12Parameter, show3MMAParameter, show3MMTParameter, show3BY12Parameter, show12BY12Parameter, show12MMAParameter, show12MMTParameter);
        }
    
        public virtual int GetIndicator(string indicatorName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string showMonthYear, string showRawValue, string showAdjValue, string show1By12, string show3MMA, string show3MMT, string show3BY12, string show12BY12, string show12MMA, string show12MMT)
        {
            var indicatorNameParameter = indicatorName != null ?
                new ObjectParameter("IndicatorName", indicatorName) :
                new ObjectParameter("IndicatorName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var showMonthYearParameter = showMonthYear != null ?
                new ObjectParameter("showMonthYear", showMonthYear) :
                new ObjectParameter("showMonthYear", typeof(string));
    
            var showRawValueParameter = showRawValue != null ?
                new ObjectParameter("showRawValue", showRawValue) :
                new ObjectParameter("showRawValue", typeof(string));
    
            var showAdjValueParameter = showAdjValue != null ?
                new ObjectParameter("showAdjValue", showAdjValue) :
                new ObjectParameter("showAdjValue", typeof(string));
    
            var show1By12Parameter = show1By12 != null ?
                new ObjectParameter("show1By12", show1By12) :
                new ObjectParameter("show1By12", typeof(string));
    
            var show3MMAParameter = show3MMA != null ?
                new ObjectParameter("show3MMA", show3MMA) :
                new ObjectParameter("show3MMA", typeof(string));
    
            var show3MMTParameter = show3MMT != null ?
                new ObjectParameter("show3MMT", show3MMT) :
                new ObjectParameter("show3MMT", typeof(string));
    
            var show3BY12Parameter = show3BY12 != null ?
                new ObjectParameter("show3BY12", show3BY12) :
                new ObjectParameter("show3BY12", typeof(string));
    
            var show12BY12Parameter = show12BY12 != null ?
                new ObjectParameter("show12BY12", show12BY12) :
                new ObjectParameter("show12BY12", typeof(string));
    
            var show12MMAParameter = show12MMA != null ?
                new ObjectParameter("show12MMA", show12MMA) :
                new ObjectParameter("show12MMA", typeof(string));
    
            var show12MMTParameter = show12MMT != null ?
                new ObjectParameter("show12MMT", show12MMT) :
                new ObjectParameter("show12MMT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetIndicator", indicatorNameParameter, startDateParameter, endDateParameter, showMonthYearParameter, showRawValueParameter, showAdjValueParameter, show1By12Parameter, show3MMAParameter, show3MMTParameter, show3BY12Parameter, show12BY12Parameter, show12MMAParameter, show12MMTParameter);
        }
    
        public virtual ObjectResult<sp_CheckLogin_Result> sp_CheckLogin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckLogin_Result>("sp_CheckLogin", userNameParameter, passwordParameter);
        }
    
        public virtual int sp_InsertCompanyShortCodes(string workBook, string shortCode, string shortCodeDesc, ObjectParameter shortCodesId)
        {
            var workBookParameter = workBook != null ?
                new ObjectParameter("WorkBook", workBook) :
                new ObjectParameter("WorkBook", typeof(string));
    
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var shortCodeDescParameter = shortCodeDesc != null ?
                new ObjectParameter("ShortCodeDesc", shortCodeDesc) :
                new ObjectParameter("ShortCodeDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertCompanyShortCodes", workBookParameter, shortCodeParameter, shortCodeDescParameter, shortCodesId);
        }
    
        public virtual int SP_InsertCompanyStagingLoadInfo(string loadSource, string loadType, Nullable<int> update, Nullable<int> insert, Nullable<int> numberOfRecords, string releaseNotes, Nullable<int> shortCodesId)
        {
            var loadSourceParameter = loadSource != null ?
                new ObjectParameter("LoadSource", loadSource) :
                new ObjectParameter("LoadSource", typeof(string));
    
            var loadTypeParameter = loadType != null ?
                new ObjectParameter("LoadType", loadType) :
                new ObjectParameter("LoadType", typeof(string));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(int));
    
            var insertParameter = insert.HasValue ?
                new ObjectParameter("Insert", insert) :
                new ObjectParameter("Insert", typeof(int));
    
            var numberOfRecordsParameter = numberOfRecords.HasValue ?
                new ObjectParameter("NumberOfRecords", numberOfRecords) :
                new ObjectParameter("NumberOfRecords", typeof(int));
    
            var releaseNotesParameter = releaseNotes != null ?
                new ObjectParameter("ReleaseNotes", releaseNotes) :
                new ObjectParameter("ReleaseNotes", typeof(string));
    
            var shortCodesIdParameter = shortCodesId.HasValue ?
                new ObjectParameter("ShortCodesId", shortCodesId) :
                new ObjectParameter("ShortCodesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertCompanyStagingLoadInfo", loadSourceParameter, loadTypeParameter, updateParameter, insertParameter, numberOfRecordsParameter, releaseNotesParameter, shortCodesIdParameter);
        }
    
        public virtual int sp_InsertMasterMetadata(string workBook, string fileName, string nAICSCode, string seriesName, string nSA, string continent, string country, string region, string state, string mSA, string category, string subCategory, string units, string @base, ObjectParameter masterMetadataId)
        {
            var workBookParameter = workBook != null ?
                new ObjectParameter("WorkBook", workBook) :
                new ObjectParameter("WorkBook", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var nAICSCodeParameter = nAICSCode != null ?
                new ObjectParameter("NAICSCode", nAICSCode) :
                new ObjectParameter("NAICSCode", typeof(string));
    
            var seriesNameParameter = seriesName != null ?
                new ObjectParameter("SeriesName", seriesName) :
                new ObjectParameter("SeriesName", typeof(string));
    
            var nSAParameter = nSA != null ?
                new ObjectParameter("NSA", nSA) :
                new ObjectParameter("NSA", typeof(string));
    
            var continentParameter = continent != null ?
                new ObjectParameter("Continent", continent) :
                new ObjectParameter("Continent", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var mSAParameter = mSA != null ?
                new ObjectParameter("MSA", mSA) :
                new ObjectParameter("MSA", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var subCategoryParameter = subCategory != null ?
                new ObjectParameter("SubCategory", subCategory) :
                new ObjectParameter("SubCategory", typeof(string));
    
            var unitsParameter = units != null ?
                new ObjectParameter("Units", units) :
                new ObjectParameter("Units", typeof(string));
    
            var baseParameter = @base != null ?
                new ObjectParameter("Base", @base) :
                new ObjectParameter("Base", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertMasterMetadata", workBookParameter, fileNameParameter, nAICSCodeParameter, seriesNameParameter, nSAParameter, continentParameter, countryParameter, regionParameter, stateParameter, mSAParameter, categoryParameter, subCategoryParameter, unitsParameter, baseParameter, masterMetadataId);
        }
    
        public virtual int sp_InsertMasterMetadataDailyLoad(string workBook, string fileName, string nAICSCode, string seriesName, string nSA, string continent, string country, string region, string state, string mSA, string category, string subCategory, string units, string @base, ObjectParameter masterMetadataId)
        {
            var workBookParameter = workBook != null ?
                new ObjectParameter("WorkBook", workBook) :
                new ObjectParameter("WorkBook", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var nAICSCodeParameter = nAICSCode != null ?
                new ObjectParameter("NAICSCode", nAICSCode) :
                new ObjectParameter("NAICSCode", typeof(string));
    
            var seriesNameParameter = seriesName != null ?
                new ObjectParameter("SeriesName", seriesName) :
                new ObjectParameter("SeriesName", typeof(string));
    
            var nSAParameter = nSA != null ?
                new ObjectParameter("NSA", nSA) :
                new ObjectParameter("NSA", typeof(string));
    
            var continentParameter = continent != null ?
                new ObjectParameter("Continent", continent) :
                new ObjectParameter("Continent", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var mSAParameter = mSA != null ?
                new ObjectParameter("MSA", mSA) :
                new ObjectParameter("MSA", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var subCategoryParameter = subCategory != null ?
                new ObjectParameter("SubCategory", subCategory) :
                new ObjectParameter("SubCategory", typeof(string));
    
            var unitsParameter = units != null ?
                new ObjectParameter("Units", units) :
                new ObjectParameter("Units", typeof(string));
    
            var baseParameter = @base != null ?
                new ObjectParameter("Base", @base) :
                new ObjectParameter("Base", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertMasterMetadataDailyLoad", workBookParameter, fileNameParameter, nAICSCodeParameter, seriesNameParameter, nSAParameter, continentParameter, countryParameter, regionParameter, stateParameter, mSAParameter, categoryParameter, subCategoryParameter, unitsParameter, baseParameter, masterMetadataId);
        }
    
        public virtual int sp_InsertMasterMetadataForCompany(string workBook, string fileName, string nAICSCode, string seriesName, string nSA, string continent, string country, string region, string state, string mSA, string category, string subCategory, string units, string @base, ObjectParameter masterMetadataId)
        {
            var workBookParameter = workBook != null ?
                new ObjectParameter("WorkBook", workBook) :
                new ObjectParameter("WorkBook", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var nAICSCodeParameter = nAICSCode != null ?
                new ObjectParameter("NAICSCode", nAICSCode) :
                new ObjectParameter("NAICSCode", typeof(string));
    
            var seriesNameParameter = seriesName != null ?
                new ObjectParameter("SeriesName", seriesName) :
                new ObjectParameter("SeriesName", typeof(string));
    
            var nSAParameter = nSA != null ?
                new ObjectParameter("NSA", nSA) :
                new ObjectParameter("NSA", typeof(string));
    
            var continentParameter = continent != null ?
                new ObjectParameter("Continent", continent) :
                new ObjectParameter("Continent", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var mSAParameter = mSA != null ?
                new ObjectParameter("MSA", mSA) :
                new ObjectParameter("MSA", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var subCategoryParameter = subCategory != null ?
                new ObjectParameter("SubCategory", subCategory) :
                new ObjectParameter("SubCategory", typeof(string));
    
            var unitsParameter = units != null ?
                new ObjectParameter("Units", units) :
                new ObjectParameter("Units", typeof(string));
    
            var baseParameter = @base != null ?
                new ObjectParameter("Base", @base) :
                new ObjectParameter("Base", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertMasterMetadataForCompany", workBookParameter, fileNameParameter, nAICSCodeParameter, seriesNameParameter, nSAParameter, continentParameter, countryParameter, regionParameter, stateParameter, mSAParameter, categoryParameter, subCategoryParameter, unitsParameter, baseParameter, masterMetadataId);
        }
    
        public virtual int sp_InsertMasterMetadataNewCompany(string workBook, string fileName, string nAICSCode, string seriesName, string nSA, string continent, string country, string region, string state, string mSA, string category, string subCategory, string units, string @base, ObjectParameter masterMetadataId)
        {
            var workBookParameter = workBook != null ?
                new ObjectParameter("WorkBook", workBook) :
                new ObjectParameter("WorkBook", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var nAICSCodeParameter = nAICSCode != null ?
                new ObjectParameter("NAICSCode", nAICSCode) :
                new ObjectParameter("NAICSCode", typeof(string));
    
            var seriesNameParameter = seriesName != null ?
                new ObjectParameter("SeriesName", seriesName) :
                new ObjectParameter("SeriesName", typeof(string));
    
            var nSAParameter = nSA != null ?
                new ObjectParameter("NSA", nSA) :
                new ObjectParameter("NSA", typeof(string));
    
            var continentParameter = continent != null ?
                new ObjectParameter("Continent", continent) :
                new ObjectParameter("Continent", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var mSAParameter = mSA != null ?
                new ObjectParameter("MSA", mSA) :
                new ObjectParameter("MSA", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var subCategoryParameter = subCategory != null ?
                new ObjectParameter("SubCategory", subCategory) :
                new ObjectParameter("SubCategory", typeof(string));
    
            var unitsParameter = units != null ?
                new ObjectParameter("Units", units) :
                new ObjectParameter("Units", typeof(string));
    
            var baseParameter = @base != null ?
                new ObjectParameter("Base", @base) :
                new ObjectParameter("Base", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertMasterMetadataNewCompany", workBookParameter, fileNameParameter, nAICSCodeParameter, seriesNameParameter, nSAParameter, continentParameter, countryParameter, regionParameter, stateParameter, mSAParameter, categoryParameter, subCategoryParameter, unitsParameter, baseParameter, masterMetadataId);
        }
    
        public virtual int sp_InsertMasterMetadataNewIndicator(string workBook, string fileName, string nAICSCode, string seriesName, string nSA, string continent, string country, string region, string state, string mSA, string category, string subCategory, string units, string @base, ObjectParameter masterMetadataId)
        {
            var workBookParameter = workBook != null ?
                new ObjectParameter("WorkBook", workBook) :
                new ObjectParameter("WorkBook", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var nAICSCodeParameter = nAICSCode != null ?
                new ObjectParameter("NAICSCode", nAICSCode) :
                new ObjectParameter("NAICSCode", typeof(string));
    
            var seriesNameParameter = seriesName != null ?
                new ObjectParameter("SeriesName", seriesName) :
                new ObjectParameter("SeriesName", typeof(string));
    
            var nSAParameter = nSA != null ?
                new ObjectParameter("NSA", nSA) :
                new ObjectParameter("NSA", typeof(string));
    
            var continentParameter = continent != null ?
                new ObjectParameter("Continent", continent) :
                new ObjectParameter("Continent", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var mSAParameter = mSA != null ?
                new ObjectParameter("MSA", mSA) :
                new ObjectParameter("MSA", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var subCategoryParameter = subCategory != null ?
                new ObjectParameter("SubCategory", subCategory) :
                new ObjectParameter("SubCategory", typeof(string));
    
            var unitsParameter = units != null ?
                new ObjectParameter("Units", units) :
                new ObjectParameter("Units", typeof(string));
    
            var baseParameter = @base != null ?
                new ObjectParameter("Base", @base) :
                new ObjectParameter("Base", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertMasterMetadataNewIndicator", workBookParameter, fileNameParameter, nAICSCodeParameter, seriesNameParameter, nSAParameter, continentParameter, countryParameter, regionParameter, stateParameter, mSAParameter, categoryParameter, subCategoryParameter, unitsParameter, baseParameter, masterMetadataId);
        }
    
        public virtual int sp_InsertShortCodes(string workBook, string shortCode, string shortCodeDesc, ObjectParameter shortCodesId)
        {
            var workBookParameter = workBook != null ?
                new ObjectParameter("WorkBook", workBook) :
                new ObjectParameter("WorkBook", typeof(string));
    
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var shortCodeDescParameter = shortCodeDesc != null ?
                new ObjectParameter("ShortCodeDesc", shortCodeDesc) :
                new ObjectParameter("ShortCodeDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertShortCodes", workBookParameter, shortCodeParameter, shortCodeDescParameter, shortCodesId);
        }
    
        public virtual int SP_InsertStagingLoadInfo(string loadSource, string loadType, Nullable<int> update, Nullable<int> insert, Nullable<int> numberOfRecords, string releaseNotes, Nullable<int> shortCodesId)
        {
            var loadSourceParameter = loadSource != null ?
                new ObjectParameter("LoadSource", loadSource) :
                new ObjectParameter("LoadSource", typeof(string));
    
            var loadTypeParameter = loadType != null ?
                new ObjectParameter("LoadType", loadType) :
                new ObjectParameter("LoadType", typeof(string));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(int));
    
            var insertParameter = insert.HasValue ?
                new ObjectParameter("Insert", insert) :
                new ObjectParameter("Insert", typeof(int));
    
            var numberOfRecordsParameter = numberOfRecords.HasValue ?
                new ObjectParameter("NumberOfRecords", numberOfRecords) :
                new ObjectParameter("NumberOfRecords", typeof(int));
    
            var releaseNotesParameter = releaseNotes != null ?
                new ObjectParameter("ReleaseNotes", releaseNotes) :
                new ObjectParameter("ReleaseNotes", typeof(string));
    
            var shortCodesIdParameter = shortCodesId.HasValue ?
                new ObjectParameter("ShortCodesId", shortCodesId) :
                new ObjectParameter("ShortCodesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertStagingLoadInfo", loadSourceParameter, loadTypeParameter, updateParameter, insertParameter, numberOfRecordsParameter, releaseNotesParameter, shortCodesIdParameter);
        }
    
        public virtual int SP_InsertUpateForecast()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpateForecast");
        }
    
        public virtual int SP_InsertUpdateCompany()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateCompany");
        }
    
        public virtual int SP_InsertUpdateIndicator()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateIndicator");
        }
    
        public virtual int SP_InsertUpdateIndicatorForNewIndicator()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateIndicatorForNewIndicator");
        }
    
        public virtual int SP_InsertUpdateIndustry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateIndustry");
        }
    
        public virtual int SP_InsertUpdateIndustry_backup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateIndustry_backup");
        }
    
        public virtual int SP_MoveCompanyLoadData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MoveCompanyLoadData");
        }
    
        public virtual int SP_MoveDailyLoadData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MoveDailyLoadData");
        }
    
        public virtual int SP_MoveDailyLoadDataForNewCompanies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MoveDailyLoadDataForNewCompanies");
        }
    
        public virtual int SP_MoveDailyLoadDataForNewIndicators()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MoveDailyLoadDataForNewIndicators");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_MoveDataFromCompanyWeb()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_MoveDataFromCompanyWeb");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_MoveDataFromCompanyWebForNewCOmpany()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_MoveDataFromCompanyWebForNewCOmpany");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_MoveDataFromForecastWeb()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_MoveDataFromForecastWeb");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_MoveDataFromIndicatorWeb()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_MoveDataFromIndicatorWeb");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_MoveDataFromIndicatorWebForNew()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_MoveDataFromIndicatorWebForNew");
        }
    
        public virtual ObjectResult<SP_SelectAllCompanies_Result> SP_SelectAllCompanies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectAllCompanies_Result>("SP_SelectAllCompanies");
        }
    
        public virtual ObjectResult<SP_SelectAllIndicators_Result> SP_SelectAllIndicators()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectAllIndicators_Result>("SP_SelectAllIndicators");
        }
    
        public virtual ObjectResult<SP_SelectCompanyData_Result> SP_SelectCompanyData(string shortCode, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectCompanyData_Result>("SP_SelectCompanyData", shortCodeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SP_SelectCompanyData_TestSP_Result> SP_SelectCompanyData_TestSP(string shortCode, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectCompanyData_TestSP_Result>("SP_SelectCompanyData_TestSP", shortCodeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SP_SelectCompanyDataForWeb_Result> SP_SelectCompanyDataForWeb(string shortCode, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectCompanyDataForWeb_Result>("SP_SelectCompanyDataForWeb", shortCodeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_SelectCompanyDataInclusive_Result> sp_SelectCompanyDataInclusive(string shortCode, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectCompanyDataInclusive_Result>("sp_SelectCompanyDataInclusive", shortCodeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_SelectCompanyDataInclusive_New_Result> sp_SelectCompanyDataInclusive_New(string shortCode, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectCompanyDataInclusive_New_Result>("sp_SelectCompanyDataInclusive_New", shortCodeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SP_SelectCompanyMetaData_Result> SP_SelectCompanyMetaData(string shortCode, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectCompanyMetaData_Result>("SP_SelectCompanyMetaData", shortCodeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SP_SelectCompanyShortCodes_Result> SP_SelectCompanyShortCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectCompanyShortCodes_Result>("SP_SelectCompanyShortCodes");
        }
    
        public virtual ObjectResult<SP_SelectCompanyUpdateLoadResult_Result> SP_SelectCompanyUpdateLoadResult()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectCompanyUpdateLoadResult_Result>("SP_SelectCompanyUpdateLoadResult");
        }
    
        public virtual ObjectResult<SP_SelectCompanyWebShortCodes_Result> SP_SelectCompanyWebShortCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectCompanyWebShortCodes_Result>("SP_SelectCompanyWebShortCodes");
        }
    
        public virtual ObjectResult<SP_SelectCompanyWebShortCodesFOrNewCompany_Result> SP_SelectCompanyWebShortCodesFOrNewCompany()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectCompanyWebShortCodesFOrNewCompany_Result>("SP_SelectCompanyWebShortCodesFOrNewCompany");
        }
    
        public virtual ObjectResult<SP_SelectCustomerData_Result> SP_SelectCustomerData(string shortCode, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectCustomerData_Result>("SP_SelectCustomerData", shortCodeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SP_SelectForecastDatabyForecastMetadataID_Result> SP_SelectForecastDatabyForecastMetadataID(Nullable<int> forecastMetaDataID)
        {
            var forecastMetaDataIDParameter = forecastMetaDataID.HasValue ?
                new ObjectParameter("ForecastMetaDataID", forecastMetaDataID) :
                new ObjectParameter("ForecastMetaDataID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectForecastDatabyForecastMetadataID_Result>("SP_SelectForecastDatabyForecastMetadataID", forecastMetaDataIDParameter);
        }
    
        public virtual ObjectResult<SP_SelectForecastDosCodes_Result> SP_SelectForecastDosCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectForecastDosCodes_Result>("SP_SelectForecastDosCodes");
        }
    
        public virtual ObjectResult<sp_SelectForecastStagingWebData_Result> sp_SelectForecastStagingWebData(Nullable<int> forecastMetaDataID)
        {
            var forecastMetaDataIDParameter = forecastMetaDataID.HasValue ?
                new ObjectParameter("ForecastMetaDataID", forecastMetaDataID) :
                new ObjectParameter("ForecastMetaDataID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectForecastStagingWebData_Result>("sp_SelectForecastStagingWebData", forecastMetaDataIDParameter);
        }
    
        public virtual ObjectResult<SP_SelectForecastWebShortCodes_Result> SP_SelectForecastWebShortCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectForecastWebShortCodes_Result>("SP_SelectForecastWebShortCodes");
        }
    
        public virtual ObjectResult<SP_SelectIndicatorData_Result> SP_SelectIndicatorData(string shortCode, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectIndicatorData_Result>("SP_SelectIndicatorData", shortCodeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SP_SelectIndicatorData_TestSp_Result> SP_SelectIndicatorData_TestSp(string shortCode, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectIndicatorData_TestSp_Result>("SP_SelectIndicatorData_TestSp", shortCodeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SP_SelectIndicatorDataForWeb_Result> SP_SelectIndicatorDataForWeb(string shortCode, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectIndicatorDataForWeb_Result>("SP_SelectIndicatorDataForWeb", shortCodeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SP_SelectIndicatorsNonUpdateLoadResult_Result> SP_SelectIndicatorsNonUpdateLoadResult()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectIndicatorsNonUpdateLoadResult_Result>("SP_SelectIndicatorsNonUpdateLoadResult");
        }
    
        public virtual ObjectResult<SP_SelectIndicatorsUpdateLoadResult_Result> SP_SelectIndicatorsUpdateLoadResult()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectIndicatorsUpdateLoadResult_Result>("SP_SelectIndicatorsUpdateLoadResult");
        }
    
        public virtual ObjectResult<SP_SelectIndicatorWebShortCodes_Result> SP_SelectIndicatorWebShortCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectIndicatorWebShortCodes_Result>("SP_SelectIndicatorWebShortCodes");
        }
    
        public virtual ObjectResult<SP_SelectIndicatorWebShortCodesFOrNewIndicators_Result> SP_SelectIndicatorWebShortCodesFOrNewIndicators()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectIndicatorWebShortCodesFOrNewIndicators_Result>("SP_SelectIndicatorWebShortCodesFOrNewIndicators");
        }
    
        public virtual ObjectResult<SP_SelectIndustryMetaData_Result> SP_SelectIndustryMetaData(string shortCode, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectIndustryMetaData_Result>("SP_SelectIndustryMetaData", shortCodeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SP_SelectShortCodes_Result> SP_SelectShortCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectShortCodes_Result>("SP_SelectShortCodes");
        }
    
        public virtual ObjectResult<sp_SelectStagingWebData_Result> sp_SelectStagingWebData(Nullable<int> masterMetaDataID)
        {
            var masterMetaDataIDParameter = masterMetaDataID.HasValue ?
                new ObjectParameter("MasterMetaDataID", masterMetaDataID) :
                new ObjectParameter("MasterMetaDataID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectStagingWebData_Result>("sp_SelectStagingWebData", masterMetaDataIDParameter);
        }
    
        public virtual ObjectResult<sp_SelectStagingWebDataForCompany_Result> sp_SelectStagingWebDataForCompany(Nullable<int> masterMetaDataID)
        {
            var masterMetaDataIDParameter = masterMetaDataID.HasValue ?
                new ObjectParameter("MasterMetaDataID", masterMetaDataID) :
                new ObjectParameter("MasterMetaDataID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectStagingWebDataForCompany_Result>("sp_SelectStagingWebDataForCompany", masterMetaDataIDParameter);
        }
    
        public virtual ObjectResult<sp_SelectStagingWebDataForNewCompany_Result> sp_SelectStagingWebDataForNewCompany(Nullable<int> masterMetaDataID)
        {
            var masterMetaDataIDParameter = masterMetaDataID.HasValue ?
                new ObjectParameter("MasterMetaDataID", masterMetaDataID) :
                new ObjectParameter("MasterMetaDataID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectStagingWebDataForNewCompany_Result>("sp_SelectStagingWebDataForNewCompany", masterMetaDataIDParameter);
        }
    
        public virtual ObjectResult<sp_SelectStagingWebDataForNewIndicators_Result> sp_SelectStagingWebDataForNewIndicators(Nullable<int> masterMetaDataID)
        {
            var masterMetaDataIDParameter = masterMetaDataID.HasValue ?
                new ObjectParameter("MasterMetaDataID", masterMetaDataID) :
                new ObjectParameter("MasterMetaDataID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectStagingWebDataForNewIndicators_Result>("sp_SelectStagingWebDataForNewIndicators", masterMetaDataIDParameter);
        }
    
        public virtual int sp_UpdateStagingForecastInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateStagingForecastInfo");
        }
    
        public virtual int SP_UpdateStagingInfo(string loadSource, Nullable<int> insert, Nullable<int> update, Nullable<int> numberOfRecords, Nullable<int> shortCodesId)
        {
            var loadSourceParameter = loadSource != null ?
                new ObjectParameter("LoadSource", loadSource) :
                new ObjectParameter("LoadSource", typeof(string));
    
            var insertParameter = insert.HasValue ?
                new ObjectParameter("Insert", insert) :
                new ObjectParameter("Insert", typeof(int));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(int));
    
            var numberOfRecordsParameter = numberOfRecords.HasValue ?
                new ObjectParameter("NumberOfRecords", numberOfRecords) :
                new ObjectParameter("NumberOfRecords", typeof(int));
    
            var shortCodesIdParameter = shortCodesId.HasValue ?
                new ObjectParameter("ShortCodesId", shortCodesId) :
                new ObjectParameter("ShortCodesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateStagingInfo", loadSourceParameter, insertParameter, updateParameter, numberOfRecordsParameter, shortCodesIdParameter);
        }
    
        public virtual int TestLocal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TestLocal");
        }
    
        public virtual int uspBusinessPhaseLogicImplementation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBusinessPhaseLogicImplementation");
        }
    
        public virtual int uspBusinessPhaseLogicImplementationForSingleShortCode(string shortcodevalue)
        {
            var shortcodevalueParameter = shortcodevalue != null ?
                new ObjectParameter("shortcodevalue", shortcodevalue) :
                new ObjectParameter("shortcodevalue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBusinessPhaseLogicImplementationForSingleShortCode", shortcodevalueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteCompanyDataSet(Nullable<int> masterMetaDataID)
        {
            var masterMetaDataIDParameter = masterMetaDataID.HasValue ?
                new ObjectParameter("MasterMetaDataID", masterMetaDataID) :
                new ObjectParameter("MasterMetaDataID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteCompanyDataSet", masterMetaDataIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteDuplicateData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteDuplicateData");
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteFavoriteListByCompanyAndUserID(string companyShortCode, Nullable<int> userID, string favoriteListName)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var favoriteListNameParameter = favoriteListName != null ?
                new ObjectParameter("FavoriteListName", favoriteListName) :
                new ObjectParameter("FavoriteListName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteFavoriteListByCompanyAndUserID", companyShortCodeParameter, userIDParameter, favoriteListNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteIndicatorDataSet(Nullable<int> masterMetaDataID)
        {
            var masterMetaDataIDParameter = masterMetaDataID.HasValue ?
                new ObjectParameter("MasterMetaDataID", masterMetaDataID) :
                new ObjectParameter("MasterMetaDataID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteIndicatorDataSet", masterMetaDataIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertExceptionLog(string customerID, string exceptionMessage, string pageName, string createdBy, Nullable<System.DateTime> createdDate)
        {
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var exceptionMessageParameter = exceptionMessage != null ?
                new ObjectParameter("ExceptionMessage", exceptionMessage) :
                new ObjectParameter("ExceptionMessage", typeof(string));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertExceptionLog", customerIDParameter, exceptionMessageParameter, pageNameParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertFavouriteList(string companyShortCode, string indicatorShortCodes, Nullable<int> userID, string favouriteListName, string createdBY, Nullable<System.DateTime> createdDate)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var indicatorShortCodesParameter = indicatorShortCodes != null ?
                new ObjectParameter("IndicatorShortCodes", indicatorShortCodes) :
                new ObjectParameter("IndicatorShortCodes", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var favouriteListNameParameter = favouriteListName != null ?
                new ObjectParameter("FavouriteListName", favouriteListName) :
                new ObjectParameter("FavouriteListName", typeof(string));
    
            var createdBYParameter = createdBY != null ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertFavouriteList", companyShortCodeParameter, indicatorShortCodesParameter, userIDParameter, favouriteListNameParameter, createdBYParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertPopupAccessingDate(Nullable<int> userID, string comapanyShortCode, Nullable<System.DateTime> lastAccessDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var comapanyShortCodeParameter = comapanyShortCode != null ?
                new ObjectParameter("ComapanyShortCode", comapanyShortCode) :
                new ObjectParameter("ComapanyShortCode", typeof(string));
    
            var lastAccessDateParameter = lastAccessDate.HasValue ?
                new ObjectParameter("LastAccessDate", lastAccessDate) :
                new ObjectParameter("LastAccessDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertPopupAccessingDate", userIDParameter, comapanyShortCodeParameter, lastAccessDateParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspMonthlyYearlyQuarterlyCalculation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMonthlyYearlyQuarterlyCalculation");
        }
    
        public virtual int uspMonthlyYearlyQuarterlyCalculationForAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMonthlyYearlyQuarterlyCalculationForAll");
        }
    
        public virtual int uspMonthlyYearlyQuarterlyCalculationUpdate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMonthlyYearlyQuarterlyCalculationUpdate");
        }
    
        public virtual ObjectResult<uspSelectAccounts_Result> uspSelectAccounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAccounts_Result>("uspSelectAccounts");
        }
    
        public virtual ObjectResult<uspSelectAllFavouriteListByUserID_Result> uspSelectAllFavouriteListByUserID(string companyShortCode, Nullable<int> userID, string favListName)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var favListNameParameter = favListName != null ?
                new ObjectParameter("FavListName", favListName) :
                new ObjectParameter("FavListName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllFavouriteListByUserID_Result>("uspSelectAllFavouriteListByUserID", companyShortCodeParameter, userIDParameter, favListNameParameter);
        }
    
        public virtual ObjectResult<uspSelectCompanyAndIndicatorDateByShordCodes_Result> uspSelectCompanyAndIndicatorDateByShordCodes(string companyShortCode, string indicatorShortCode, Nullable<bool> inverseOrder, Nullable<int> moveMonths, Nullable<int> customerCompanyID)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var indicatorShortCodeParameter = indicatorShortCode != null ?
                new ObjectParameter("IndicatorShortCode", indicatorShortCode) :
                new ObjectParameter("IndicatorShortCode", typeof(string));
    
            var inverseOrderParameter = inverseOrder.HasValue ?
                new ObjectParameter("InverseOrder", inverseOrder) :
                new ObjectParameter("InverseOrder", typeof(bool));
    
            var moveMonthsParameter = moveMonths.HasValue ?
                new ObjectParameter("MoveMonths", moveMonths) :
                new ObjectParameter("MoveMonths", typeof(int));
    
            var customerCompanyIDParameter = customerCompanyID.HasValue ?
                new ObjectParameter("CustomerCompanyID", customerCompanyID) :
                new ObjectParameter("CustomerCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCompanyAndIndicatorDateByShordCodes_Result>("uspSelectCompanyAndIndicatorDateByShordCodes", companyShortCodeParameter, indicatorShortCodeParameter, inverseOrderParameter, moveMonthsParameter, customerCompanyIDParameter);
        }
    
        public virtual ObjectResult<uspSelectCompanyAndIndicatorDateByShordCodes_08282017_Result> uspSelectCompanyAndIndicatorDateByShordCodes_08282017(string companyShortCode, string indicatorShortCode, Nullable<bool> inverseOrder, Nullable<int> moveMonths, Nullable<int> customerCompanyID)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var indicatorShortCodeParameter = indicatorShortCode != null ?
                new ObjectParameter("IndicatorShortCode", indicatorShortCode) :
                new ObjectParameter("IndicatorShortCode", typeof(string));
    
            var inverseOrderParameter = inverseOrder.HasValue ?
                new ObjectParameter("InverseOrder", inverseOrder) :
                new ObjectParameter("InverseOrder", typeof(bool));
    
            var moveMonthsParameter = moveMonths.HasValue ?
                new ObjectParameter("MoveMonths", moveMonths) :
                new ObjectParameter("MoveMonths", typeof(int));
    
            var customerCompanyIDParameter = customerCompanyID.HasValue ?
                new ObjectParameter("CustomerCompanyID", customerCompanyID) :
                new ObjectParameter("CustomerCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCompanyAndIndicatorDateByShordCodes_08282017_Result>("uspSelectCompanyAndIndicatorDateByShordCodes_08282017", companyShortCodeParameter, indicatorShortCodeParameter, inverseOrderParameter, moveMonthsParameter, customerCompanyIDParameter);
        }
    
        public virtual ObjectResult<uspSelectCompanyAndIndicatorDateByShordCodes_new_Result> uspSelectCompanyAndIndicatorDateByShordCodes_new(string companyShortCode, string indicatorShortCode, Nullable<bool> inverseOrder, Nullable<int> moveMonths)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var indicatorShortCodeParameter = indicatorShortCode != null ?
                new ObjectParameter("IndicatorShortCode", indicatorShortCode) :
                new ObjectParameter("IndicatorShortCode", typeof(string));
    
            var inverseOrderParameter = inverseOrder.HasValue ?
                new ObjectParameter("InverseOrder", inverseOrder) :
                new ObjectParameter("InverseOrder", typeof(bool));
    
            var moveMonthsParameter = moveMonths.HasValue ?
                new ObjectParameter("MoveMonths", moveMonths) :
                new ObjectParameter("MoveMonths", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCompanyAndIndicatorDateByShordCodes_new_Result>("uspSelectCompanyAndIndicatorDateByShordCodes_new", companyShortCodeParameter, indicatorShortCodeParameter, inverseOrderParameter, moveMonthsParameter);
        }
    
        public virtual ObjectResult<uspSelectCompanyAndIndicatorDateByShordCodes_old_Result> uspSelectCompanyAndIndicatorDateByShordCodes_old(string companyShortCode, string indicatorShortCode, Nullable<bool> inverseOrder, Nullable<int> moveMonths)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var indicatorShortCodeParameter = indicatorShortCode != null ?
                new ObjectParameter("IndicatorShortCode", indicatorShortCode) :
                new ObjectParameter("IndicatorShortCode", typeof(string));
    
            var inverseOrderParameter = inverseOrder.HasValue ?
                new ObjectParameter("InverseOrder", inverseOrder) :
                new ObjectParameter("InverseOrder", typeof(bool));
    
            var moveMonthsParameter = moveMonths.HasValue ?
                new ObjectParameter("MoveMonths", moveMonths) :
                new ObjectParameter("MoveMonths", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCompanyAndIndicatorDateByShordCodes_old_Result>("uspSelectCompanyAndIndicatorDateByShordCodes_old", companyShortCodeParameter, indicatorShortCodeParameter, inverseOrderParameter, moveMonthsParameter);
        }
    
        public virtual ObjectResult<uspSelectCompanyAndIndicatorDateByShordCodes03312017_Result> uspSelectCompanyAndIndicatorDateByShordCodes03312017(string companyShortCode, string indicatorShortCode, Nullable<bool> inverseOrder, Nullable<int> moveMonths)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var indicatorShortCodeParameter = indicatorShortCode != null ?
                new ObjectParameter("IndicatorShortCode", indicatorShortCode) :
                new ObjectParameter("IndicatorShortCode", typeof(string));
    
            var inverseOrderParameter = inverseOrder.HasValue ?
                new ObjectParameter("InverseOrder", inverseOrder) :
                new ObjectParameter("InverseOrder", typeof(bool));
    
            var moveMonthsParameter = moveMonths.HasValue ?
                new ObjectParameter("MoveMonths", moveMonths) :
                new ObjectParameter("MoveMonths", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCompanyAndIndicatorDateByShordCodes03312017_Result>("uspSelectCompanyAndIndicatorDateByShordCodes03312017", companyShortCodeParameter, indicatorShortCodeParameter, inverseOrderParameter, moveMonthsParameter);
        }
    
        public virtual ObjectResult<uspSelectCompanyAndIndicatorDateByShordCodesForAlliance_Result> uspSelectCompanyAndIndicatorDateByShordCodesForAlliance(string companyShortCode, string indicatorShortCode, Nullable<bool> inverseOrder, Nullable<int> moveMonths, Nullable<int> customerCompanyID)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var indicatorShortCodeParameter = indicatorShortCode != null ?
                new ObjectParameter("IndicatorShortCode", indicatorShortCode) :
                new ObjectParameter("IndicatorShortCode", typeof(string));
    
            var inverseOrderParameter = inverseOrder.HasValue ?
                new ObjectParameter("InverseOrder", inverseOrder) :
                new ObjectParameter("InverseOrder", typeof(bool));
    
            var moveMonthsParameter = moveMonths.HasValue ?
                new ObjectParameter("MoveMonths", moveMonths) :
                new ObjectParameter("MoveMonths", typeof(int));
    
            var customerCompanyIDParameter = customerCompanyID.HasValue ?
                new ObjectParameter("CustomerCompanyID", customerCompanyID) :
                new ObjectParameter("CustomerCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCompanyAndIndicatorDateByShordCodesForAlliance_Result>("uspSelectCompanyAndIndicatorDateByShordCodesForAlliance", companyShortCodeParameter, indicatorShortCodeParameter, inverseOrderParameter, moveMonthsParameter, customerCompanyIDParameter);
        }
    
        public virtual ObjectResult<uspSelectCompanyDataForDataTrends_Result> uspSelectCompanyDataForDataTrends(string companyShortCode, Nullable<int> calucaltionType)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var calucaltionTypeParameter = calucaltionType.HasValue ?
                new ObjectParameter("CalucaltionType", calucaltionType) :
                new ObjectParameter("CalucaltionType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCompanyDataForDataTrends_Result>("uspSelectCompanyDataForDataTrends", companyShortCodeParameter, calucaltionTypeParameter);
        }
    
        public virtual ObjectResult<uspSelectCompanyDatasetsForInternalRatesOfChange_Result> uspSelectCompanyDatasetsForInternalRatesOfChange(string firstCompanyDataSetName, string firstCompanyCaluclationType, string secondCompanyDataSetName, string secondCompanyCaluclationType)
        {
            var firstCompanyDataSetNameParameter = firstCompanyDataSetName != null ?
                new ObjectParameter("FirstCompanyDataSetName", firstCompanyDataSetName) :
                new ObjectParameter("FirstCompanyDataSetName", typeof(string));
    
            var firstCompanyCaluclationTypeParameter = firstCompanyCaluclationType != null ?
                new ObjectParameter("FirstCompanyCaluclationType", firstCompanyCaluclationType) :
                new ObjectParameter("FirstCompanyCaluclationType", typeof(string));
    
            var secondCompanyDataSetNameParameter = secondCompanyDataSetName != null ?
                new ObjectParameter("SecondCompanyDataSetName", secondCompanyDataSetName) :
                new ObjectParameter("SecondCompanyDataSetName", typeof(string));
    
            var secondCompanyCaluclationTypeParameter = secondCompanyCaluclationType != null ?
                new ObjectParameter("SecondCompanyCaluclationType", secondCompanyCaluclationType) :
                new ObjectParameter("SecondCompanyCaluclationType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCompanyDatasetsForInternalRatesOfChange_Result>("uspSelectCompanyDatasetsForInternalRatesOfChange", firstCompanyDataSetNameParameter, firstCompanyCaluclationTypeParameter, secondCompanyDataSetNameParameter, secondCompanyCaluclationTypeParameter);
        }
    
        public virtual ObjectResult<uspSelectCompanyDataSetsInfoDownloadSection1_Result> uspSelectCompanyDataSetsInfoDownloadSection1(string masterMetaDataIDS)
        {
            var masterMetaDataIDSParameter = masterMetaDataIDS != null ?
                new ObjectParameter("MasterMetaDataIDS", masterMetaDataIDS) :
                new ObjectParameter("MasterMetaDataIDS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCompanyDataSetsInfoDownloadSection1_Result>("uspSelectCompanyDataSetsInfoDownloadSection1", masterMetaDataIDSParameter);
        }
    
        public virtual ObjectResult<uspSelectCompanyForecastDataByCompanyShortCode_Result> uspSelectCompanyForecastDataByCompanyShortCode(string companyShortcode)
        {
            var companyShortcodeParameter = companyShortcode != null ?
                new ObjectParameter("CompanyShortcode", companyShortcode) :
                new ObjectParameter("CompanyShortcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCompanyForecastDataByCompanyShortCode_Result>("uspSelectCompanyForecastDataByCompanyShortCode", companyShortcodeParameter);
        }
    
        public virtual int uspSelectCompanySales()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectCompanySales");
        }
    
        public virtual int uspSelectCompanySalesByShortCode(string companyShortCode)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectCompanySalesByShortCode", companyShortCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspSelectCompanySalesForNewCompany()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSelectCompanySalesForNewCompany");
        }
    
        public virtual ObjectResult<Nullable<int>> uspSelectCompanySalesForUpdatedCompanies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSelectCompanySalesForUpdatedCompanies");
        }
    
        public virtual int uspSelectCompanySalesPortal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectCompanySalesPortal");
        }
    
        public virtual int uspSelectCompanySalesPortalByCustomerDataSetID(Nullable<int> customerDataSetID)
        {
            var customerDataSetIDParameter = customerDataSetID.HasValue ?
                new ObjectParameter("CustomerDataSetID", customerDataSetID) :
                new ObjectParameter("CustomerDataSetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectCompanySalesPortalByCustomerDataSetID", customerDataSetIDParameter);
        }
    
        public virtual int uspSelectCompanySalesPortalByCustomerDataSetID_Scheduler()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectCompanySalesPortalByCustomerDataSetID_Scheduler");
        }
    
        public virtual ObjectResult<uspSelectDatacastCategories_Result> uspSelectDatacastCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDatacastCategories_Result>("uspSelectDatacastCategories");
        }
    
        public virtual ObjectResult<uspSelectDatacastSubCategoriesByCategory_Result> uspSelectDatacastSubCategoriesByCategory(string industry)
        {
            var industryParameter = industry != null ?
                new ObjectParameter("Industry", industry) :
                new ObjectParameter("Industry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDatacastSubCategoriesByCategory_Result>("uspSelectDatacastSubCategoriesByCategory", industryParameter);
        }
    
        public virtual ObjectResult<uspSelectDatacastSubSector2BySubSector1_Result> uspSelectDatacastSubSector2BySubSector1(string industry, string sector, string subSector1)
        {
            var industryParameter = industry != null ?
                new ObjectParameter("Industry", industry) :
                new ObjectParameter("Industry", typeof(string));
    
            var sectorParameter = sector != null ?
                new ObjectParameter("Sector", sector) :
                new ObjectParameter("Sector", typeof(string));
    
            var subSector1Parameter = subSector1 != null ?
                new ObjectParameter("SubSector1", subSector1) :
                new ObjectParameter("SubSector1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDatacastSubSector2BySubSector1_Result>("uspSelectDatacastSubSector2BySubSector1", industryParameter, sectorParameter, subSector1Parameter);
        }
    
        public virtual ObjectResult<uspSelectDatacastSubSector3BySubSector2_Result> uspSelectDatacastSubSector3BySubSector2(string industry, string sector, string subSector1, string subSector2)
        {
            var industryParameter = industry != null ?
                new ObjectParameter("Industry", industry) :
                new ObjectParameter("Industry", typeof(string));
    
            var sectorParameter = sector != null ?
                new ObjectParameter("Sector", sector) :
                new ObjectParameter("Sector", typeof(string));
    
            var subSector1Parameter = subSector1 != null ?
                new ObjectParameter("SubSector1", subSector1) :
                new ObjectParameter("SubSector1", typeof(string));
    
            var subSector2Parameter = subSector2 != null ?
                new ObjectParameter("SubSector2", subSector2) :
                new ObjectParameter("SubSector2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDatacastSubSector3BySubSector2_Result>("uspSelectDatacastSubSector3BySubSector2", industryParameter, sectorParameter, subSector1Parameter, subSector2Parameter);
        }
    
        public virtual ObjectResult<uspSelectDatacastSubSectorsBySector_Result> uspSelectDatacastSubSectorsBySector(string industry, string sector)
        {
            var industryParameter = industry != null ?
                new ObjectParameter("Industry", industry) :
                new ObjectParameter("Industry", typeof(string));
    
            var sectorParameter = sector != null ?
                new ObjectParameter("Sector", sector) :
                new ObjectParameter("Sector", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDatacastSubSectorsBySector_Result>("uspSelectDatacastSubSectorsBySector", industryParameter, sectorParameter);
        }
    
        public virtual ObjectResult<uspSelectDataSetsByQBaseAccountID_Result> uspSelectDataSetsByQBaseAccountID(Nullable<int> qBaseAccountID, Nullable<int> qBaseDivID)
        {
            var qBaseAccountIDParameter = qBaseAccountID.HasValue ?
                new ObjectParameter("QBaseAccountID", qBaseAccountID) :
                new ObjectParameter("QBaseAccountID", typeof(int));
    
            var qBaseDivIDParameter = qBaseDivID.HasValue ?
                new ObjectParameter("QBaseDivID", qBaseDivID) :
                new ObjectParameter("QBaseDivID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDataSetsByQBaseAccountID_Result>("uspSelectDataSetsByQBaseAccountID", qBaseAccountIDParameter, qBaseDivIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDivisionsByAccountID_Result> uspSelectDivisionsByAccountID(string accountName)
        {
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDivisionsByAccountID_Result>("uspSelectDivisionsByAccountID", accountNameParameter);
        }
    
        public virtual ObjectResult<uspSelectFavouriteListByUserID_Result> uspSelectFavouriteListByUserID(string companyShortCode, Nullable<int> userID, string favListName, Nullable<int> displayLength, Nullable<int> displayStart, string search, Nullable<int> sortCol, string sortDir)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var favListNameParameter = favListName != null ?
                new ObjectParameter("FavListName", favListName) :
                new ObjectParameter("FavListName", typeof(string));
    
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectFavouriteListByUserID_Result>("uspSelectFavouriteListByUserID", companyShortCodeParameter, userIDParameter, favListNameParameter, displayLengthParameter, displayStartParameter, searchParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<uspSelectFavouritesListByUserID_Result> uspSelectFavouritesListByUserID(Nullable<int> userID, string companyShortCode)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectFavouritesListByUserID_Result>("uspSelectFavouritesListByUserID", userIDParameter, companyShortCodeParameter);
        }
    
        public virtual ObjectResult<uspSelectIndicatorDataByIndicatorShortCodes_Result> uspSelectIndicatorDataByIndicatorShortCodes(string indicatorShortCodes, string companyShortCode)
        {
            var indicatorShortCodesParameter = indicatorShortCodes != null ?
                new ObjectParameter("IndicatorShortCodes", indicatorShortCodes) :
                new ObjectParameter("IndicatorShortCodes", typeof(string));
    
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectIndicatorDataByIndicatorShortCodes_Result>("uspSelectIndicatorDataByIndicatorShortCodes", indicatorShortCodesParameter, companyShortCodeParameter);
        }
    
        public virtual ObjectResult<uspSelectIndicatorForecastDataByIndicatorShortCode_Result> uspSelectIndicatorForecastDataByIndicatorShortCode(string indicatorShortCode)
        {
            var indicatorShortCodeParameter = indicatorShortCode != null ?
                new ObjectParameter("IndicatorShortCode", indicatorShortCode) :
                new ObjectParameter("IndicatorShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectIndicatorForecastDataByIndicatorShortCode_Result>("uspSelectIndicatorForecastDataByIndicatorShortCode", indicatorShortCodeParameter);
        }
    
        public virtual ObjectResult<uspSelectIndicatorListByCategorySearch_Result> uspSelectIndicatorListByCategorySearch(string companyShortCode, Nullable<int> userID, string industry, string sector, string subSector1, string subSector2, string subSector3, Nullable<int> displayLength, Nullable<int> displayStart, string search, Nullable<int> sortCol, string sortDir)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var industryParameter = industry != null ?
                new ObjectParameter("Industry", industry) :
                new ObjectParameter("Industry", typeof(string));
    
            var sectorParameter = sector != null ?
                new ObjectParameter("Sector", sector) :
                new ObjectParameter("Sector", typeof(string));
    
            var subSector1Parameter = subSector1 != null ?
                new ObjectParameter("SubSector1", subSector1) :
                new ObjectParameter("SubSector1", typeof(string));
    
            var subSector2Parameter = subSector2 != null ?
                new ObjectParameter("SubSector2", subSector2) :
                new ObjectParameter("SubSector2", typeof(string));
    
            var subSector3Parameter = subSector3 != null ?
                new ObjectParameter("SubSector3", subSector3) :
                new ObjectParameter("SubSector3", typeof(string));
    
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectIndicatorListByCategorySearch_Result>("uspSelectIndicatorListByCategorySearch", companyShortCodeParameter, userIDParameter, industryParameter, sectorParameter, subSector1Parameter, subSector2Parameter, subSector3Parameter, displayLengthParameter, displayStartParameter, searchParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual int uspSelectIndicatorSales()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectIndicatorSales");
        }
    
        public virtual int uspSelectIndicatorSales_ByShortCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectIndicatorSales_ByShortCodes");
        }
    
        public virtual int uspSelectIndicatorSales_ShortCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectIndicatorSales_ShortCodes");
        }
    
        public virtual int uspSelectIndicatorSales_TEST()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectIndicatorSales_TEST");
        }
    
        public virtual int uspSelectIndicatorSalesForNewIndicators()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectIndicatorSalesForNewIndicators");
        }
    
        public virtual ObjectResult<Nullable<int>> uspSelectIndicatorSalesForUpdatedIndicators()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSelectIndicatorSalesForUpdatedIndicators");
        }
    
        public virtual ObjectResult<uspSelectIndicatorSeriesItemsForDownloadData_Result> uspSelectIndicatorSeriesItemsForDownloadData(string shortCode)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectIndicatorSeriesItemsForDownloadData_Result>("uspSelectIndicatorSeriesItemsForDownloadData", shortCodeParameter);
        }
    
        public virtual ObjectResult<uspSelectLoadCorelationLeadLagByDataSetID_Result> uspSelectLoadCorelationLeadLagByDataSetID(string shortCode, Nullable<int> displayLength, Nullable<int> displayStart, string search, Nullable<int> sortCol, string sortDir, Nullable<int> userID)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectLoadCorelationLeadLagByDataSetID_Result>("uspSelectLoadCorelationLeadLagByDataSetID", shortCodeParameter, displayLengthParameter, displayStartParameter, searchParameter, sortColParameter, sortDirParameter, userIDParameter);
        }
    
        public virtual ObjectResult<uspSelectLoadCorelationLeadLagByDataSetID_04282017_Result> uspSelectLoadCorelationLeadLagByDataSetID_04282017(string shortCode)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectLoadCorelationLeadLagByDataSetID_04282017_Result>("uspSelectLoadCorelationLeadLagByDataSetID_04282017", shortCodeParameter);
        }
    
        public virtual ObjectResult<uspSelectLoadCorelationLeadLagByDataSetIDForAlliance_Result> uspSelectLoadCorelationLeadLagByDataSetIDForAlliance(string shortCode, Nullable<int> displayLength, Nullable<int> displayStart, string search, Nullable<int> sortCol, string sortDir, Nullable<int> userID, Nullable<int> qBaseAccountID, Nullable<int> qBDivID)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var qBaseAccountIDParameter = qBaseAccountID.HasValue ?
                new ObjectParameter("QBaseAccountID", qBaseAccountID) :
                new ObjectParameter("QBaseAccountID", typeof(int));
    
            var qBDivIDParameter = qBDivID.HasValue ?
                new ObjectParameter("QBDivID", qBDivID) :
                new ObjectParameter("QBDivID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectLoadCorelationLeadLagByDataSetIDForAlliance_Result>("uspSelectLoadCorelationLeadLagByDataSetIDForAlliance", shortCodeParameter, displayLengthParameter, displayStartParameter, searchParameter, sortColParameter, sortDirParameter, userIDParameter, qBaseAccountIDParameter, qBDivIDParameter);
        }
    
        public virtual ObjectResult<uspSelectLoadCorelationLeadLagByMultipleDatasetIDS_Result> uspSelectLoadCorelationLeadLagByMultipleDatasetIDS(string masterMetaDataIDS, Nullable<int> displayLength, Nullable<int> displayStart)
        {
            var masterMetaDataIDSParameter = masterMetaDataIDS != null ?
                new ObjectParameter("MasterMetaDataIDS", masterMetaDataIDS) :
                new ObjectParameter("MasterMetaDataIDS", typeof(string));
    
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectLoadCorelationLeadLagByMultipleDatasetIDS_Result>("uspSelectLoadCorelationLeadLagByMultipleDatasetIDS", masterMetaDataIDSParameter, displayLengthParameter, displayStartParameter);
        }
    
        public virtual ObjectResult<uspSelectLoadCorelationLeadLagByMultipleDatasetIDS_04282017_Result> uspSelectLoadCorelationLeadLagByMultipleDatasetIDS_04282017(string masterMetaDataIDS)
        {
            var masterMetaDataIDSParameter = masterMetaDataIDS != null ?
                new ObjectParameter("MasterMetaDataIDS", masterMetaDataIDS) :
                new ObjectParameter("MasterMetaDataIDS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectLoadCorelationLeadLagByMultipleDatasetIDS_04282017_Result>("uspSelectLoadCorelationLeadLagByMultipleDatasetIDS_04282017", masterMetaDataIDSParameter);
        }
    
        public virtual ObjectResult<UspSelectMasterMetaData_Result> UspSelectMasterMetaData(string shortCode)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspSelectMasterMetaData_Result>("UspSelectMasterMetaData", shortCodeParameter);
        }
    
        public virtual ObjectResult<uspSelectMasterMetaDataByMetaDataID_Result> uspSelectMasterMetaDataByMetaDataID(Nullable<int> masterMetaDataID)
        {
            var masterMetaDataIDParameter = masterMetaDataID.HasValue ?
                new ObjectParameter("MasterMetaDataID", masterMetaDataID) :
                new ObjectParameter("MasterMetaDataID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectMasterMetaDataByMetaDataID_Result>("uspSelectMasterMetaDataByMetaDataID", masterMetaDataIDParameter);
        }
    
        public virtual ObjectResult<UspSelectMasterMetaDataByWorkBook_Result> UspSelectMasterMetaDataByWorkBook(string workBook)
        {
            var workBookParameter = workBook != null ?
                new ObjectParameter("WorkBook", workBook) :
                new ObjectParameter("WorkBook", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspSelectMasterMetaDataByWorkBook_Result>("UspSelectMasterMetaDataByWorkBook", workBookParameter);
        }
    
        public virtual ObjectResult<uspSelectMasterMetaDataFields_Result> uspSelectMasterMetaDataFields()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectMasterMetaDataFields_Result>("uspSelectMasterMetaDataFields");
        }
    
        public virtual ObjectResult<Nullable<decimal>> uspTest(Nullable<decimal> a, Nullable<decimal> b)
        {
            var aParameter = a.HasValue ?
                new ObjectParameter("A", a) :
                new ObjectParameter("A", typeof(decimal));
    
            var bParameter = b.HasValue ?
                new ObjectParameter("B", b) :
                new ObjectParameter("B", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("uspTest", aParameter, bParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateFavouriteList(string companyShortCode, string indicatorShortCodes, Nullable<int> userID, string favouriteListName, string createdBY, Nullable<System.DateTime> createdDate)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var indicatorShortCodesParameter = indicatorShortCodes != null ?
                new ObjectParameter("IndicatorShortCodes", indicatorShortCodes) :
                new ObjectParameter("IndicatorShortCodes", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var favouriteListNameParameter = favouriteListName != null ?
                new ObjectParameter("FavouriteListName", favouriteListName) :
                new ObjectParameter("FavouriteListName", typeof(string));
    
            var createdBYParameter = createdBY != null ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateFavouriteList", companyShortCodeParameter, indicatorShortCodesParameter, userIDParameter, favouriteListNameParameter, createdBYParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateFeatureDates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateFeatureDates");
        }
    
        public virtual int uspUpdateFilePathCompanyWeb()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateFilePathCompanyWeb");
        }
    
        public virtual int uspUpdateFilePathIndicatorList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateFilePathIndicatorList");
        }
    
        public virtual int uspUpdateFilePathIndicatorWeb()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateFilePathIndicatorWeb");
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateMasterMetaData(string fileName, string workBook, string nAICSCode, string seriesName, string nSA, string continent, string country, string region, string state, string mSA, string category, string subcategory, string units, string bASE, string source, string link, string definition, string updateFrequency, string proprietaryData, string updateType, string discontinued, string discontinuedDate, string statPref1, string statPref2, Nullable<int> accountID, Nullable<int> divisionID, string accountName, string divisionName, string modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var workBookParameter = workBook != null ?
                new ObjectParameter("WorkBook", workBook) :
                new ObjectParameter("WorkBook", typeof(string));
    
            var nAICSCodeParameter = nAICSCode != null ?
                new ObjectParameter("NAICSCode", nAICSCode) :
                new ObjectParameter("NAICSCode", typeof(string));
    
            var seriesNameParameter = seriesName != null ?
                new ObjectParameter("SeriesName", seriesName) :
                new ObjectParameter("SeriesName", typeof(string));
    
            var nSAParameter = nSA != null ?
                new ObjectParameter("NSA", nSA) :
                new ObjectParameter("NSA", typeof(string));
    
            var continentParameter = continent != null ?
                new ObjectParameter("Continent", continent) :
                new ObjectParameter("Continent", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var mSAParameter = mSA != null ?
                new ObjectParameter("MSA", mSA) :
                new ObjectParameter("MSA", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var subcategoryParameter = subcategory != null ?
                new ObjectParameter("Subcategory", subcategory) :
                new ObjectParameter("Subcategory", typeof(string));
    
            var unitsParameter = units != null ?
                new ObjectParameter("Units", units) :
                new ObjectParameter("Units", typeof(string));
    
            var bASEParameter = bASE != null ?
                new ObjectParameter("BASE", bASE) :
                new ObjectParameter("BASE", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("Definition", definition) :
                new ObjectParameter("Definition", typeof(string));
    
            var updateFrequencyParameter = updateFrequency != null ?
                new ObjectParameter("UpdateFrequency", updateFrequency) :
                new ObjectParameter("UpdateFrequency", typeof(string));
    
            var proprietaryDataParameter = proprietaryData != null ?
                new ObjectParameter("ProprietaryData", proprietaryData) :
                new ObjectParameter("ProprietaryData", typeof(string));
    
            var updateTypeParameter = updateType != null ?
                new ObjectParameter("UpdateType", updateType) :
                new ObjectParameter("UpdateType", typeof(string));
    
            var discontinuedParameter = discontinued != null ?
                new ObjectParameter("Discontinued", discontinued) :
                new ObjectParameter("Discontinued", typeof(string));
    
            var discontinuedDateParameter = discontinuedDate != null ?
                new ObjectParameter("DiscontinuedDate", discontinuedDate) :
                new ObjectParameter("DiscontinuedDate", typeof(string));
    
            var statPref1Parameter = statPref1 != null ?
                new ObjectParameter("StatPref1", statPref1) :
                new ObjectParameter("StatPref1", typeof(string));
    
            var statPref2Parameter = statPref2 != null ?
                new ObjectParameter("StatPref2", statPref2) :
                new ObjectParameter("StatPref2", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var divisionNameParameter = divisionName != null ?
                new ObjectParameter("DivisionName", divisionName) :
                new ObjectParameter("DivisionName", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateMasterMetaData", fileNameParameter, workBookParameter, nAICSCodeParameter, seriesNameParameter, nSAParameter, continentParameter, countryParameter, regionParameter, stateParameter, mSAParameter, categoryParameter, subcategoryParameter, unitsParameter, bASEParameter, sourceParameter, linkParameter, definitionParameter, updateFrequencyParameter, proprietaryDataParameter, updateTypeParameter, discontinuedParameter, discontinuedDateParameter, statPref1Parameter, statPref2Parameter, accountIDParameter, divisionIDParameter, accountNameParameter, divisionNameParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateMasterMetaDataByMasterMetaDataID(Nullable<int> masterMetaDataID, string updateFrequency, string proprietaryData, string updateType, string discontinued, string discontinuedDate, string statPref1, string statPref2, string accountName, string divisionName, string divisionID, string modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var masterMetaDataIDParameter = masterMetaDataID.HasValue ?
                new ObjectParameter("MasterMetaDataID", masterMetaDataID) :
                new ObjectParameter("MasterMetaDataID", typeof(int));
    
            var updateFrequencyParameter = updateFrequency != null ?
                new ObjectParameter("UpdateFrequency", updateFrequency) :
                new ObjectParameter("UpdateFrequency", typeof(string));
    
            var proprietaryDataParameter = proprietaryData != null ?
                new ObjectParameter("ProprietaryData", proprietaryData) :
                new ObjectParameter("ProprietaryData", typeof(string));
    
            var updateTypeParameter = updateType != null ?
                new ObjectParameter("UpdateType", updateType) :
                new ObjectParameter("UpdateType", typeof(string));
    
            var discontinuedParameter = discontinued != null ?
                new ObjectParameter("Discontinued", discontinued) :
                new ObjectParameter("Discontinued", typeof(string));
    
            var discontinuedDateParameter = discontinuedDate != null ?
                new ObjectParameter("DiscontinuedDate", discontinuedDate) :
                new ObjectParameter("DiscontinuedDate", typeof(string));
    
            var statPref1Parameter = statPref1 != null ?
                new ObjectParameter("StatPref1", statPref1) :
                new ObjectParameter("StatPref1", typeof(string));
    
            var statPref2Parameter = statPref2 != null ?
                new ObjectParameter("StatPref2", statPref2) :
                new ObjectParameter("StatPref2", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var divisionNameParameter = divisionName != null ?
                new ObjectParameter("DivisionName", divisionName) :
                new ObjectParameter("DivisionName", typeof(string));
    
            var divisionIDParameter = divisionID != null ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateMasterMetaDataByMasterMetaDataID", masterMetaDataIDParameter, updateFrequencyParameter, proprietaryDataParameter, updateTypeParameter, discontinuedParameter, discontinuedDateParameter, statPref1Parameter, statPref2Parameter, accountNameParameter, divisionNameParameter, divisionIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspUpdateMetaDataFRomIndicatorList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateMetaDataFRomIndicatorList");
        }
    
        public virtual int uspUpdateUIForecastListPath()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateUIForecastListPath");
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDashboardWidgetsList(string companyShortCode, string indicatorShortCodes, Nullable<int> userID, string favouriteListName, string createdBY, Nullable<System.DateTime> createdDate)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var indicatorShortCodesParameter = indicatorShortCodes != null ?
                new ObjectParameter("IndicatorShortCodes", indicatorShortCodes) :
                new ObjectParameter("IndicatorShortCodes", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var favouriteListNameParameter = favouriteListName != null ?
                new ObjectParameter("FavouriteListName", favouriteListName) :
                new ObjectParameter("FavouriteListName", typeof(string));
    
            var createdBYParameter = createdBY != null ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDashboardWidgetsList", companyShortCodeParameter, indicatorShortCodesParameter, userIDParameter, favouriteListNameParameter, createdBYParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDashboardWidgetsList(string companyShortCode, string indicatorShortCodes, Nullable<int> userID, string favouriteListName, string createdBY, Nullable<System.DateTime> createdDate)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var indicatorShortCodesParameter = indicatorShortCodes != null ?
                new ObjectParameter("IndicatorShortCodes", indicatorShortCodes) :
                new ObjectParameter("IndicatorShortCodes", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var favouriteListNameParameter = favouriteListName != null ?
                new ObjectParameter("FavouriteListName", favouriteListName) :
                new ObjectParameter("FavouriteListName", typeof(string));
    
            var createdBYParameter = createdBY != null ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDashboardWidgetsList", companyShortCodeParameter, indicatorShortCodesParameter, userIDParameter, favouriteListNameParameter, createdBYParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<uspSelectDBWidgetsListByCompanyID_Result> uspSelectDBWidgetsListByCompanyID(Nullable<int> userID, string companyShortCode)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDBWidgetsListByCompanyID_Result>("uspSelectDBWidgetsListByCompanyID", userIDParameter, companyShortCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteDBWidgetsListByCompanyAndUserID(Nullable<int> dashboardWidgetsListId, string companyShortCode, Nullable<int> userID)
        {
            var dashboardWidgetsListIdParameter = dashboardWidgetsListId.HasValue ?
                new ObjectParameter("DashboardWidgetsListId", dashboardWidgetsListId) :
                new ObjectParameter("DashboardWidgetsListId", typeof(int));
    
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteDBWidgetsListByCompanyAndUserID", dashboardWidgetsListIdParameter, companyShortCodeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAllDBWidgetsListByCompanyID_Result> uspSelectAllDBWidgetsListByCompanyID(string companyShortCode, Nullable<int> userID)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllDBWidgetsListByCompanyID_Result>("uspSelectAllDBWidgetsListByCompanyID", companyShortCodeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDBWidgetsCorrelationListByCompanyID_Result> uspSelectDBWidgetsCorrelationListByCompanyID(string companyShortCode, Nullable<int> userID, Nullable<int> displayLength, Nullable<int> displayStart, string search, Nullable<int> sortCol, string sortDir)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDBWidgetsCorrelationListByCompanyID_Result>("uspSelectDBWidgetsCorrelationListByCompanyID", companyShortCodeParameter, userIDParameter, displayLengthParameter, displayStartParameter, searchParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<uspSelectForecastDataByIndicatorForDownload_Result> uspSelectForecastDataByIndicatorForDownload(string indicatorShortCode, Nullable<int> companyID)
        {
            var indicatorShortCodeParameter = indicatorShortCode != null ?
                new ObjectParameter("IndicatorShortCode", indicatorShortCode) :
                new ObjectParameter("IndicatorShortCode", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectForecastDataByIndicatorForDownload_Result>("uspSelectForecastDataByIndicatorForDownload", indicatorShortCodeParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<uspSelectPhaseValuesOfDBWidgetsByCompanyId_Result> uspSelectPhaseValuesOfDBWidgetsByCompanyId(string companyShortCode)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPhaseValuesOfDBWidgetsByCompanyId_Result>("uspSelectPhaseValuesOfDBWidgetsByCompanyId", companyShortCodeParameter);
        }
    
        public virtual ObjectResult<uspSelectTimingValuesOfDBWidgetsByCompanyId_Result> uspSelectTimingValuesOfDBWidgetsByCompanyId(string companyShortCode)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectTimingValuesOfDBWidgetsByCompanyId_Result>("uspSelectTimingValuesOfDBWidgetsByCompanyId", companyShortCodeParameter);
        }
    
        public virtual ObjectResult<uspSelectPhaseValuesOfDBWidgetsByCompanyIdNew_Result> uspSelectPhaseValuesOfDBWidgetsByCompanyIdNew(string companyShortCode)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPhaseValuesOfDBWidgetsByCompanyIdNew_Result>("uspSelectPhaseValuesOfDBWidgetsByCompanyIdNew", companyShortCodeParameter);
        }
    }
}
