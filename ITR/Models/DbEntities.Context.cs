//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ITR.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class ITRDevEntities : DbContext
    {
        public ITRDevEntities()
            : base("name=ITRDevEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<CustomerDataSet> CustomerDataSets { get; set; }
        public DbSet<ExceptionLog> ExceptionLogs { get; set; }
        public DbSet<StagingCompanyData> StagingCompanyDatas { get; set; }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteCustomerDataSet(Nullable<int> customerDataSetID)
        {
            var customerDataSetIDParameter = customerDataSetID.HasValue ?
                new ObjectParameter("CustomerDataSetID", customerDataSetID) :
                new ObjectParameter("CustomerDataSetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteCustomerDataSet", customerDataSetIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteFavoriteListByCompanyAndUserID(string companyShortCode, Nullable<int> userID, string favoriteListName)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var favoriteListNameParameter = favoriteListName != null ?
                new ObjectParameter("FavoriteListName", favoriteListName) :
                new ObjectParameter("FavoriteListName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteFavoriteListByCompanyAndUserID", companyShortCodeParameter, userIDParameter, favoriteListNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteRowFromDataSet(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteRowFromDataSet", prodIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertCustomerDataSet(Nullable<int> accountID, Nullable<int> divisionID, string datasetName, string datasetDescription, string customerID, string companyName, string dataType, string @base, string units, string companyWebsite, string monthYears, string adjValues, string userName, Nullable<bool> isitrEmployee, string createdBy, Nullable<System.DateTime> createdDate, string accountName)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(int));
    
            var datasetNameParameter = datasetName != null ?
                new ObjectParameter("DatasetName", datasetName) :
                new ObjectParameter("DatasetName", typeof(string));
    
            var datasetDescriptionParameter = datasetDescription != null ?
                new ObjectParameter("DatasetDescription", datasetDescription) :
                new ObjectParameter("DatasetDescription", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var dataTypeParameter = dataType != null ?
                new ObjectParameter("DataType", dataType) :
                new ObjectParameter("DataType", typeof(string));
    
            var baseParameter = @base != null ?
                new ObjectParameter("Base", @base) :
                new ObjectParameter("Base", typeof(string));
    
            var unitsParameter = units != null ?
                new ObjectParameter("Units", units) :
                new ObjectParameter("Units", typeof(string));
    
            var companyWebsiteParameter = companyWebsite != null ?
                new ObjectParameter("CompanyWebsite", companyWebsite) :
                new ObjectParameter("CompanyWebsite", typeof(string));
    
            var monthYearsParameter = monthYears != null ?
                new ObjectParameter("MonthYears", monthYears) :
                new ObjectParameter("MonthYears", typeof(string));
    
            var adjValuesParameter = adjValues != null ?
                new ObjectParameter("AdjValues", adjValues) :
                new ObjectParameter("AdjValues", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isitrEmployeeParameter = isitrEmployee.HasValue ?
                new ObjectParameter("IsitrEmployee", isitrEmployee) :
                new ObjectParameter("IsitrEmployee", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertCustomerDataSet", accountIDParameter, divisionIDParameter, datasetNameParameter, datasetDescriptionParameter, customerIDParameter, companyNameParameter, dataTypeParameter, baseParameter, unitsParameter, companyWebsiteParameter, monthYearsParameter, adjValuesParameter, userNameParameter, isitrEmployeeParameter, createdByParameter, createdDateParameter, accountNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertExceptionLog(string customerID, string exceptionMessage, string pageName, string createdBy, Nullable<System.DateTime> createdDate)
        {
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var exceptionMessageParameter = exceptionMessage != null ?
                new ObjectParameter("ExceptionMessage", exceptionMessage) :
                new ObjectParameter("ExceptionMessage", typeof(string));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertExceptionLog", customerIDParameter, exceptionMessageParameter, pageNameParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertFavouriteList(string companyShortCode, string indicatorShortCodes, Nullable<int> userID, string favouriteListName, string createdBY, Nullable<System.DateTime> createdDate)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var indicatorShortCodesParameter = indicatorShortCodes != null ?
                new ObjectParameter("IndicatorShortCodes", indicatorShortCodes) :
                new ObjectParameter("IndicatorShortCodes", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var favouriteListNameParameter = favouriteListName != null ?
                new ObjectParameter("FavouriteListName", favouriteListName) :
                new ObjectParameter("FavouriteListName", typeof(string));
    
            var createdBYParameter = createdBY != null ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertFavouriteList", companyShortCodeParameter, indicatorShortCodesParameter, userIDParameter, favouriteListNameParameter, createdBYParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertFavouriteListForDatacast(string companyShortCode, string indicatorShortCodes, Nullable<int> userID, string favouriteListName, string createdBY, Nullable<System.DateTime> createdDate)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var indicatorShortCodesParameter = indicatorShortCodes != null ?
                new ObjectParameter("IndicatorShortCodes", indicatorShortCodes) :
                new ObjectParameter("IndicatorShortCodes", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var favouriteListNameParameter = favouriteListName != null ?
                new ObjectParameter("FavouriteListName", favouriteListName) :
                new ObjectParameter("FavouriteListName", typeof(string));
    
            var createdBYParameter = createdBY != null ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertFavouriteListForDatacast", companyShortCodeParameter, indicatorShortCodesParameter, userIDParameter, favouriteListNameParameter, createdBYParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspPushDataSetToProd(Nullable<int> customerDataSetID)
        {
            var customerDataSetIDParameter = customerDataSetID.HasValue ?
                new ObjectParameter("CustomerDataSetID", customerDataSetID) :
                new ObjectParameter("CustomerDataSetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspPushDataSetToProd", customerDataSetIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspReplaceCustomerDataSet(Nullable<int> customerDataSetID, string companyName, string dataType, string @base, string units, string companyWebsite, string monthYears, string adjValues, string userName, Nullable<bool> isitrEmployee, string createdBy, Nullable<System.DateTime> createdDate)
        {
            var customerDataSetIDParameter = customerDataSetID.HasValue ?
                new ObjectParameter("CustomerDataSetID", customerDataSetID) :
                new ObjectParameter("CustomerDataSetID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var dataTypeParameter = dataType != null ?
                new ObjectParameter("DataType", dataType) :
                new ObjectParameter("DataType", typeof(string));
    
            var baseParameter = @base != null ?
                new ObjectParameter("Base", @base) :
                new ObjectParameter("Base", typeof(string));
    
            var unitsParameter = units != null ?
                new ObjectParameter("Units", units) :
                new ObjectParameter("Units", typeof(string));
    
            var companyWebsiteParameter = companyWebsite != null ?
                new ObjectParameter("CompanyWebsite", companyWebsite) :
                new ObjectParameter("CompanyWebsite", typeof(string));
    
            var monthYearsParameter = monthYears != null ?
                new ObjectParameter("MonthYears", monthYears) :
                new ObjectParameter("MonthYears", typeof(string));
    
            var adjValuesParameter = adjValues != null ?
                new ObjectParameter("AdjValues", adjValues) :
                new ObjectParameter("AdjValues", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isitrEmployeeParameter = isitrEmployee.HasValue ?
                new ObjectParameter("IsitrEmployee", isitrEmployee) :
                new ObjectParameter("IsitrEmployee", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspReplaceCustomerDataSet", customerDataSetIDParameter, companyNameParameter, dataTypeParameter, baseParameter, unitsParameter, companyWebsiteParameter, monthYearsParameter, adjValuesParameter, userNameParameter, isitrEmployeeParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<uspSelectAccounts_Result> uspSelectAccounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAccounts_Result>("uspSelectAccounts");
        }
    
        public virtual ObjectResult<uspSelectAllFavouriteListByUserIDForDatacast_Result> uspSelectAllFavouriteListByUserIDForDatacast(string companyShortCode, Nullable<int> userID, string favListName)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var favListNameParameter = favListName != null ?
                new ObjectParameter("FavListName", favListName) :
                new ObjectParameter("FavListName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllFavouriteListByUserIDForDatacast_Result>("uspSelectAllFavouriteListByUserIDForDatacast", companyShortCodeParameter, userIDParameter, favListNameParameter);
        }
    
        public virtual ObjectResult<uspSelectAllFavouritesListByUserID_Result> uspSelectAllFavouritesListByUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllFavouritesListByUserID_Result>("uspSelectAllFavouritesListByUserID", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspSelectAllResultsCountByDataSetID(Nullable<int> customerDataSetID)
        {
            var customerDataSetIDParameter = customerDataSetID.HasValue ?
                new ObjectParameter("CustomerDataSetID", customerDataSetID) :
                new ObjectParameter("CustomerDataSetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSelectAllResultsCountByDataSetID", customerDataSetIDParameter);
        }
    
        public virtual int uspSelectCompanySalesPortal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectCompanySalesPortal");
        }
    
        public virtual int uspSelectCompanySalesPortalByCustomerDataSetID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectCompanySalesPortalByCustomerDataSetID");
        }
    
        public virtual ObjectResult<uspSelectDatacastCategoriesPortal_Result> uspSelectDatacastCategoriesPortal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDatacastCategoriesPortal_Result>("uspSelectDatacastCategoriesPortal");
        }
    
        public virtual ObjectResult<uspSelectDatacastSubCategoriesByCategoryPortal_Result> uspSelectDatacastSubCategoriesByCategoryPortal(string industry)
        {
            var industryParameter = industry != null ?
                new ObjectParameter("Industry", industry) :
                new ObjectParameter("Industry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDatacastSubCategoriesByCategoryPortal_Result>("uspSelectDatacastSubCategoriesByCategoryPortal", industryParameter);
        }
    
        public virtual ObjectResult<uspSelectDatacastSubSector2BySubSector1Portal_Result> uspSelectDatacastSubSector2BySubSector1Portal(string industry, string sector, string subSector1)
        {
            var industryParameter = industry != null ?
                new ObjectParameter("Industry", industry) :
                new ObjectParameter("Industry", typeof(string));
    
            var sectorParameter = sector != null ?
                new ObjectParameter("Sector", sector) :
                new ObjectParameter("Sector", typeof(string));
    
            var subSector1Parameter = subSector1 != null ?
                new ObjectParameter("SubSector1", subSector1) :
                new ObjectParameter("SubSector1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDatacastSubSector2BySubSector1Portal_Result>("uspSelectDatacastSubSector2BySubSector1Portal", industryParameter, sectorParameter, subSector1Parameter);
        }
    
        public virtual ObjectResult<uspSelectDatacastSubSector3BySubSector2Portal_Result> uspSelectDatacastSubSector3BySubSector2Portal(string industry, string sector, string subSector1, string subSector2)
        {
            var industryParameter = industry != null ?
                new ObjectParameter("Industry", industry) :
                new ObjectParameter("Industry", typeof(string));
    
            var sectorParameter = sector != null ?
                new ObjectParameter("Sector", sector) :
                new ObjectParameter("Sector", typeof(string));
    
            var subSector1Parameter = subSector1 != null ?
                new ObjectParameter("SubSector1", subSector1) :
                new ObjectParameter("SubSector1", typeof(string));
    
            var subSector2Parameter = subSector2 != null ?
                new ObjectParameter("SubSector2", subSector2) :
                new ObjectParameter("SubSector2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDatacastSubSector3BySubSector2Portal_Result>("uspSelectDatacastSubSector3BySubSector2Portal", industryParameter, sectorParameter, subSector1Parameter, subSector2Parameter);
        }
    
        public virtual ObjectResult<uspSelectDatacastSubSectorsBySectorPortal_Result> uspSelectDatacastSubSectorsBySectorPortal(string industry, string sector)
        {
            var industryParameter = industry != null ?
                new ObjectParameter("Industry", industry) :
                new ObjectParameter("Industry", typeof(string));
    
            var sectorParameter = sector != null ?
                new ObjectParameter("Sector", sector) :
                new ObjectParameter("Sector", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDatacastSubSectorsBySectorPortal_Result>("uspSelectDatacastSubSectorsBySectorPortal", industryParameter, sectorParameter);
        }
    
        public virtual ObjectResult<uspSelectDataSetsByCompanyDivision_Result> uspSelectDataSetsByCompanyDivision(Nullable<int> accountID, Nullable<int> divisionID, string customerID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(int));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDataSetsByCompanyDivision_Result>("uspSelectDataSetsByCompanyDivision", accountIDParameter, divisionIDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDataSetsByCompanyDivisionForAlliance_Result> uspSelectDataSetsByCompanyDivisionForAlliance(Nullable<int> accountID, Nullable<int> divisionID, string customerID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(int));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDataSetsByCompanyDivisionForAlliance_Result>("uspSelectDataSetsByCompanyDivisionForAlliance", accountIDParameter, divisionIDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDataSetsByFavouriteListsOfUserID_Result> uspSelectDataSetsByFavouriteListsOfUserID(Nullable<int> accountID, Nullable<int> divisionID, Nullable<int> userID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDataSetsByFavouriteListsOfUserID_Result>("uspSelectDataSetsByFavouriteListsOfUserID", accountIDParameter, divisionIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDataSetsByQBaseAccountIDForDatacast_Result> uspSelectDataSetsByQBaseAccountIDForDatacast(Nullable<int> qBaseAccountID, Nullable<int> qBaseDivID)
        {
            var qBaseAccountIDParameter = qBaseAccountID.HasValue ?
                new ObjectParameter("QBaseAccountID", qBaseAccountID) :
                new ObjectParameter("QBaseAccountID", typeof(int));
    
            var qBaseDivIDParameter = qBaseDivID.HasValue ?
                new ObjectParameter("QBaseDivID", qBaseDivID) :
                new ObjectParameter("QBaseDivID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDataSetsByQBaseAccountIDForDatacast_Result>("uspSelectDataSetsByQBaseAccountIDForDatacast", qBaseAccountIDParameter, qBaseDivIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDataSetsByUserFavouriteList_Result> uspSelectDataSetsByUserFavouriteList(Nullable<int> accountID, Nullable<int> divisionID, Nullable<int> userID, string favouriteListName)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var favouriteListNameParameter = favouriteListName != null ?
                new ObjectParameter("FavouriteListName", favouriteListName) :
                new ObjectParameter("FavouriteListName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDataSetsByUserFavouriteList_Result>("uspSelectDataSetsByUserFavouriteList", accountIDParameter, divisionIDParameter, userIDParameter, favouriteListNameParameter);
        }
    
        public virtual ObjectResult<uspSelectDataSetsDetailsByDataSetID_Result> uspSelectDataSetsDetailsByDataSetID(Nullable<int> customerDataSetID, string table)
        {
            var customerDataSetIDParameter = customerDataSetID.HasValue ?
                new ObjectParameter("CustomerDataSetID", customerDataSetID) :
                new ObjectParameter("CustomerDataSetID", typeof(int));
    
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDataSetsDetailsByDataSetID_Result>("uspSelectDataSetsDetailsByDataSetID", customerDataSetIDParameter, tableParameter);
        }
    
        public virtual int uspSelectDataSetsDetailsByDataSetID03242017(Nullable<int> customerDataSetID)
        {
            var customerDataSetIDParameter = customerDataSetID.HasValue ?
                new ObjectParameter("CustomerDataSetID", customerDataSetID) :
                new ObjectParameter("CustomerDataSetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectDataSetsDetailsByDataSetID03242017", customerDataSetIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDataSetsDetailsByDataSetIDForBanner_Result> uspSelectDataSetsDetailsByDataSetIDForBanner(Nullable<int> customerDataSetID, string table)
        {
            var customerDataSetIDParameter = customerDataSetID.HasValue ?
                new ObjectParameter("CustomerDataSetID", customerDataSetID) :
                new ObjectParameter("CustomerDataSetID", typeof(int));
    
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDataSetsDetailsByDataSetIDForBanner_Result>("uspSelectDataSetsDetailsByDataSetIDForBanner", customerDataSetIDParameter, tableParameter);
        }
    
        public virtual ObjectResult<uspSelectDivisionsByAccountID_Result> uspSelectDivisionsByAccountID(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDivisionsByAccountID_Result>("uspSelectDivisionsByAccountID", accountIDParameter);
        }
    
        public virtual ObjectResult<uspSelectFavouriteListByUserID_Result> uspSelectFavouriteListByUserID(string companyShortCode, Nullable<int> userID, string favListName, Nullable<int> displayLength, Nullable<int> displayStart, string search, Nullable<int> sortCol, string sortDir)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var favListNameParameter = favListName != null ?
                new ObjectParameter("FavListName", favListName) :
                new ObjectParameter("FavListName", typeof(string));
    
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectFavouriteListByUserID_Result>("uspSelectFavouriteListByUserID", companyShortCodeParameter, userIDParameter, favListNameParameter, displayLengthParameter, displayStartParameter, searchParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<uspSelectFavouriteListByUserIDForDatacast_Result> uspSelectFavouriteListByUserIDForDatacast(string companyShortCode, Nullable<int> userID, string favListName, Nullable<int> displayLength, Nullable<int> displayStart, string search, Nullable<int> sortCol, string sortDir)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var favListNameParameter = favListName != null ?
                new ObjectParameter("FavListName", favListName) :
                new ObjectParameter("FavListName", typeof(string));
    
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectFavouriteListByUserIDForDatacast_Result>("uspSelectFavouriteListByUserIDForDatacast", companyShortCodeParameter, userIDParameter, favListNameParameter, displayLengthParameter, displayStartParameter, searchParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<uspSelectFavouritesListByUserID_Result> uspSelectFavouritesListByUserID(Nullable<int> userID, string companyShortCode)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectFavouritesListByUserID_Result>("uspSelectFavouritesListByUserID", userIDParameter, companyShortCodeParameter);
        }
    
        public virtual ObjectResult<uspSelectFavouritesListByUserIDAndCompanyShortCode_Result> uspSelectFavouritesListByUserIDAndCompanyShortCode(Nullable<int> userID, string companyShortCode)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectFavouritesListByUserIDAndCompanyShortCode_Result>("uspSelectFavouritesListByUserIDAndCompanyShortCode", userIDParameter, companyShortCodeParameter);
        }
    
        public virtual ObjectResult<uspSelectIndicatorCategoryDropdown_Result> uspSelectIndicatorCategoryDropdown()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectIndicatorCategoryDropdown_Result>("uspSelectIndicatorCategoryDropdown");
        }
    
        public virtual ObjectResult<uspSelectIndicatorListByCategorySearchPortal_Result> uspSelectIndicatorListByCategorySearchPortal(string companyShortCode, Nullable<int> userID, string industry, string sector, string subSector1, string subSector2, string subSector3, Nullable<int> displayLength, Nullable<int> displayStart, string search, Nullable<int> sortCol, string sortDir)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var industryParameter = industry != null ?
                new ObjectParameter("Industry", industry) :
                new ObjectParameter("Industry", typeof(string));
    
            var sectorParameter = sector != null ?
                new ObjectParameter("Sector", sector) :
                new ObjectParameter("Sector", typeof(string));
    
            var subSector1Parameter = subSector1 != null ?
                new ObjectParameter("SubSector1", subSector1) :
                new ObjectParameter("SubSector1", typeof(string));
    
            var subSector2Parameter = subSector2 != null ?
                new ObjectParameter("SubSector2", subSector2) :
                new ObjectParameter("SubSector2", typeof(string));
    
            var subSector3Parameter = subSector3 != null ?
                new ObjectParameter("SubSector3", subSector3) :
                new ObjectParameter("SubSector3", typeof(string));
    
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectIndicatorListByCategorySearchPortal_Result>("uspSelectIndicatorListByCategorySearchPortal", companyShortCodeParameter, userIDParameter, industryParameter, sectorParameter, subSector1Parameter, subSector2Parameter, subSector3Parameter, displayLengthParameter, displayStartParameter, searchParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<uspSelectLoadCorelationLeadLagByDataSetID_Result> uspSelectLoadCorelationLeadLagByDataSetID(string shortCode, Nullable<int> displayLength, Nullable<int> displayStart, string search, Nullable<int> sortCol, string sortDir, Nullable<int> userID)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectLoadCorelationLeadLagByDataSetID_Result>("uspSelectLoadCorelationLeadLagByDataSetID", shortCodeParameter, displayLengthParameter, displayStartParameter, searchParameter, sortColParameter, sortDirParameter, userIDParameter);
        }
    
        public virtual ObjectResult<uspSelectLoadCorelationLeadLagByDataSetIDForDatacast_Result> uspSelectLoadCorelationLeadLagByDataSetIDForDatacast(string shortCode, Nullable<int> displayLength, Nullable<int> displayStart, string search, Nullable<int> sortCol, string sortDir, Nullable<int> userID)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectLoadCorelationLeadLagByDataSetIDForDatacast_Result>("uspSelectLoadCorelationLeadLagByDataSetIDForDatacast", shortCodeParameter, displayLengthParameter, displayStartParameter, searchParameter, sortColParameter, sortDirParameter, userIDParameter);
        }
    
        public virtual ObjectResult<uspSelectRowsByDataSetID_Result> uspSelectRowsByDataSetID(Nullable<int> customerDataSetID, string table)
        {
            var customerDataSetIDParameter = customerDataSetID.HasValue ?
                new ObjectParameter("CustomerDataSetID", customerDataSetID) :
                new ObjectParameter("CustomerDataSetID", typeof(int));
    
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectRowsByDataSetID_Result>("uspSelectRowsByDataSetID", customerDataSetIDParameter, tableParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateCustomerDataSet(string prodIDs, string monthYears, string adjValues, string dataSetDescription, string modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var prodIDsParameter = prodIDs != null ?
                new ObjectParameter("ProdIDs", prodIDs) :
                new ObjectParameter("ProdIDs", typeof(string));
    
            var monthYearsParameter = monthYears != null ?
                new ObjectParameter("MonthYears", monthYears) :
                new ObjectParameter("MonthYears", typeof(string));
    
            var adjValuesParameter = adjValues != null ?
                new ObjectParameter("AdjValues", adjValues) :
                new ObjectParameter("AdjValues", typeof(string));
    
            var dataSetDescriptionParameter = dataSetDescription != null ?
                new ObjectParameter("DataSetDescription", dataSetDescription) :
                new ObjectParameter("DataSetDescription", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateCustomerDataSet", prodIDsParameter, monthYearsParameter, adjValuesParameter, dataSetDescriptionParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateFavouriteList(string companyShortCode, string indicatorShortCodes, Nullable<int> userID, string favouriteListName, string createdBY, Nullable<System.DateTime> createdDate)
        {
            var companyShortCodeParameter = companyShortCode != null ?
                new ObjectParameter("CompanyShortCode", companyShortCode) :
                new ObjectParameter("CompanyShortCode", typeof(string));
    
            var indicatorShortCodesParameter = indicatorShortCodes != null ?
                new ObjectParameter("IndicatorShortCodes", indicatorShortCodes) :
                new ObjectParameter("IndicatorShortCodes", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var favouriteListNameParameter = favouriteListName != null ?
                new ObjectParameter("FavouriteListName", favouriteListName) :
                new ObjectParameter("FavouriteListName", typeof(string));
    
            var createdBYParameter = createdBY != null ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateFavouriteList", companyShortCodeParameter, indicatorShortCodesParameter, userIDParameter, favouriteListNameParameter, createdBYParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspClearDataSetAnalysis(Nullable<int> customerDataSetID)
        {
            var customerDataSetIDParameter = customerDataSetID.HasValue ?
                new ObjectParameter("CustomerDataSetID", customerDataSetID) :
                new ObjectParameter("CustomerDataSetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspClearDataSetAnalysis", customerDataSetIDParameter);
        }
    }
}
