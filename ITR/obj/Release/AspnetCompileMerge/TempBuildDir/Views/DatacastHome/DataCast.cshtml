@model ITR.Models.DatacastDomainModel
@{
    ViewBag.Title = "Datacast";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



    @*<meta name="viewport" content="width=device-width" />
    <title>Data Cast</title>*@

   
 


    <div class="container-fluid">

        <div id="page-wrap" ng-app="">

            <div class="panel" style="border: 1px solid #dedede; padding-top: 0px; padding-bottom: 5px;">
                <div class="row">
                    <div class="col-sm-12">
                        <div class=" col-sm-6">
                            <label>Company</label>
                            <br />
                            @*@Html.DropDownListFor(Model => Model.Accounts, new SelectList(ViewBag.Accounts as System.Collections.IEnumerable, "AccountID", "AccountName"), "Select", new { @class = "form-control", id = "ddlAccounts" })*@

                            <label id="lblCompanyName"></label>

                        </div>
                        <div class="col-sm-3">
                            <label>Division</label>
                            <br />
                            @*<select name="ddlDivision" class="form-control" id="ddlDivision"></select>*@
                            <label id="lblDivision"></label>
                        </div>
                    </div>
                </div>
            </div>


            <div class="tabs">


                <!--Internal Rates of Change Start-->
                <div class="tab">
                    <input type="radio" class="radio" id="tab-2" name="tab-group-1">
                    <label for="tab-2">Internal Rates of Change</label>

                    <div class="content">
                        <div class="row">
                            <div class="col-sm-1 pull-right">
                                <button id="linkPrintIRC" class="shield-chart-button" type="button" title="Print the chart">
                                    <div class="sui-sprite shield-print-button-img"></div>
                                </button>
                                <input type="image" id="linkPrintPDFIRC" src="~/img/home/pdf_2.png" title="Download pdf document">

                                <input type="image" id="linkPrintPNGIRC" src="~/img/home/image_icon.png" title="Download Image">
                            </div>
                        </div>

                        <div id="divPrintIRC">
                            <div style="text-align: center;">
                                <span style="font-family: 'Bell MT'; font-size: 71px; line-height: 79px; color: #3175a4; font-weight: bold;">ITR</span><span style="font-family: 'Arial'; font-size: 48px; line-height: 54px; color: #270076; font-weight: bold;">&nbsp;</span><span style="font-family: &quot; Roboto Black&quot; , Roboto; font-size: 64px; line-height: 72px; color: rgb(7, 166, 132); font-style: italic; font-weight: 900;">Data</span><span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 64px; line-height: 72px; color: rgb(7, 166, 132); font-style: italic; font-weight: 300;">Cast</span>
                            </div>
                            <div style="text-align: center;">
                                <span style="font-family: 'Arial'; font-size: 11px; line-height: 12px; color: #acacac;">__________________________    </span><span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 16px; line-height: 18px; color: rgb(0, 0, 0); font-weight: 300;">First in Forecasts Since 1948 </span><span style="font-family: 'Arial'; font-size: 11px; line-height: 12px; color: #acacac;">__________________________</span>
                            </div>
                            <div style="text-align: center;">
                                <span style="font-family: 'Gill Sans MT'; font-size: 19px; line-height: 21px; color: #000000; font-weight: bold;">
                                    <span id="spnIRCDataSet1Name" class="spnIRCDataSet1Name"></span>
                                    <br>
                                    <span>vs </span>
                                    <br />
                                    <span id="spnIRCDataSet2Name" class="spnIRCDataSet2Name"></span>

                                    <br>
                                    <br>
                                </span>
                            </div>
                            <div id="chartIRC"></div>
                        </div>
                        <!--divPrintIRC End-->
                        <!--Grid below the chart-->
                        <div class="row" style="background-color: rgb(215, 215, 215); width: 100%; vertical-align: central; margin-left: 0%; height: 300px;">
                            <!--First Div Start-->
                            <div class="col-sm-2" style="padding-left: 25px;">

                                <div class="row" style="font-weight: bold;">Chart Legend</div>
                                <div class="row" style="font-weight: bold;"><span style="font-family: 'Wide Latin'; font-size: 16px; line-height: 18px; color: green;">---</span> <span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 11px; line-height: 12px; color: rgb(0, 0, 0); font-weight: 300;">Dataset 1</span> </div>
                                <div class="row" style="font-weight: bold;"><span style="font-family: 'Wide Latin'; font-size: 16px; line-height: 18px; color: #3E576F;">---</span> <span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 11px; line-height: 12px; color: rgb(0, 0, 0); font-weight: 300;">Dataset 2</span></div>

                            </div>
                            <!--First Div End-->
                            <!--Second Div Start-->
                            <div class="col-sm-5" style="padding-left: 25px;">
                                <div class="row"><strong>Select 1st Calculation</strong></div>
                                <div class="row">
                                    <select id="ddl1stCaluculation" style="width: 95%;">
                                        <option value="1/12">1/12</option>
                                        <option value="3/12" selected>3/12</option>
                                        <option value="12/12">12/12</option>
                                    </select>
                                </div>
                                <div class="row"><strong>Select Dataset 1</strong></div>
                                <div class="row">
                                    <select id="ddlIRCDataSet1" style="width: 95%;"></select>
                                </div>
                            </div>
                            <!--Second Div End-->
                            <!--Third Div Start-->
                            <div class="col-sm-5" style="padding-left: 25px;">
                                <div class="row"><strong>Select 2nd Calculation</strong></div>
                                <div class="row">
                                    <select id="ddl2ndCaluculation" style="width: 95%;">
                                        <option value="1/12">1/12</option>
                                        <option value="3/12">3/12</option>
                                        <option value="12/12" selected>12/12</option>
                                    </select>
                                </div>
                                <div class="row"><strong>Select Dataset 2</strong></div>
                                <div class="row">
                                    <select id="ddlIRCDataSet2" style="width: 95%;"></select>
                                </div>
                            </div>
                            <!--Third Div End-->


                        </div>


                    </div>
                </div>
                <!--Internal Rates of Change End-->
                <!--Internal Data Trends Start-->
                <div class="tab">
                    <input type="radio" class="radio" id="tab-1" name="tab-group-1">
                    <label for="tab-1">Internal Data Trends</label>

                    <div class="content">
                        <div class="row">
                            <div class="col-sm-1 pull-right">
                                <button id="linkPrintIDT" class="shield-chart-button" type="button" title="Print the chart">
                                    <div class="sui-sprite shield-print-button-img"></div>
                                </button>
                                <input type="image" id="linkPrintPDFIDT" src="~/img/home/pdf_2.png" title="Download pdf document">

                                <input type="image" id="linkPrintPNGIDT" src="~/img/home/image_icon.png" title="Download Image">
                            </div>
                        </div>
                        <div id="divPrintIDT">
                            <div style="text-align: center;">
                                <span style="font-family: 'Bell MT'; font-size: 71px; line-height: 79px; color: #3175a4; font-weight: bold;">ITR</span><span style="font-family: 'Arial'; font-size: 48px; line-height: 54px; color: #270076; font-weight: bold;">&nbsp;</span><span style="font-family: &quot; Roboto Black&quot; , Roboto; font-size: 64px; line-height: 72px; color: rgb(7, 166, 132); font-style: italic; font-weight: 900;">Data</span><span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 64px; line-height: 72px; color: rgb(7, 166, 132); font-style: italic; font-weight: 300;">Cast</span>
                            </div>
                            <div style="text-align: center;">
                                <span style="font-family: 'Arial'; font-size: 11px; line-height: 12px; color: #acacac;">__________________________    </span><span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 16px; line-height: 18px; color: rgb(0, 0, 0); font-weight: 300;">First in Forecasts Since 1948 </span><span style="font-family: 'Arial'; font-size: 11px; line-height: 12px; color: #acacac;">__________________________</span>
                            </div>
                            <div style="text-align: center;">
                                <span style="font-family: 'Gill Sans MT'; font-size: 19px; line-height: 21px; color: #000000; font-weight: bold;">
                                    <span id="spnIDTDataSetName" class="spnIDTDataSetName"></span>
                                    <br>
                                    <span id="spnIDTCaluculationsType" class="spnIDTCaluculationsType"></span>

                                    <br>
                                    <div id="divLablesIDT" style="display: none;">
                                        <strong>Calculation Type: <span id="spnIDTCalculationType" class="spnIDTCalculationType"></span></strong>
                                    </div>
                                    <br>
                                </span>
                            </div>
                            <div id="chartIDT"></div>
                        </div>
                        <!--divPrintIDT END-->
                        <!--Grid below the chart-->
                        <div class="row" style="background-color: rgb(215, 215, 215); width: 100%; vertical-align: central; margin-left: 0%; height: 300px;">
                            <!--First Div Start-->
                            <div class="col-sm-3" style="padding-left: 25px;">

                                <div class="row" style="font-weight: bold;">Chart Legend</div>
                                <div class="row" style="font-weight: bold;"><span style="font-family: 'Wide Latin'; font-size: 16px; line-height: 18px; color: green;">---</span> <span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 11px; line-height: 12px; color: rgb(0, 0, 0); font-weight: 300;">3 MMT or 3 MMA</span> </div>
                                @*<div class="row" style="font-weight: bold;"><span style="font-family: 'Wide Latin'; font-size: 19px; line-height: 21px; color: #3E576F; font-weight: bold;">..</span> <span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 11px; line-height: 12px; color: rgb(0, 0, 0); font-weight: 300;">Company Forecast </span></div>
                                *@
                                <div class="row" style="font-weight: bold;"><span style="font-family: 'Wide Latin'; font-size: 16px; line-height: 18px; color: #3E576F;">---</span> <span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 11px; line-height: 12px; color: rgb(0, 0, 0); font-weight: 300;">12 MMT or 12 MMA</span></div>
                                @*<div class="row" style="font-weight: bold;"><span style="font-family: 'Wide Latin'; font-size: 19px; line-height: 21px; color: green; font-weight: bold;">..</span> <span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 11px; line-height: 12px; color: rgb(0, 0, 0); font-weight: 300;">Indicator Forecast  </span></div>
                                *@

                            </div>
                            <!--First Div End-->
                            <!--Second Div Start-->
                            <div class="col-sm-5">
                                <div class="row">
                                    <div class="col-sm-10"><strong>Select Company DataSet</strong></div>
                                </div>
                                <div class="row">
                                    <select id="ddlIDTDataSets" style="width: 95%;"></select>
                                </div>
                            </div>
                            <!--Second Div End-->
                            <!--Third Div Start-->
                            <div class="col-sm-4">
                                <div class="row bold">Select Calculation Type(MMT or MMA)</div>
                                <div class="row">
                                    <input type="radio" class="FICheckRadio" name="radioCaluculationType" checked="checked" value="0">
                                    <a class="FIText" title="Monthly Moving Total">Monthly Moving Total</a>
                                </div>
                                <div class="row">
                                    <input type="radio" class="FICheckRadio" name="radioCaluculationType" value="1">
                                    <a class="FIText" title="Monthly Moving Average">Monthly Moving Average</a>
                                </div>


                            </div>
                            <!--Third Div End-->


                        </div>



                    </div>
                </div>
                <!--Internal Data Trends End-->
                <!--DataCast Start-->
                <div class="tab">
                    <input type="radio" class="radio" id="tab-3" name="tab-group-1" checked>
                    <label for="tab-3">Datacast</label>

                    <div class="content">
                        <div class="row">
                            <div class="col-sm-1 pull-right">
                                <button id="linkPrint" class="shield-chart-button" type="button" title="Print the chart">
                                    <div class="sui-sprite shield-print-button-img"></div>
                                </button>
                                <input type="image" id="linkPrintPDF" src="~/img/home/pdf_2.png" title="Download pdf document">
                                <input type="image" id="linkPrintPNG" src="~/img/home/image_icon.png" title="Download Image">
                            </div>
                        </div>

                        <div id="divPrint">
                            <div style="text-align: center;">
                                <span style="font-family: 'Bell MT'; font-size: 71px; line-height: 79px; color: #3175a4; font-weight: bold;">ITR</span><span style="font-family: 'Arial'; font-size: 48px; line-height: 54px; color: #270076; font-weight: bold;">&nbsp;</span><span style="font-family: &quot; Roboto Black&quot; , Roboto; font-size: 64px; line-height: 72px; color: rgb(7, 166, 132); font-style: italic; font-weight: 900;">Data</span><span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 64px; line-height: 72px; color: rgb(7, 166, 132); font-style: italic; font-weight: 300;">Cast</span>
                            </div>
                            <div style="text-align: center;">
                                <span style="font-family: 'Arial'; font-size: 11px; line-height: 12px; color: #acacac;">__________________________    </span><span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 16px; line-height: 18px; color: rgb(0, 0, 0); font-weight: 300;">First in Forecasts Since 1948 </span><span style="font-family: 'Arial'; font-size: 11px; line-height: 12px; color: #acacac;">__________________________</span>
                            </div>
                            <div style="text-align: center;">
                                <span style="font-family: 'Gill Sans MT'; font-size: 19px; line-height: 21px; color: #000000; font-weight: bold;">
                                    <span id="spnDataSetName" class="spnDataSetName"></span>
                                    <br>
                                    <span id="spnIndicatorName" class="spnIndicatorName"></span>

                                  
                                    <div id="divLables" style="display: none;">
                                        <strong>Lead / Lag Months: <span id="spnIndicatorMoveMonths" class="spnIndicatorMoveMonths" data-ng-bind="moveMonths"></span></strong>
                                        <strong>, Indicator view: <span id="spnIndicatorView" class="spnIndicatorView"></span></strong>
                                    </div>
                                    <br />
                                    <span id="spnBusiness" style="display:none">Phases are automated, not manually calculated as seen in other ITR works*</span>

                                </span>
                            </div>
                            <div id="chart"></div>

                        </div>
                        <!-- End of DataCast Print Div-->
                        <!--Grid below the chart-->
                        <div class="row" style="background-color: rgb(215, 215, 215); width: 100%; vertical-align: central; margin-left: 0%; height: 300px;">
                            <!--First Div Start-->
                            <div class="col-sm-3" style="padding-left: 25px;">
                                <div class="row">
                                    <div class="col-sm-12">Select Company DataSet</div>
                                </div>
                                <div class="row">
                                    <select class="col-sm-12" id="ddlDataSets"></select>
                                </div>
                                <br />
                                <div class="row" style="font-weight: bold;">Chart Legend</div>
                                <div class="row" style="font-weight: bold;"><span style="font-family: 'Wide Latin'; font-size: 16px; line-height: 18px; color: #3E576F;">---</span> <span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 11px; line-height: 12px; color: rgb(0, 0, 0); font-weight: 300;">Company/Division Data</span> </div>
                                <div class="row" style="font-weight: bold;"><span style="font-family: 'Wide Latin'; font-size: 19px; line-height: 21px; color: #3E576F; font-weight: bold;">..</span> <span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 11px; line-height: 12px; color: rgb(0, 0, 0); font-weight: 300;">Company Forecast </span></div>
                                <div class="row" style="font-weight: bold;"><span style="font-family: 'Wide Latin'; font-size: 16px; line-height: 18px; color: green;">---</span> <span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 11px; line-height: 12px; color: rgb(0, 0, 0); font-weight: 300;">Indicator History</span></div>
                                <div class="row" style="font-weight: bold;"><span style="font-family: 'Wide Latin'; font-size: 19px; line-height: 21px; color: green; font-weight: bold;">..</span> <span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 11px; line-height: 12px; color: rgb(0, 0, 0); font-weight: 300;">Indicator Forecast  </span></div>




                            </div>
                            <!--First Div End-->
                            <!--Second Div Start-->
                            <div class="col-sm-6">

                                @*<div class="row">
                                        <div class="col-sm-6" style="font-weight: bold;">Indicator Name - Indicator</div>
                                        <div class="col-sm-3" style="font-weight: bold;">Correlation</div>
                                        <div class="col-sm-3" style="font-weight: bold;">Lead/Lag</div>
                                    </div>*@
                                <table align="right" style="margin:5px;padding:0px !important;width:100%;">
                                    <tr>
                                        <td align="center">
                                            <span style="color:rgba(0, 41, 162, 0.91);" id="spnFavListName"></span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <input type="button" style="font-weight:bold; margin-bottom: 5px;" align="right" value=" Show Favorites List " id="ShowFavorites">&nbsp;&nbsp;&nbsp;
                                            <input type="button" style="font-weight:bold; margin-bottom: 5px;" align="right" value=" Show All Indicators " id="HideFavorites">&nbsp;&nbsp;&nbsp;
                                            <input type="button" style="font-weight:bold; margin-bottom: 5px;" align="right" value=" Save Favorites List " id="SaveFavorites">&nbsp;&nbsp;&nbsp;
                                            <input type="button" style="font-weight:bold; margin-bottom: 5px;" align="right" value=" Clear Favorites " id="ClearFavorites">&nbsp;&nbsp;&nbsp;
                                            <input type="button" style="font-weight:bold; margin-bottom: 5px;" align="right" value=" Search Category " id="SearchCategory">
                                        </td>

                                    </tr>
                                    <tr>
                                        <td style="font-weight:bold;" align="center">
                                            <input type="checkbox" id="chkBusinessPhase" name="chkBusinessPhase" value="chkBusinessPhase" /><span style="font-weight: bold;"> Business Phase</span>
                                        </td>

                                    </tr>
                                    <tr>
                                        <td>
                                            <div id="divIndicator" style='height: 250px; display: block; overflow-y: scroll; overflow-x: hidden; background-color: white;'>


                                                <!--Here the Indicator list  will be loaded dynamically-->

                                                <table class="table table-th-block table-dark link_cursor" id="CorelationLeadLagList">
                                                    <thead>
                                                        <tr>

                                                            @*<th><input type="checkbox" name="selectAll" value="1" id="selectAll">IndicatoName-Indicator</th>*@
                                                            <th>IndicatoName-Indicator</th>
                                                            <th>Correlation</th>
                                                            <th>Lead/Lag</th>
                                                            <th>Company</th>
                                                            <th>Indicator</th>
                                                            <th>Description</th>
                                                            <th>FavouriteListName</th>
                                                            <th>Favorites</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </td>
                                    </tr>
                                </table>


                            </div>
                            <!--Second Div End-->
                            <!--Third Div Start-->
                            <div class="col-sm-3">
                                <div class="row">
                                    <span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 15px; line-height: 17px; color: rgb(0, 0, 0); font-weight: bold;">
                                        Enter Number of Months
                                        <br>
                                        To Move Indicator
                                    </span>
                                </div>
                                <div class="row" data-ng-init="moveMonths='0'">
                                    <input type="text" class="QueryBox" data-ng-model="moveMonths" value="0">
                                </div>
                                <br />
                                <div class="row bold">Invert Indicator</div>
                                <div class="row">
                                    <input type="radio" class="FICheckRadio" name="radioInvert" value="1">
                                    <a class="FIText" title="Inverted View">Inverted View</a>
                                </div>
                                <div class="row">
                                    <input type="radio" class="FICheckRadio" name="radioInvert" checked="checked" value="0">
                                    <a class="FIText" title="Normal View">Normal View</a>
                                </div>

                            </div>
                            <!--Third Div End-->


                        </div>

                    </div>

                </div>
                <!--DataCast End-->
                <!--Download Data Start-->
                <div class="tab">
                    <input type="radio" class="radio" id="tab-4" name="tab-group-1">
                    <label for="tab-4">Download Data</label>

                    <div class="content">

                        @* <div style="text-align: center;">
                                <span style="font-family: 'Gill Sans MT'; font-size: 19px; line-height: 21px; color: #000000; font-weight: bold;">
                                    <span class="spnDataSetName"></span>
                                    <br>
                                    <span class="spnIndicatorName"></span>

                                    <br>
                                    <br>
                                </span>
                            </div>*@
                        <div class="row">
                            @*<div class="col-sm-4">

                                    <div class="row" style="font-weight: bold; margin-left: 10%;">Chart Legend</div>
                                    <div class="row" style="font-weight: bold; margin-left: 10%;"><span style="font-family: 'Wide Latin'; font-size: 16px; line-height: 18px; color: #3E576F;">---</span> <span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 11px; line-height: 12px; color: rgb(0, 0, 0); font-weight: 300;">Company/Division Data</span> </div>
                                    <div class="row" style="font-weight: bold; margin-left: 10%;"><span style="font-family: 'Wide Latin'; font-size: 19px; line-height: 21px; color: #3E576F; font-weight: bold;">..</span> <span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 11px; line-height: 12px; color: rgb(0, 0, 0); font-weight: 300;">Company Forecast </span></div>
                                    <div class="row" style="font-weight: bold; margin-left: 10%;"><span style="font-family: 'Wide Latin'; font-size: 16px; line-height: 18px; color: green;">---</span> <span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 11px; line-height: 12px; color: rgb(0, 0, 0); font-weight: 300;">Indicator History</span></div>
                                    <div class="row" style="font-weight: bold; margin-left: 10%;"><span style="font-family: 'Wide Latin'; font-size: 19px; line-height: 21px; color: green; font-weight: bold;">..</span> <span style="font-family: &quot; Roboto Light&quot; , Roboto; font-size: 11px; line-height: 12px; color: rgb(0, 0, 0); font-weight: 300;">Indicator Forecast  </span></div>

                                </div>*@
                            <div class="col-sm-8">
                                <div id="chartDownloadData"></div>
                            </div>

                        </div>


                        <span style="font-weight: bold; margin-left: 0%;">Company Data </span>
                        <!-- Raghuveer STart -->
                        <div class="row" style="background-color: rgb(215, 215, 215); width: 100%; vertical-align: central; margin-left: 0%; height: 300px;">
                            <!--First Div Start-->
                            <div class="col-sm-12">
                                <div class="row">
                                    <div class="col-sm-6" style="padding-left: 25px;">
                                        <div class="row">
                                            <div class="col-sm-10">Select Company DataSet</div>
                                        </div>
                                        <div class="row">
                                            <select id="ddlDataSetsDD" class="multiSelect form-control link_cursor" multiple="multiple"></select>
                                        </div>

                                    </div>

                                    <div class="col-sm-6">
                                        <br />
                                        <br />
                                        <a href="#" class="btn btn-success pull-right" id="DownloadSection1" download="CompanyData.csv">DOWNLOAD CSV</a>
                                    </div>

                                </div>
                                <div class="row">
                                    <div class="col-sm-12 downloadsection1">
                                        <div class="rowstyle downloadsection1Cnt">
                                            <div class="col-sm-1 dataRow dataRowMore" style="font-weight: bold;">MonthYear</div>
                                            <div class="col-sm-1 dataRow" style="font-weight: bold;">1/12</div>
                                            <div class="col-sm-1 dataRow dataRowMore" style="font-weight: bold;">3MMA</div>
                                            <div class="col-sm-1 dataRow " style="font-weight: bold;">3MMT</div>
                                            <div class="col-sm-1 dataRow dataRow_m1" style="font-weight: bold;">3/12</div>
                                            <div class="col-sm-1 dataRow dataRowMore dataRow_m2" style="font-weight: bold;">12MMA</div>
                                            <div class="col-sm-1 dataRow dataRow_m3" style="font-weight: bold;">12MMT</div>
                                            <div class="col-sm-1 dataRow dataRow_m4" style="font-weight: bold;">12/12</div>
                                        </div>
                                        <div id="divIndicatorSection1" style='height: 150px; display: block; overflow-y: scroll; overflow-x: hidden; background-color: white;'>
                                            <!--Here the Indicator list  will be loaded dynamically-->
                                        </div>

                                    </div>
                                </div>



                            </div>

                        </div>

                        <hr />
                        <br />
                        <span style="font-weight: bold; margin-left: 0%;">Indicator List </span>
                        <div class="row" style="background-color: rgb(215, 215, 215); width: 100%; vertical-align: central; margin-left: 0%; height: 300px;">
                            <div class="col-sm-12">


                                <div class="row">

                                    <div class="col-sm-6" style="padding-left: 25px;">
                                        <div class="row">
                                            <div class="col-sm-10">Select Company DataSet</div>
                                        </div>
                                        <div class="row">
                                            <select id="ddlDataSetsIndList" class="multiSelect form-control link_cursor" multiple="multiple"></select>
                                        </div>
                                    </div>

                                    <div class="col-sm-6">
                                        <br />
                                        <br />
                                        <a href="#" class="btn btn-success pull-right" id="DownloadSection2">DOWNLOAD CSV</a>
                                        @*download="IndicatorList.csv"*@
                                    </div>

                                </div>
                                <div class="row">
                                    <!--Second Div Start-->
                                    <div class="col-sm-12 downloadsection2">

                                        <div class="row">
                                            @*<div class="col-sm-6" style="font-weight: bold;">Indicator Name - Indicator</div>
                                                <div class="col-sm-3" style="font-weight: bold;">Correlation</div>
                                                <div class="col-sm-3" style="font-weight: bold;">Lead/Lag</div>*@


                                            <div style='height: 150px; display: block; overflow-y: scroll; overflow-x: hidden; background-color: white;'>
                                                <!--Here the Indicator list  will be loaded dynamically-->

                                                <table class="table table-th-block table-dark link_cursor" id="CorelationLeadLagListDownload">
                                                    <thead>
                                                        <tr>
                                                            <th>IndicatoName-Indicator</th>
                                                            <th>Correlation</th>
                                                            <th>Lead/Lag</th>
                                                            <th>Company</th>
                                                            <th>Indicator</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>

                                            </div>
                                        </div>
                                    </div>
                                </div>


                            </div>
                        </div>

                        <br />
                        <span style="font-weight: bold; margin-left: 0%;">Indicator Data </span>

                        <div class="row" style="background-color: rgb(215, 215, 215); width: 100%; vertical-align: central; margin-left: 0%; height: 230px;">
                            <!--First Div Start-->

                            <div class="col-sm-12" style="padding-left: 25px;">
                                <div class="row text-right">

                                    <div class="col-sm-12">
                                        <br />
                                        <a href="#" class="btn btn-success" id="DownloadSection3" download="IndicatorData.csv">DOWNLOAD CSV</a>
                                    </div>
                                </div>
                                <div class="row">
                                    <!--Second Div Start-->
                                    <div class="col-sm-12 downloadsection3">

                                        <div class="row">
                                            <div class="col-sm-3" style="font-weight: bold;">MonthYear</div>
                                            <div class="col-sm-3" style="font-weight: bold;">Indicator Full Name</div>
                                            <div class="col-sm-3" style="font-weight: bold;">12/12</div>
                                        </div>
                                        <div id="divIndicatorDDShortCodes" style='height: 150px; display: block; overflow-y: scroll; overflow-x: hidden; background-color: white;'>
                                            <!--Here the Indicator list  will be loaded dynamically-->
                                        </div>

                                    </div>
                                </div>


                            </div>


                        </div>



                        <br />

                    </div>
                </div>
                <!--Download Data End-->
                <!--Indicator Summary Start-->
                <div class="tab">
                    <input type="radio" class="radio" id="tab-5" name="tab-group-1">
                    <label for="tab-5">Indicator Summary</label>

                    <div class="content">
                        @*<div class="row">
                                <div class="col-sm-10" style="background-color: rgb(215, 215, 215); width: 100%; vertical-align: central; margin-left: 0%; font-weight: bold; padding-top: 30px;">
                                    <span id="spnDataSetName" class="spnDataSetName"></span>
                                    <hr />

                                </div>
                            </div>*@
                        <div class="row">
                            <div class="col-sm-10" style="background-color: rgb(215, 215, 215); width: 100%; vertical-align: central; margin-left: 0%; height: 500px;">

                                @*<div class="row">
                                        <div class="col-sm-6" style="font-weight: bold;">Indicator Name - Indicator</div>
                                        <div class="col-sm-3" style="font-weight: bold;">Correlation</div>
                                        <div class="col-sm-3" style="font-weight: bold;">Lead/Lag</div>
                                    </div>*@
                                <div class="divIndicator" style='height: 450px; display: block; overflow-y: scroll; overflow-x: hidden; background-color: white;'>
                                    <!--Here the Indicator list  will be loaded dynamically-->
                                    <table class="table table-th-block table-dark" id="CorelationLeadLagListIndicationSummary">
                                        <thead>
                                            <tr>
                                                <th>IndicatoName-Indicator</th>
                                                <th>Correlation</th>
                                                <th>Lead/Lag</th>
                                                <th>Company</th>
                                                <th>Indicator</th>
                                            </tr>
                                        </thead>
                                        <tbody></tbody>
                                    </table>
                                    @*<div id="divIndicatorDD" style='height: 150px; display: block; overflow-y: scroll; overflow-x: hidden; background-color: white;'>*@
                                    <!--Here the Indicator list  will be loaded dynamically-->
                                    @*</div>*@


                                </div>

                            </div>

                        </div>
                    </div>
                </div>
                <!--Indicator Summary End-->



            </div>


        </div>
        </div>
        <!--Favorites list popup-->

        <div class="modal2" id="FavListModalPopUp" tabindex="-1" role="dialog" aria-hidden="true" style="display:none;">
            <div class="modal-dialog">
                <div class="modal-content" style="width:450px">
                    <div class="modal-header">
                        <button id="close" type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>

                    </div>
                    <div class="modal-body">

                        <div id="dialog-form">
                            <div class="the-box full no-border">
                                <div class="row">
                                    <div class="col-sm-12">
                                        <div class="table-responsive">
                                            <table class="table table-th-block table-dark" id="dtFavList">
                                                <thead>
                                                    <tr>
                                                        <th>Favorite List Name</th>
                                                        <th>Delete</th>
                                                    </tr>
                                                </thead>
                                                <tbody></tbody>
                                            </table>
                                        </div>
                                    </div>
                                    <!-- /.table-responsive -->
                                </div>

                                <br />

                                <div class="row btnprint">

                                    <div class="col-sm-4">
                                        <button class="btn btn-warning pull-left" id="btnCancelFavPopUP">Cancel</button>
                                    </div>



                                </div>

                            </div>



                        </div>


                        <!-- /.modal-content -->
                    </div>
                    <!-- /.modal-content -->
                </div>
                <!-- /.modal-dialog -->
            </div>
            <!-- /#DefaultModal -->
        </div>



        <div class="modal2" id="FirstViewPopup" tabindex="-1" role="dialog" aria-hidden="true" style="display:none;">
            <div class="modal-dialog">
                <div class="modal-content" style="width:650px">
                    <div class="modal-header">
                        <button id="closeFirstPopup" type="button" class="close" data-dismiss="modal2" aria-hidden="true">&times;</button>

                    </div>
                    <div class="modal-body">

                        <div id="dialog-form">
                            <div class="the-box full no-border">
                                <div class="row">
                                    <div class="col-sm-12">
                                        <span> *The phases found in DataCast are provided via a mathematical calculation and do not take into account certain nuances that our professional economists would consider when calculating a Phase of the Business Cycle in a consultative program with us.  Please contact a Program Consultant should you prefer to have a deeper understanding of the Phases for your markets or company, and we will be happy to review options in purchasing a consultative program or 1-hour EconChat.</span>
                                    </div>

                                </div>
                                <br />
                                <div class="row">
                                    <div class="col-sm-12" style="text-align:right">
                                        <input type="checkbox" id="chkShowPopup" /> Don't Show this message again
                                    </div>

                                </div>
                                <br />


                            </div>



                        </div>


                        <!-- /.modal-content -->
                    </div>
                    <!-- /.modal-content -->
                </div>
                <!-- /.modal-dialog -->
            </div>
            <!-- /#DefaultModal -->
        </div>



<div class="modal2" id="SearchCategoryPopup" tabindex="-1" role="dialog" aria-hidden="true" style="display:none;">
    <div class="modal-dialog">
        <div class="modal-content" style="width:450px">
            <div class="modal-header">
                <button id="closecategorypopup" type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>

            </div>
            <div class="modal-body">

                <div id="dialog-form">
                    <div class="the-box full no-border">
                        <div class="row">
                            <div class="col-sm-12">
                                
                                Category : <select id="ddlCategories" class="form-control link_cursor" ></select>
                            </div>
                            <!-- /.table-responsive -->
                        </div>

                        <br />
                        <div class="row" style="display:none" id="subcategoryrow">
                            <div class="col-sm-12">

                                Sub Category : <select id="ddlSubCategories" class="form-control link_cursor"></select>
                            </div>
                            <!-- /.table-responsive -->
                        </div>
                        <br/>

                        <div class="row" style="display:none" id="subsector1row">
                            <div class="col-sm-12">

                                SubSector1 : <select id="ddlSubSectors1" class="form-control link_cursor"></select>
                            </div>
                            <!-- /.table-responsive -->
                        </div>
                        <br />

                        <div class="row" style="display:none" id="subsector2row">
                            <div class="col-sm-12">

                                SubSector2 : <select id="ddlSubSectors2" class="form-control link_cursor"></select>
                            </div>
                            <!-- /.table-responsive -->
                        </div>
                        <br />

                        <div class="row" style="display:none" id="subsector3row">
                            <div class="col-sm-12">

                                SubSector3 : <select id="ddlSubSectors3" class="form-control link_cursor"></select>
                            </div>
                            <!-- /.table-responsive -->
                        </div>
                        <br />


                        <div class="row btnprint">

                            <div class="col-sm-4">
                                <button class="btn btn-warning pull-left" id="btnCancelSearchCategoryPopup">Cancel</button>
                            </div>
                            <div class="col-sm-4">
                             <label >&nbsp;</label>
                            </div>
                            <div class="col-sm-4">
                                <button class="btn btn-sucess pull-right" id="btnSearchCategorySubCategory">Search</button>
                            </div>

                        </div>

                    </div>



                </div>


                <!-- /.modal-content -->
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
    <!-- /#DefaultModal -->
</div>

       


     @if (Session.Count > 0)
     {
        <input type="hidden" id="hdnCompanyID" title="" value="@Session["CompanyID"].ToString()" />
        <input type="hidden" id="hdnDivisionID" title="" value="@Session["DivisonID"].ToString()" />
        <input type="hidden" id="hdnUserID" title="" value="@Session["UserID"].ToString()" />
        <input type="hidden" id="hdnIsDataPortalAdmin" title="" value="@Session["IsDataPortalAdmin"].ToString()" />

     }
     else
     {
        <input type="hidden" id="hdnCompanyID" title="" value="" />
        <input type="hidden" id="hdnDivisionID" title="" value="" />
        <input type="hidden" id="hdnUserID" title="" value="" />
        <input type="hidden" id="hdnIsDataPortalAdmin" title="" value="" />

        @*<script src="~/js/jquery.min.js"></script>
            <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js"></script>*@
    <script src="~/datacastjs/jquery-1.11.1.min.js"></script>
        <script type="text/javascript" lang="javascript">
            console.log("else case");
            var elseCaseCompanyId = window.localStorage.getItem('ECompanyID');
            $("#hdnCompanyID").val(elseCaseCompanyId);
            var elseCaseDivisionID = window.localStorage.getItem('EDivisionID');
            $("#hdnDivisionID").val(elseCaseDivisionID);
            var elseCaseisDataPortalAdmin = window.localStorage.getItem('EisDataPortalAdmin');
            $("#hdnIsDataPortalAdmin").val(elseCaseisDataPortalAdmin);

            var sessionObj = {
                CompanyID: window.localStorage.getItem('ECompanyID'),
                DivisonID: window.localStorage.getItem('EDivisionID'),
                UserID: window.localStorage.getItem('EUserID'),
                IsDataPortalAdmin: window.localStorage.getItem('EisDataPortalAdmin'),
                Value1: window.localStorage.getItem('EUserName')
            }
            var itrIISURL = "https://datacast-analysis.itreconomics.com/Home/ITRSessionRequest";
            $.ajax({
                type: "POST",
                async: false,
                url: itrIISURL,
                crossDomain: true,
                dataType: "json",
                data: sessionObj,
                success: function (res) {
                    console.log("Step 4 Datacast Else Case");
                    // console.log(res);
                },
                error: function (error) {
                    console.log(error)
                }
            });
            //$("#hdnCompanyID").val(8224)
            //$("#hdnDivisionID").val(0);
            //$("#hdnUserID").val(1);
        </script>
     }


@section PagespecificCss
{
    <link href="~/css/light/all.min.css" rel="stylesheet" />
    <link href="~/datacastdashboard/css/bootstrap.min.css" rel="stylesheet" />
    <link href="~/datacastassets/plugins/datatables/dataTables.min.css" rel="stylesheet" />
    <link href="~/css/style.css" rel="stylesheet" />

    <style>
        .bold {
            font-weight: bold;
        }

        .FIText {
            color: black;
            padding-left: 6px;
        }

        .cursor {
            cursor: pointer;
        }

        .active {
            background-color: blue;
            color: white;
            font-weight: bold;
        }

        .modal1 {
            position: fixed;
            z-index: 999;
            height: 100%;
            width: 100%;
            top: 0;
            background-color: Black;
            filter: alpha(opacity=60);
            opacity: 0.6;
            -moz-opacity: 0.8;
        }

        .modal2 {
            position: absolute;
            z-index: 999;
            width: 100%;
            top: 50%;
            background-color: transparent;
            /*filter: alpha(opacity=60);
                opacity: 2;
                -moz-opacity: 0.8;*/
        }

        .center {
            z-index: 1000;
            margin: 300px auto;
            padding: 10px;
            width: 130px;
            background-color: White;
            border-radius: 10px;
            filter: alpha(opacity=100);
            opacity: 1;
            -moz-opacity: 1;
        }

            .center img {
                height: 110px;
                width: 110px;
            }

        hr {
            -moz-border-bottom-colors: none;
            -moz-border-image: none;
            -moz-border-left-colors: none;
            -moz-border-right-colors: none;
            -moz-border-top-colors: none;
            border-color: #acacac -moz-use-text-color #FFFFFF;
            border-style: solid none;
            border-width: 3px 0;
            margin-left: 10%;
            margin-right: 10%;
            margin-top: 2%;
            margin-bottom: 0%;
        }

        /*Added by Vishnu For bPopup*/
        #displayMessage {
            background-color: #fff !important;
            border-radius: 15px !important;
            color: #000 !important;
            box-shadow: 0 0 25px 5px #999;
            padding: 20px !important;
            min-width: 200px !important;
            min-height: 100px !important;
        }

        .button.b-close, .button.bClose {
            color: #fff !important;
            background-color: #2b91af !important;
            border-radius: 7px !important;
            box-shadow: none !important;
            font: bold 131% sans-serif !important;
            padding: 0 6px 2px !important;
            position: absolute !important;
            right: -7px !important;
            top: -7px !important;
            cursor: pointer;
        }

         .button.ok-close  {
            box-shadow: none !important;
            cursor: pointer;
        }



        /*To disable the events of active row, so we can avoid clicking on already selected rows*/
        .blocked {
            position: relative;
            pointer-events: none;
        }

        .hide_column {
            display: none;
        }

        .highlight {
            background-color: green !important;
        }

        #linkPrintPDF {
            vertical-align: middle;
        }

        #linkPrintPNG {
            vertical-align: middle;
        }


        #linkPrintPDFIDT {
            vertical-align: middle;
        }

        #linkPrintPNGIDT {
            vertical-align: middle;
        }

        #linkPrintPDFIRC {
            vertical-align: middle;
        }

        #linkPrintPNGIRC {
            vertical-align: middle;
        }

        .link_cursor {
            cursor: pointer;
        }

        table.dataTable thead th {
            padding: 3px 18px 3px 10px;
        }

        .testpopup {
            z-index: 9999999 !important;
        }

        .modal-header {
            padding: 7px !important;
        }

        .modal-body {
            padding: 7px !important;
        }

        .activ {
            background-color: #08c;
            color: white;
            font-weight: bold;
        }
    </style>

}
   @section PageSpecificScript
 {

<script type="text/javascript" src="~/datacastassets/plugins/datatables/jquery.dataTables.js"></script>
<script type="text/javascript" src="~/datacastassets/plugins/datatables/dataTables.bootstrap.js"></script>

  
    <script src="~/datacastjs/shieldui-all.min.js"></script>
    <script src="~/datacastjs/angular-1.4.8.min.js"></script>
    <script src="~/datacastjs/jspdf.debug.js"></script>
    <script src="~/datacastjs/html2canvas.js"></script>

    <script type="text/javascript">
        /***
        *Created By:Vishnuvardhan Reddy Ammana
        *It Contains various operations involved in loading the companies, and associated indicators and loading reapective Graphs accordingly
        */

        var isInvertedVal = false;
        var caluculationTypeVal = 0;// -- Here the possible values are 0 and 1, 0- for MonthlymovingTotals, 1-  for MonthlymovingAverages
        var IDTTooltipText = "Total"; //Default is Monthly Moving Total, and will be changed based on radio button selection in Data Trends Tab
        var moveMonths = 0;
        var indicatorShotrCode = "", companyCode = "";
        var IndicatorObject = "";
        var companyObject = "";
        var combinationObject = "", IDTcombinationObject = "", IRCcombinationObject1 = "", IRCcombinationObject2 = "";
        var dataSetID = 0,dataSetIDLocal="";
        var multipleids="";
        var IndicatorMinValue = "", IndicatorMaxValue = "";
        var CompanyMinValue = "", CompanyMaxValue = "";
        //For Internal Data Trends Tab
        var IDTdataSetName = "";
        var MM12MinValue = "", MM12MaxValue = "";
        var MM3MinValue = "", MM3MaxValue = "";
        //For IRC Tab
        var IRCdataSetName1 = "", IRCdataSetName2 = "";
        var IRCTooltip1Text = "3/12", IRCTooltip2Text = "12/12";
        var MM12Scale;

        var _CompanyId = 0;




        var LocalIndicatorShortCode ="";

        //Added by khaja
        var ticksRepeatCompany=0;
        var ticksRepeatIndicator=0;
        var CompanyMaxvalueLine =0;
        var IndicatorMaxvalueLine =0;
        var CompanyIndicatorMaxLineDifference = 0;
        var CompanyZeroLine =0;
        var IndicatorZeroLine =0;
        var CompanyZeroLineFlag =false;
        var IndicatorZeroLineFlag =false;
        var CompanyNeededLines =0;
        var IndicatorNeededLines =0;
        var ZeroLinesAlign = false;
        var IndicatorMinValueNew = "", IndicatorMaxValueNew = "";
        var CompanyMinValueNew = "", CompanyMaxValueNew = "";
        var IndicatorMinValueOrg = "", IndicatorMaxValueOrg = "";
        var CompanyMinValueOrg = "", CompanyMaxValueOrg = "";

        var ChartIndicatorMinValue = "", ChartIndicatorMaxValue = "";
        var ChartCompanyMinValue = "", ChartCompanyMaxValue = "";

        var k = 0;
        var i = 0;
        var j = 0;

        var FavList = "";
        var FavListpaginate = "";
        var FavListFlag = false;
        var FavListName = "";
        var SelFavName = "";
        var CategorySearchStatus ="";
        var IndustryName="";
        var SectorName="";
        var SubSector1Name="";
        var SubSector2Name="";
        var SubSector3Name="";
      
        //var IndicatorMinValueFlag = false;
        divisionID=0;
        ///end
        function GetMonthName(monthNumber) {
            var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            return months[monthNumber - 1];
        }

        function LoadDataSets() {
            // alert(1);

            var accountid =_CompanyId;//2301;// $('#ddlAccounts option:selected').val();//2857;2857;//
            var divisionId = divisionID;//0;// divisionID;  //$('#ddlDivision option:selected').val(); //247;//$("#ddlDivision").val();//247;247;//

            if (divisionId == "" || divisionId == null || divisionId == "null") {
                divisionId = 0;
            }
            if (accountid != '' && accountid != '0') {
                var url = 'GetDataSetsByQBaseAccountIDAndDivisionID/';
                var modelobj = {
                    accountID: accountid,
                    divisionID: divisionId
                }
                $.getJSON(url, modelobj,
                              function (optionsData) {
                                  var select = $("#ddlDataSets");
                                  var select1 = $("#ddlIDTDataSets"); //FOR INTERNAL DATA TRENDS COMPANY DATASETS
                                  var select2 = $("#ddlIRCDataSet1"); //FOR INTERNAL RATES OF CHANGE FIRST DATASET
                                  var select3 = $("#ddlIRCDataSet2"); //FOR INTERNAL RATES OF CHANGE SECOND DATASET
                                  var select4 = $("#ddlDataSetsDD");  // FOR DOWNLOAD DATA TAB
                                  var select5 = $("#ddlDataSetsIndList");
                                  select.empty();
                                  select1.empty();
                                  select2.empty();
                                  select3.empty();
                                  select4.empty();
                                  select5.empty();

                                  $.each(optionsData, function (index, itemData) {
                                      select.append($('<option/>', {
                                          value: itemData.Text,
                                          text: itemData.Text
                                      }));
                                      select1.append($('<option/>', { //FOR INTERNAL DATA TRENDS COMPANY DATASETS
                                          value: itemData.Text,
                                          text: itemData.Text
                                      }));
                                      select2.append($('<option/>', { //FOR INTERNAL RATES OF CHANGE FIRST DATASET
                                          value: itemData.Text,
                                          text: itemData.Text
                                      }));
                                      select3.append($('<option/>', { //FOR INTERNAL RATES OF CHANGE SECOND DATASET
                                          value: itemData.Text,
                                          text: itemData.Text
                                      }));
                                      select4.append($('<option/>', { //FOR DOWNLOAD DATA TAB DATA SETS
                                          value: itemData.Text,
                                          text: itemData.Text
                                      }));

                                      select5.append($('<option/>', { //FOR DOWNLOAD DATA TAB DATA SETS SECOND SECTION
                                          value: itemData.Text,
                                          text: itemData.Text
                                      }));

                                  });
                                  // alert("before datasetid");
                                  dataSetID = $("#ddlDataSets").val();
                                  dataSetIDLocal = $("#ddlDataSets").val();
                                  IDTdataSetName = $("#ddlDataSets option:selected").text();
                                  $(".spnDataSetName").text($("#ddlDataSets option:selected").text());
                                  $(".spnIDTDataSetName").text($("#ddlDataSets option:selected").text());
                                  //  $(".spnIRCDataSet1Name").text($("#ddlIRCDataSet1 option:selected").text());
                                  $(".spnIRCDataSet1Name").text($("#ddlIRCDataSet1 option:selected").text() + " for " + $("#ddl1stCaluculation option:selected").text());
                                  IRCdataSetName1 = $("#ddlIRCDataSet1 option:selected").text();
                                  //  $(".spnIRCDataSet2Name").text($("#ddlIRCDataSet2 option:selected").text());
                                  $(".spnIRCDataSet2Name").text($("#ddlIRCDataSet2 option:selected").text() + " for " + $("#ddl2ndCaluculation option:selected").text());
                                  IRCdataSetName2 = $("#ddlIRCDataSet2 option:selected").text();
                                  // alert(dataSetID);
                                  if (dataSetID != "" && dataSetID != "null" && dataSetID != null) {

                                      LoadIndicatorsList();
                                      LoadIDTChartData();
                                      LoadIRCChartData();
                                      //For download data tab
                                      $('#ddlDataSetsDD option:nth(0)').attr("selected", "selected");
                                      $("#divIndicatorSection1").html('');//To clear Previos content if any
                                      LoadIndicatorsListDownloadDataForMultipleCompanyDataSetsSection1();//For download data Company Data Part Indicator list Loading
                                      $('#ddlDataSetsIndList option:nth(0)').attr("selected", "selected");
                                      $("#divIndicatorDD").html('');//To clear Previos content if any
                                      LoadIndicatorsListDownloadDataForMultipleCompanyDataSets();
                                      $('.shield-chart-button').show();
                                  }
                                  else{
                                      // alert("Else CAse");//To clear Previous content if any.
                                      // LoadIndicatorsList();
                                      // LoadIDTChartData();
                                      // LoadIRCChartData();
                                      //For download data tab
                                      $('#ddlDataSetsDD').empty();
                                      $("#divIndicatorSectsion1").html('');//To clear Previos content if any
                                      $("#divIndicatorSection1").html('');
                                      $('#ddlDataSetsIndList').empty();
                                      $("#divIndicatorDD").html('');//To clear Previos content if any
                                      $('#divIndicatorDDShortCodes').html('');
                                      $('#divIndicator').empty();
                                      $('.divIndicator').empty();
                                      $(".divIndicatorSectsion1").empty();
                                      $("#chart").html('');
                                      $("#chartIRC").html('');
                                      $("#chartIDT").html('');
                                      $('.shield-chart-button').hide();
                                      // LoadIndicatorsListDownloadDataForMultipleCompanyDataSets();
                                  }
                              });

            }
        }

        var ivar=0;

        function LoadIndicatorsList() {
            //     $.getJSON("/Home/GetIndicatorNamesAndCorrelationLeadLagValuesByDataSetID?dataSetID=" + dataSetIDLocal,
            //function (data) {
            //    var jsonObject = JSON.parse(data);
            //    var htmlIndicatorString = "";
            //    $("#divIndicator").html('');//To clean Previous content if any
            //    $(".divIndicator").html('');//To clean Previous content if any
            //    $(".spnIndicatorName").html('');// To clean Previos content if any.
            //    companyCode = ""; indicatorShotrCode = "";
            //    for (i = 0; i < jsonObject.length; i++) {
            //        var obj = jsonObject[i];

            //        if (i == 0) { //For Loading first time
            //            indicatorShotrCode = obj["Indicator"];
            //            companyCode = obj["Company"];
            //            // console.log("companyCode " + companyCode)
            //            // console.log("indicatorShotrCode " + indicatorShotrCode)
            //        }
            //        if (i == 0) {
            //            htmlIndicatorString = htmlIndicatorString + '<div class="row cursor active blocked" data-indicatorShotrCode="' + obj["Indicator"] + '"   data-companyCode="' + obj["Company"] + '">';
            //            $(".spnIndicatorName").html(obj["ASeriesName"]);
            //        }
            //        else {
            //            htmlIndicatorString = htmlIndicatorString + '<div class="row cursor" data-indicatorShotrCode="' + obj["Indicator"] + '"   data-companyCode="' + obj["Company"] + '">';
            //        }
            //        for (key in obj) {
            //            //  console.log("Key is " + key + "  value is " + obj[key]);
            //            if (key == "ASeriesName") enter
            //                htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-6" style="font-size: 11px;">	' + obj["ASeriesName"] + '</div>';
            //            }
            //            else if (key == "CorrValue") {
            //                htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-3">	' + obj["CorrValue"] + '	</div>'
            //            }
            //            else if (key == "lagValue") {
            //                htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-3">	' + obj["lagValue"] + '	</div>';
            //            }
            //        }

            //        htmlIndicatorString = htmlIndicatorString + '</div>';

            //    }
            //    $("#divIndicator").html(htmlIndicatorString);
            //    // $(".divIndicator").html(htmlIndicatorString.replace('row cursor active','row')); // To Fill the "Indicator Summary" Tab Content
            //    $(".divIndicator").html(htmlIndicatorString.replace(/row cursor/g, 'row').replace('row active', 'row')); // To Fill the "Indicator Summary" Tab Content
            //    LoadChartData();
            //});

            //$("#divIndicator").html('');//To clean Previous content if any
            //$(".divIndicator").html('');//To clean Previous content if any
            // To clean Previos content if any.
            //companyCode = ""; indicatorShotrCode = "";

            {

                var bTable="";
                //TABLE DEFINITION for Indicator list
                bTable = $('#CorelationLeadLagListIndicationSummary').dataTable({
                    "aLengthMenu": [[5, 10, 25, 50, 200], [5, 10, 25, 50, 200]],
                    "bScrollCollapse": true,
                    "sType": "POST",
                    "iDisplayLength": 10,
                    "sDom": '<l><t><ip>r',
                    "bJQueryUI": false,
                    "sPaginationType": "bootstrap",
                    "responsive": true,
                    "oLanguage": {
                        "sProcessing":ajaxindicatorstart(),
                        "sLengthMenu": "_MENU_ records per page",
                        "searchPlaceholder":"search",
                        "oPaginate": {
                            "sPrevious": "Prev",
                            "sNext": "Next"
                        }
                    },
                    // "aaSorting": [[3, 'asc']],
                    "bServerSide": true,
                    "sAjaxSource": "FillCorelationLeadLagByDataSetID",
                    "fnServerParams": function (aoData) {
                        aoData.push({ "name": "dataSetID", "value": dataSetIDLocal });
                        aoData.push({ "name": "userID", "value": $("#hdnUserID").val() });//need to update
                        aoData.push({ "name": "IsFavoritesFlag", "value": FavListFlag });
                        aoData.push({ "name": "SelFavName", "value": SelFavName });
                    },
                    "bProcessing": true,
                    "aoColumns": [

                                      {
                                          "sName": "IndicatorName-Indicator"
                                      },
                                    {
                                        "sName": "Correlation"
                                    },
                                    {
                                        "sName": "Lead/Lag"
                                    },
                                    { "sName": "Company",
                                        "sClass": "hide_column"
                                    },
                                    {
                                        "sName": "Indicator",
                                        "sClass": "hide_column"
                                    }

                    ]
                });

            }


            {
                // $(".spnIndicatorName").html('');
                var oTable ="";
                ivar = 0;
                //TABLE DEFINITION for Indicator list
                oTable = $('#CorelationLeadLagList').dataTable({
                    "aLengthMenu": [[5, 10, 25, 50, 200], [5, 10, 25, 50, 200]],
                    "bScrollCollapse": true,
                    "sType": "POST",
                    "iDisplayLength": 10,
                    "sDom": '<fl><t><ip>r',
                    "bJQueryUI": false,
                    "sPaginationType": "bootstrap",
                    "responsive": true,
                    "oLanguage": {
                        "sProcessing":ajaxindicatorstart(),
                        "sLengthMenu": "_MENU_ records per page",
                        "searchPlaceholder":"search",
                        "oPaginate": {
                            "sPrevious": "Prev",
                            "sNext": "Next"
                        }

                    },
                    // "aaSorting": [[3, 'asc']],
                    "bServerSide": true,
                    "sAjaxSource": "FillCorelationLeadLagByDataSetID",
                    "fnServerParams": function (aoData) {
                        aoData.push({ "name": "dataSetID", "value": dataSetIDLocal });
                        aoData.push({ "name": "userID", "value": $("#hdnUserID").val() });//need to update
                        aoData.push({ "name": "IsFavoritesFlag", "value": FavListFlag });
                        aoData.push({ "name": "SelFavName", "value": SelFavName });
                        aoData.push({ "name": "CategorySearch", "value": CategorySearchStatus });
                        aoData.push({ "name": "IndustryName", "value": IndustryName });
                        aoData.push({ "name": "SectorName", "value": SectorName });
                        aoData.push({ "name": "SubSector1Name", "value": SubSector1Name });
                        aoData.push({ "name": "SubSector2Name", "value": SubSector2Name });
                        aoData.push({ "name": "SubSector3Name", "value": SubSector3Name });

                    },
                    "fnDrawCallback": function (oSettings) {

                        //var loopCount=0;
                        $('#CorelationLeadLagList tbody tr:first').each(function () {
                            //if(loopCount==0)
                            //{
                            var _this = this;
                            var aData = "";
                            var nRow = _this;
                            var aData = oTable.fnGetData(nRow); //Get data of current row
                            if (aData == null) {
                                var tempDataSetID = 0;
                            }
                            else {

                                var tempDataSetID = aData[0];
                                companyCode = aData[3];
                                $(".spnIndicatorName").html(aData[0]);
                                indicatorShotrCode = aData[4];
                                //alert(indicatorShotrCode);
                                //console.log("indicatorShotrCode "+indicatorShotrCode)
                                //console.log("companyCode "+companyCode)
                                $(this).addClass("active");
                                //khaja
                                ticksRepeatCompany = 0;
                                ticksRepeatIndicator = 0;
                                CompanyMaxvalueLine = 0;
                                IndicatorMaxvalueLine = 0;
                                CompanyZeroLine = 0;
                                IndicatorZeroLine = 0;
                                CompanyZeroLineFlag = false;
                                IndicatorZeroLineFlag = false;
                                CompanyNeededLines = 0;
                                IndicatorNeededLines = 0;
                                IndicatorMinValueNew = "", IndicatorMaxValueNew = "";
                                CompanyMinValueNew = "", CompanyMaxValueNew = "";
                                k = 0;
                                i = 0;
                                j = 0;
                                //IndicatorMinValueFlag = false;

                                LoadChartData();

                                //  ajaxindicatorstop();
                            }
                            //}
                            //loopCount=loopCount+1;


                        })
                    },
                    "bProcessing": true,
                    "aoColumns": [


                                      {
                                          "sName": "IndicatorName-Indicator"
                                      },
                                    {
                                        "sName": "Correlation",
                                        "bSearch": false
                                    },
                                    {
                                        "sName": "Lead/Lag",
                                        "bSearch": false
                                    },
                                    { "sName": "Company",
                                        "sClass": "hide_column"
                                    },
                                    {
                                        "sName": "Indicator",
                                        "sClass": "hide_column"
                                    },
                                    {
                                        "sName": "Description",
                                        "bSearch": false,
                                        "sClass": "hide_column"
                                    },
                                    {
                                        "sName": "FavouriteListName",
                                        "bSearch": false,
                                        "sClass": "hide_column",
                                        "render": function (oObj) {
                                            //FavListName = oObj;
                                            return oObj;
                                        }
                                    },
                                    {
                                        "sName": "IndicatorName-Indicator",
                                        "bSearch": false,
                                        "bSortable": false,
                                        "render": function (oObj) {

                                            ivar = ivar + 1;
                                            //if(FavListFlag == false)
                                            // {
                                            if(FavList.indexOf(oObj + ",") >= 0)
                                            {
                                                return '<input type="checkbox" id='+ ivar + ' class="CBX" checked >';
                                            }
                                            else
                                                return '<input type="checkbox" id='+ ivar + ' class="CBX" > ';
                                            // }
                                            //else
                                            //   return '<input type="checkbox" id='+ ivar + ' class="CBX" checked >';
                                        }
                                    }


                    ]
                });
                //khaja

                var oTable123 ="";
                //ivar = 0;
                //TABLE DEFINITION for Indicator list
                oTable123 = $('#dtFavList').dataTable({
                    "paging":   false,
                    "ordering": false,
                    "aLengthMenu": [[5, 10, 25, 50, 200], [5, 10, 25, 50, 200]],
                    "bScrollCollapse": true,
                    "sType": "POST",
                    "iDisplayLength": 10,
                    "sDom": '<l><t><ip>r',
                    "bJQueryUI": false,
                    //  "sPaginationType": "bootstrap",
                    "responsive": true,
                    "oLanguage": {
                        "sProcessing":ajaxindicatorstart(),
                        "sLengthMenu": "_MENU_ records per page",
                        "searchPlaceholder":"search",
                        "oPaginate": {
                            "sPrevious": "Prev",
                            "sNext": "Next"
                        }

                    },
                    // "aaSorting": [[3, 'asc']],
                    "bServerSide": true,
                    "sAjaxSource": "FillFavlistNamesByDataSetID",
                    "fnServerParams": function (aoData) {
                        aoData.push({ "name": "dataSetID", "value": dataSetIDLocal });
                        aoData.push({ "name": "userID", "value": $("#hdnUserID").val() });//need to update

                    },

                    "bProcessing": true,
                    "aoColumns": [


                                      {
                                          "sName": "FavouriteListName",
                                          "bSortable":false,
                                          "render": function (oObj) {

                                              return '<a href="#" class="LoadFavIndicators" title="Click to Load Indicators" >'+  oObj + '</a>';

                                          }
                                      },

                                      {
                                          "sName": "FavouriteListName",
                                          "bSortable":false,
                                          "render": function (oObj) {
                                              return '<a href="#" data-value='+ oObj +' class="DeleteFavIndicators" title="Click to Load Indicators" >Delete</a>';

                                          }
                                      }


                    ]
                });





                //khaja
               // $('#CorelationLeadLagList_filter input').attr("placeholder", "Search");
                $("#CorelationLeadLagList_paginate").on("click", "a", function()
                {
                    $('.CBX').each(function() {
                        if($(this)[0].checked)
                        {
                            if(FavList == "")
                                FavList = $(this).closest('tr').find('td:eq(4)').text() + ",";
                            else
                            {
                                if(FavList.indexOf($(this).closest('tr').find('td:eq(4)').text() + ",") < 0)
                                {
                                    FavList = FavList + $(this).closest('tr').find('td:eq(4)').text() + "," ;
                                }
                            }


                        }
                        else
                        {
                            if(FavList.indexOf($(this).closest('tr').find('td:eq(4)').text() + ",") >= 0)
                            {
                                FavList = FavList.replace($(this).closest('tr').find('td:eq(4)').text() + ",","");
                            }
                        }

                    });
                });

            }
            //
            //oTable.fnAdjustColumnSizing();
            //oTable.fnFilter("");
            //oTable.fnDraw();

        }
        $(document).on('click', '#HideFavorites', function (e) {
            e.preventDefault();
            CategorySearchStatus="";
            FavListFlag = false;
            //SelFavName = "";
            //FavList = "";
            //FavListName = "";
            //$('#SaveFavorites').val(' Save Favorites List ');

            var oTable = $('#CorelationLeadLagList').dataTable();
            oTable.fnDraw();


        });

        







        // Section Starts for Datacast 2.3 by Raghuveer 


        // By Raghuveer on 29 August 2017 for Datacast 2.3 release
        $(document).on('click', '#SearchCategory', function (e) {
            e.preventDefault();

            if($(this).val() == " Search Category ")
            {
                var url = 'GetCategoriesForDatacast/';
                    var modelobj = { }
                    $.getJSON(url, modelobj,
                                  function (optionsData) {
                                      var select = $("#ddlCategories");
                                      select.empty();
                                      $("#ddlCategories").append($('<option>', {
                                          value: "Select",
                                          text : "Select"
                                      }));
                                      $.each(optionsData, function (index, itemData) {
                                          select.append($('<option/>', {
                                              value: itemData.Text,
                                              text: itemData.Text
                                          }));
                                          

                                      });
                                     
                                  });

                    $("#ddlCategories").show();

                    $('#SearchCategoryPopup').show();
                    
            }
            //else
            //{
            //    FavListFlag = false;
            //    SelFavName = "";
            //    $('#SaveFavorites').val(' Save Favorites List ');
            //    $(this).val(' Show Favorites List ');
            //    var oTable = $('#CorelationLeadLagList').dataTable();
            //    oTable.fnDraw();
            //}

        });

        // By Raghuveer on 29 August 2017 for Datacast 2.3 release
        $(document).on('click', '#btnCancelSearchCategoryPopup', function (e) {
            e.preventDefault();

            $("#ddlCategories").empty();
            $("#ddlSubCategories").empty();
            $("#ddlSubSectors1").empty();
            $("#ddlSubSectors2").empty();
            $("#ddlSubSectors3").empty();


            $("#ddlCategories").hide();
            

            $("#subcategoryrow").hide();  
            $("#subsector1row").hide(); 
            $("#subsector2row").hide(); 
            $("#subsector3row").hide(); 

            $('#SearchCategoryPopup').hide();
        });

        // By Raghuveer on 29 August 2017 for Datacast 2.3 release
        $("#ddlCategories").change(function(){

            if($(this).val()!='Trends Report')
            {

                $("#ddlSubCategories").empty();
                $("#ddlSubSectors1").empty();
                $("#ddlSubSectors2").empty();
                $("#ddlSubSectors3").empty();

                $("#subcategoryrow").hide();  
                $("#subsector1row").hide(); 
                $("#subsector2row").hide(); 
                $("#subsector3row").hide(); 


                var url = 'GetSubCategoriesbyCategory/';
                var modelobj = { 
                    Industry : $(this).val()
                }
                $.getJSON(url, modelobj,
                              function (optionsData) {
                                  var select = $("#ddlSubCategories");
                                  select.empty();
                                  select.append($('<option/>',{value: "Select",
                                      text : "Select"
                                  }));
                                  $.each(optionsData, function (index, itemData) {
                                      select.append($('<option/>', {
                                          value: itemData.Text,
                                          text: itemData.Text
                                      }));
                                  });

                           
                                  if(optionsData.length>0 )
                                  {
                                      $("#subcategoryrow").show();  
                                
                                  }
                              });
            }
            else
            {
                $("#ddlSubCategories").empty();
                $("#ddlSubSectors1").empty();
                $("#ddlSubSectors2").empty();
                $("#ddlSubSectors3").empty();

                $("#subcategoryrow").hide();  
                $("#subsector1row").hide(); 
                $("#subsector2row").hide(); 
                $("#subsector3row").hide(); 
            }
        });

        // By Raghuveer on 29 August 2017 for Datacast 2.3 release
        $("#ddlSubCategories").change(function(){
        
            $("#ddlSubSectors1").empty();
            $("#ddlSubSectors2").empty();
            $("#ddlSubSectors3").empty();

            $("#subsector1row").hide(); 
            $("#subsector2row").hide(); 
            $("#subsector3row").hide(); 

            var url = 'GetSubSectors1BySector/';
            var modelobj = { 
                Industry : $("#ddlCategories").val(),
                Sector : $(this).val(),
            }
            $.getJSON(url, modelobj,
                          function (optionsData) {
                              var select = $("#ddlSubSectors1");
                              select.empty();
                              select.append($('<option/>',{value: "Select",
                                  text : "Select"
                              }));
                              $.each(optionsData, function (index, itemData) {
                                  select.append($('<option/>', {
                                      value: itemData.Text,
                                      text: itemData.Text
                                  }));
                                          

                              });
                              if(optionsData.length>0 )
                                  $("#subsector1row").show();     
                          });
          
           
        });

        // By Raghuveer on 29 August 2017 for Datacast 2.3 release
        $("#ddlSubSectors1").change(function(){
           
            $("#ddlSubSectors2").empty();
            $("#ddlSubSectors3").empty();
           
            $("#subsector2row").hide(); 
            $("#subsector3row").hide(); 

            var url = 'GetSubSectors2BySubSectors1/';
            var modelobj = { 
                Industry : $("#ddlCategories").val(),
                Sector : $("#ddlSubCategories").val(),
                SubSector1 : $(this).val()
            }
            $.getJSON(url, modelobj,
                          function (optionsData) {
                              var select = $("#ddlSubSectors2");
                              select.empty();
                              select.append($('<option/>',{value: "Select",
                                  text : "Select"
                              }));
                              $.each(optionsData, function (index, itemData) {
                                  select.append($('<option/>', {
                                      value: itemData.Text,
                                      text: itemData.Text
                                  }));
                                          

                              });
                              if(optionsData.length>0 )
                                  $("#subsector2row").show();     
                          });
           
           
        });

        // By Raghuveer on 29 August 2017 for Datacast 2.3 release
        $("#ddlSubSectors2").change(function(){
            
            $("#ddlSubSectors3").empty();
            $("#subsector3row").hide(); 

            var url = 'GetSubSectors3BySubSectors2/';
            var modelobj = { 
                Industry : $("#ddlCategories").val(),
                Sector : $("#ddlSubCategories").val(),
                SubSector1 : $("#ddlSubSectors1").val(),
                SubSector2 : $(this).val()
            }
            $.getJSON(url, modelobj,
                          function (optionsData) {
                              var select = $("#ddlSubSectors3");
                              select.empty();
                              select.append($('<option/>',{value: "Select",
                                  text : "Select"
                              }));
                              $.each(optionsData, function (index, itemData) {
                                  select.append($('<option/>', {
                                      value: itemData.Text,
                                      text: itemData.Text
                                  }));
                                          

                              });
                              if(optionsData.length>0 )
                                  $("#subsector3row").show();    
                          });
             

           
        });

        $(document).on('click', '#closecategorypopup', function (e) {
            e.preventDefault();
            $("#ddlCategories").empty();
            $("#ddlSubCategories").empty();
            $("#ddlSubSectors1").empty();
            $("#ddlSubSectors2").empty();
            $("#ddlSubSectors3").empty();


            $("#ddlCategories").hide();
            

            $("#subcategoryrow").hide();  
            $("#subsector1row").hide(); 
            $("#subsector2row").hide(); 
            $("#subsector3row").hide(); 

            $('#SearchCategoryPopup').hide();
        });




        $("#btnSearchCategorySubCategory").click(function()
        {
            CategorySearchStatus = "CategorySearch";
            IndustryName = $("#ddlCategories").val();
            SectorName = $("#ddlSubCategories").val();
            SubSector1Name = $("#ddlSubSectors1").val();
            SubSector2Name = $("#ddlSubSectors2").val();
            SubSector3Name = $("#ddlSubSectors3").val();
            FavListFlag = true;
            var oTable = $('#CorelationLeadLagList').dataTable();
            oTable.fnDraw();
            $("#btnCancelSearchCategoryPopup").click();

        });
        // Section Ends for Datacast 2.3 By Raghuveer






        $(document).on('click', '#ShowFavorites', function (e) {
            e.preventDefault();
            CategorySearchStatus = "";
            if($(this).val() == " Show Favorites List ")
            {
                var oTablec = $('#dtFavList').dataTable();
                oTablec.fnDraw();
                $('#FavListModalPopUp').show();
            }
            //else
            //{
            //    FavListFlag = false;
            //    SelFavName = "";
            //    $('#SaveFavorites').val(' Save Favorites List ');
            //    $(this).val(' Show Favorites List ');
            //    var oTable = $('#CorelationLeadLagList').dataTable();
            //    oTable.fnDraw();
            //}

        });
       

        $(document).on('click', '#btnCancelFavPopUP', function (e) {
            e.preventDefault();
            $('#FavListModalPopUp').hide();
        });
        $(document).on('click', '#close', function (e) {
            e.preventDefault();
            $('#FavListModalPopUp').hide();
        });
        $(document).on('click', '#closeFirstPopup', function (e) {
            e.preventDefault();
            $('#FirstViewPopup').hide();
        });
        $(document).keydown(function(e) {
            // ESCAPE key pressed
            if (e.keyCode == 27) {
                $('#FavListModalPopUp').hide();
                $('#FirstViewPopup').hide();
            }
        });
        //Show Favorites
        $(document).on('click','.LoadFavIndicators',function(e){
            var FuncnText="";
            FuncnText = $('#ShowFavorites').val();
            FavList = "";
            FavListpaginate = "";
            SelFavName = "";


            oTable = $("#dtFavList").dataTable();
            var aData = oTable.fnGetData($(this).closest('tr'));
            SelFavName = aData[0];
            FavListName = SelFavName;
            $("#spnFavListName").html('Favorite Name: <b>' + FavListName + '</b>');
            if(FuncnText == " Show Favorites List ")
            {

                $('#SaveFavorites').val(' Update Favorites List ');
                //$('#ShowFavorites').val(' Hide Favorites List ');
                FavListFlag = true;
                ////

                $.getJSON("GetAllFavoritesListByDataSetIDUesrID?dataSetID=" + $("#ddlDataSets").val() + "&userID=" + $("#hdnUserID").val() + "&SelFavName=" + SelFavName,//need to update userid
      function (data) {
          var jsonObject = JSON.parse(data);
          ajaxindicatorstart();

          for (i = 0; i < jsonObject.length; i++) {
              var obj = jsonObject[i];

              //console.log(obj["IndicatorShortCode"]);
              if(FavList == "")
                  FavList = obj["IndicatorShortCode"]+ ",";
              else
              {
                  if(FavList.indexOf(obj["IndicatorShortCode"] + ",") < 0)
                  {
                      FavList = FavList + obj["IndicatorShortCode"] + "," ;
                  }
              }



          }
          var oTable = $('#CorelationLeadLagList').dataTable();
          oTable.fnDraw();
          ajaxindicatorstop();

      });







            }
            //else
            //{
            //    FavListFlag = false;
            //    $('#SaveFavorites').val(' Save Favorites List ');
            //    $('#ShowFavorites').val(' Show Favorites List ');
            //    var oTable = $('#CorelationLeadLagList').dataTable();
            //    oTable.fnDraw();
            //}



            $('#FavListModalPopUp').hide();
        });



        $(document).on('click','.DeleteFavIndicators',function(e){
            ajaxindicatorstart();
            oTable = $("#dtFavList").dataTable();
            var aData = oTable.fnGetData($(this).closest('tr'));
            tempFname = aData[0];
            //	alert(tempFname)
            var urldelete = "Deletefavourites";
            var modelobjlocal = {
                CompanyShortCode: $("#ddlDataSets").val(),
                UserID : $("#hdnUserID").val(),
                FavouriteListName: tempFname
            };

            var txt;
            if (confirm("Are you sure?") == true) {
                var response = SendRequestJSON(urldelete, modelobjlocal);

                if (response.result == '1')
                {
                    if(tempFname == FavListName)
                    {

                        FavListFlag = false;
                        SelFavName = "";
                        FavList = "";
                        $("#spnFavListName").text('');

                    }
                    alert("Favorites list deleted successfully.");

                    var oTable1 = $('#CorelationLeadLagList').dataTable();
                    oTable1.fnDraw();
                    var oTable = $('#dtFavList').dataTable();
                    oTable.fnDraw();

                    if(tempFname == FavListName)
                    {

                        $('#SaveFavorites').val(' Save Favorites List ');
                        FavListName = "";
                    }
                    $('#FavListModalPopUp').hide();
                }
                else
                {
                    alert("Unable to Delete Favorite List.");
                }
            } else {

            }


            ajaxindicatorstop();

        });

        //Save Favorites
        $(document).on('click', '#SaveFavorites', function (e) {
            e.preventDefault();

            $('.CBX').each(function() {
                if($(this)[0].checked)
                {
                    if(FavList == "")
                        FavList = $(this).closest('tr').find('td:eq(4)').text() + ",";
                    else
                    {
                        if(FavList.indexOf($(this).closest('tr').find('td:eq(4)').text() + ",") < 0)
                        {
                            FavList = FavList + $(this).closest('tr').find('td:eq(4)').text() + "," ;
                        }
                    }
                }
            });

            //alert(FavList);
            var table = $('#CorelationLeadLagList').DataTable();
            table.search( '' ).columns().search( '' ).draw();

            if(FavList != "")
            {
                var FavoritesListName = SetFavoritesListName();
                if (FavoritesListName != null && FavoritesListName != "") {

                    if($(this).val() == " Save Favorites List ")
                    {
                        var url = "AddFavorites";
                    }
                    else
                    {
                        var url = "UpdateFavorites";
                    }
                    var d = new Date();
                    var strDate = d.getFullYear() + "/" + (d.getMonth()+1) + "/" + d.getDate();

                    var modelobj = {
                        CompanyShortCode: $("#ddlDataSets").val(),
                        IndicatorShortCodes: FavList,
                        UserID: $("#hdnUserID").val(),//need to update
                        FavouriteListName: FavoritesListName,
                        CreatedBY : $("#hdnUserID").val(),//need to update
                        CreatedDate:strDate
                    };
                    var response = SendRequestJSON(url, modelobj);

                    if (response.result == 'Success')
                    {
                        if($(this).val() == " Save Favorites List ")
                        {
                            alert("Favorites added successfully.");

                        }
                        else
                        {
                            alert("Favorites updated successfully.");
                            var oTable = $('#CorelationLeadLagList').dataTable();
                            oTable.fnDraw();
                            FavListName = FavoritesListName;
                        }

                    }
                }
                //else
                //{
                //    SetFavoritesListName();
                //}
            }
            else
            {
                alert("Please select atleast one Indicator.");
                return false;
            }
        });
        //ClearFavorites
        $(document).on('click', '#ClearFavorites', function (e) {
            e.preventDefault();

            $('.CBX').each(function() {
                if($(this)[0].checked)
                {
                    $(this)[0].checked = false;
                }
            });
            FavListFlag = false;
            SelFavName = "";
            FavList = "";
            FavListName = "";
            $('#SaveFavorites').val(' Save Favorites List ');
            $("#spnFavListName").text('');
            var oTable = $('#CorelationLeadLagList').dataTable();
            oTable.fnDraw();

        });
        function SetFavoritesListName()
        {
            var FavoritesListName  = "";
            //  if(FavListFlag == true){
            FavoritesListName = prompt("Enter Favorites List Name", FavListName);
            //}
            //else
            //    FavoritesListName = prompt("Enter Favorites List Name", '');

            if (FavoritesListName != null && FavoritesListName != "") {
                return FavoritesListName;
            }
        }
        function SendRequestJSON (url, modelobj) {
            var response;
            $.ajax({
                type: "POST",
                async: false,
                url: url,
                dataType: "json",
                data: modelobj, // like for UserRole-Model {RoleName:obj.RoleName,RoleDescription:obj.RoleDescription},
                success: function (res) {
                    response = res;
                },
                error: function () {
                    //  throw new Error
                    $('#loadingDiv .bg').height('100%');
                    $('#loadingDiv').remove();
                    $('body').css('cursor', 'default');
                    //throw new Error
                }
            });
            return response;
        }
        // for tooltip
        $(document).on('mouseover','#CorelationLeadLagList tbody tr',function(e){
            var ToolTipText = $(this).closest('tr').find('td:eq(5)').text();
            $(this).attr("title",ToolTipText);
        });

        $(document).on('click','#CorelationLeadLagList tbody tr',function(e){
            //ajaxindicatorstart();
            oTable = $("#CorelationLeadLagList").dataTable();
            var aData = oTable.fnGetData(this);
            $('.active').each(function(i, aData) {

                $(this).removeClass("active")

            });
            companyCode = aData[3];
            $(".spnIndicatorName").html(aData[0]);
            indicatorShotrCode = aData[4];
            $(this).addClass("active");
            //khaja
            ticksRepeatCompany = 0;
            ticksRepeatIndicator = 0;
            CompanyMaxvalueLine = 0;
            IndicatorMaxvalueLine = 0;
            CompanyIndicatorMaxLineDifference = 0;
            CompanyZeroLine = 0;
            IndicatorZeroLine = 0;
            CompanyZeroLineFlag = false;
            IndicatorZeroLineFlag = false;
            CompanyNeededLines = 0;
            IndicatorNeededLines = 0;
            ZeroLinesAlign = false;
            IndicatorMinValueNew = "", IndicatorMaxValueNew = "";
            CompanyMinValueNew = "", CompanyMaxValueNew = "";
            k = 0;
            i = 0;

            j = 0;

            $(this).addClass("active");

            //IndicatorMinValueFlag = false;
            if($(this).find("input[type=checkbox]")[0].checked == false){
                if(FavList.indexOf(aData[4] + ",") >= 0)
                {
                    FavList = FavList.replace(aData[4] + ",","");
                }
            }

            LoadChartData();
            //ajaxindicatorstop();

        });

        $(document).on('click','#CorelationLeadLagListDownload tbody tr',function(e){
            //ajaxindicatorstart();
            cTable = $("#CorelationLeadLagListDownload").dataTable();
            var aData = cTable.fnGetData(this);
            $('.activ').each(function(i, aData) {
                $(this).removeClass("activ")
            });
            companyCodeDD = aData[3];
            LocalIndicatorShortCode = aData[4];
            LoadIndicatorDataForDownloadSection3();
            $(this).addClass("activ");
            //ajaxindicatorstop();

        });

        function LoadIndicatorsListDownloadData() {

            //     $.getJSON("/Home/GetIndicatorNamesAndCorrelationLeadLagValuesByDataSetID?dataSetID=" + dataSetIDLocal,
            //function (data) {
            //    var jsonObject = JSON.parse(data);
            //    var htmlIndicatorString = "";
            //    $("#divIndicatorDD").html('');//To clean Previous content if any
            //    //  $(".divIndicatorDD").html('');//To clean Previous content if any
            //    companyCode = ""; indicatorShotrCode = "";
            //    for (i = 0; i < jsonObject.length; i++) {
            //        var obj = jsonObject[i];

            //        if (i == 0) { //For Loading first time
            //            // indicatorShotrCode = obj["Indicator"];
            //            // companyCode = obj["Company"];
            //            // console.log("companyCode " + companyCode)
            //            // console.log("indicatorShotrCode " + indicatorShotrCode)
            //        }

            //        if (i == 0) {
            //            htmlIndicatorString = htmlIndicatorString + '<div class="row cursorDD active" data-indicatorShotrCode="' + obj["Indicator"] + '"   data-companyCode="' + obj["Company"] + '">';
            //            $(".spnIndicatorName").html(obj["ASeriesName"]);
            //        }
            //        else {
            //            htmlIndicatorString = htmlIndicatorString + '<div class="row cursorDD" data-indicatorShotrCode="' + obj["Indicator"] + '"   data-companyCode="' + obj["Company"] + '">';
            //        }
            //        for (key in obj) {
            //            //  console.log("Key is " + key + "  value is " + obj[key]);
            //            if (key == "ASeriesName") {
            //                htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-6" style="font-size: 11px;">	' + obj["ASeriesName"] + '</div>';
            //            }
            //            else if (key == "CorrValue") {
            //                htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-3">	' + obj["CorrValue"] + '	</div>'
            //            }
            //            else if (key == "lagValue") {
            //                htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-3">	' + obj["lagValue"] + '	</div>';
            //            }
            //        }

            //        htmlIndicatorString = htmlIndicatorString + '</div>';

            //    }
            //    $("#divIndicatorDD").html(htmlIndicatorString);
            //    //$(".cursorDD").trigger("click");
            //    $("#divIndicatorDD").find(".cursorDD Active").trigger("click");

            //    //   LoadDDChart();
            //});

        }

        function LoadIndicatorsListDownloadDataForMultipleCompanyDataSetsSection1() {
            $("#divIndicatorSection1").html('');// To Clear previous values if any
            $.getJSON("GetCompanyDatasetsInfoForDownloadSection1?dataSetIDs=" + $("#ddlDataSetsDD").val(),
       function (data) {
           var jsonObject = JSON.parse(data);
           var htmlIndicatorString = "";
           $("#divIndicatorDD").html('');//To clean Previous content if any
           //  $(".divIndicatorDD").html('');//To clean Previous content if any
           companyCode = ""; indicatorShotrCode = "";
           for (i = 0; i < jsonObject.length; i++) {
               var obj = jsonObject[i];

               if (i == 0) { //For Loading first time
                   indicatorShotrCode = obj["Indicator"];
                   companyCode = obj["Company"];
                   // console.log("companyCode " + companyCode)
                   // console.log("indicatorShotrCode " + indicatorShotrCode)
               }
               if (i == 0) {
                   htmlIndicatorString = htmlIndicatorString + '<div class="rowstyle dataRow1Cnt" data-indicatorShotrCode="' + obj["Indicator"] + '"   data-companyCode="' + obj["Company"] + '">';
                   $(".spnIndicatorName").html(obj["ASeriesName"]);
               }
               else {
                   htmlIndicatorString = htmlIndicatorString + '<div class="rowstyle dataRow1Cnt" data-indicatorShotrCode="' + obj["Indicator"] + '"   data-companyCode="' + obj["Company"] + '">';
               }
               for (key in obj) {

                   //  console.log("Key is " + key + "  value is " + obj[key]);
                   if (key == "MonthYear") {
                       var dateValue = new Date(parseInt(obj["MonthYear"].substr(6)));
                       // dateValue= parseInt(dateValue.getMonth() + 1) + "/" + parseInt(dateValue.getDate()) + "/" + dateValue.getFullYear()
                       var monthName = GetMonthName(dateValue.getMonth() + 1);
                       var date = monthName + '  ' + dateValue.getFullYear()

                       htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-1 dataRow2 dataRowMore">	' + date + '</div>';
                   }
                   else if (key == "C1By12") {
                       htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-1 dataRow2">	' + obj["C1By12"] + '	</div>';
                   }
                   else if (key == "C3MMA") {
                       htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-1 dataRow2 dataRowMore">	' + obj["C3MMA"] + '	</div>';
                   }
                   else if (key == "C3MMT") {
                       htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-1 dataRow2">	' + obj["C3MMT"] + '	</div>';
                   }
                   else if (key == "C3BY12") {
                       htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-1 dataRow2">	' + obj["C3BY12"] + '	</div>';
                   }
                   else if (key == "C12MMT") {
                       htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-1 dataRow2">	' + obj["C12MMT"] + '	</div>';
                   }
                   else if (key == "C12MMA") {
                       htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-2 dataRow2 dataRowMore">	' + obj["C12MMA"] + '	</div>';
                   }
                   else if (key == "C12BY12") {
                       htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-1 dataRow2">	' + obj["C12BY12"] + '	</div>';
                   }
               }

               htmlIndicatorString = htmlIndicatorString + '</div>';

           }
           $("#divIndicatorSection1").html(htmlIndicatorString);

       });

        }
        // New Function for Download Data

        function LoadIndicatorsListDownloadDataForMultipleCompanyDataSets() {
            // alert("entered Load");





            //     $.getJSON("/Home/FillIndicatorNamesAndCorrelationLeadLagValuesByMultipleDataSetID?dataSetIDs=" + $("#ddlDataSetsIndList").val(),
            //function (data) {
            //    var jsonObject = JSON.parse(data);
            //    var htmlIndicatorString = "";
            //    $("#divIndicatorDD").html('');//To clean Previous content if any
            //    //  $(".divIndicatorDD").html('');//To clean Previous content if any
            //    companyCode = ""; indicatorShotrCode = "";
            //    for (i = 0; i < jsonObject.length; i++) {
            //        var obj = jsonObject[i];

            //        if (i == 0) { //For Loading first time
            //            indicatorShotrCodeDD = obj["Indicator"];
            //            companyCodeDD = obj["Company"];
            //            // console.log("companyCode " + companyCode)
            //            // console.log("indicatorShotrCode " + indicatorShotrCode)
            //        }

            //        if (i == 0) {
            //            htmlIndicatorString = htmlIndicatorString + '<div class="row cursorDD active" data-indicatorShotrCode="' + obj["Indicator"] + '"   data-companyCode="' + obj["Company"] + '">';
            //            $(".spnIndicatorName").html(obj["ASeriesName"]);
            //          LoadIndicatorDataForDownloadSection3();
            //        }
            //        else {
            //            htmlIndicatorString = htmlIndicatorString + '<div class="row cursorDD" data-indicatorShotrCode="' + obj["Indicator"] + '"   data-companyCode="' + obj["Company"] + '">';
            //        }
            //        for (key in obj) {
            //            //  console.log("Key is " + key + "  value is " + obj[key]);
            //            if (key == "ASeriesName") {
            //                htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-6" style="font-size: 11px;">	' + obj["ASeriesName"] + '</div>';
            //            }
            //            else if (key == "CorrValue") {
            //                htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-3">	' + obj["CorrValue"] + '	</div>'
            //            }
            //            else if (key == "lagValue") {
            //                htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-3">	' + obj["lagValue"] + '	</div>';
            //            }
            //        }

            //        htmlIndicatorString = htmlIndicatorString + '</div>';

            //    }
            //    $("#divIndicatorDD").html(htmlIndicatorString);
            //    $("#divIndicatorDD").find(".cursorDD active").trigger("click");
            //    //   LoadDDChart();
            //});
            {
                multipleids = $("#ddlDataSetsIndList").val();
                // alert(multipleids);
                // var cTable="";
                //TABLE DEFINITION for Indicator list
                cTable = $('#CorelationLeadLagListDownload').dataTable({
                    "aLengthMenu": [[5, 10, 25, 50, 200], [5, 10, 25, 50, 200]],
                    "bScrollCollapse": true,
                    "sType": "POST",
                    "iDisplayLength": 10,
                    "sDom": '<t><ip>r',
                    "bJQueryUI": false,
                    "sPaginationType": "bootstrap",
                    "oLanguage": {
                        "sProcessing":ajaxindicatorstart(),
                        "sLengthMenu": "_MENU_ records per page",
                        "oPaginate": {
                            "sPrevious": "Prev",
                            "sNext": "Next"
                        }
                    },
                    // "aaSorting": [[3, 'asc']],
                    "bServerSide": true,
                    "sAjaxSource": "FillIndicatorNamesAndCorrelationLeadLagValuesByMultipleDataSetID",
                    "fnServerParams": function (aoData) {
                        aoData.push({ "name": "dataSetIDs", "value":String(multipleids)});
                    },
                    "fnDrawCallback": function (oSettings) {
                        //var loopCount=0;
                        $('#CorelationLeadLagListDownload tbody tr:first').each(function () {
                            //if(loopCount==0)
                            //{
                            var _this = this;
                            var aData = "";
                            var nRow = _this;
                            var aData = cTable.fnGetData(nRow); //Get data of current row
                            if (aData == null) {
                                var tempDataSetID = 0;
                            }
                            else {

                                var tempDataSetID = aData[0];
                                companyCodeDD = aData[3];
                                //$(".spnIndicatorName").html(aData[0]);
                                LocalIndicatorShortCode = aData[4];
                                // alert(indicatorShotrCodeDD);
                                LoadIndicatorDataForDownloadSection3();
                                $(this).addClass("activ");


                                //  ajaxindicatorstop();
                            }
                            //}
                            //loopCount=loopCount+1;

                        })
                    },
                    "bProcessing": true,
                    "aoColumns": [

                                      {
                                          "sName": "IndicatorName-Indicator",
                                          "bSortable": false,
                                      },
                                    {
                                        "sName": "Correlation",
                                        "bSortable": false,
                                    },
                                    {
                                        "sName": "Lead/Lag",
                                        "bSortable": false,
                                    },
                                    { "sName": "Company",
                                        "sClass": "hide_column"
                                    },
                                    {
                                        "sName": "Indicator",
                                        "sClass": "hide_column"
                                    }

                    ]
                });
                // $("#divIndicatorDD").find(".cursorDD active").trigger("click");
            }

        }

        function LoadChartData() {
            var duration =0;
            var accessduration =0;
            $('#CorelationLeadLagList tbody tr.active').each(function () {
                var oTable = $('#CorelationLeadLagList').dataTable();
                var _this = this;
                var aData = "";
                var nRow = _this;
                var aData = oTable.fnGetData(nRow);
                companyCode = aData[3];
                indicatorShotrCode = aData[4];
            });

            indicatorShotrCode = encodeURIComponent(indicatorShotrCode);
            companyCode = encodeURIComponent(companyCode);

            $.getJSON("GetIndicatorCompanyAndIndicatorDataByShortCodes?CompanyShortCode=" + companyCode + "&IndicatorShortCode=" + indicatorShotrCode + "&InverseOrder=" + isInvertedVal + "&MoveMonths=" + moveMonths + "&CustomerCompanyID=" + _CompanyId,
            function (data) {
                combinationObject = JSON.parse(data);
                IDTcombinationObject = combinationObject;//For InternalDataTrends chart
                var IndicatorMINFlag = false, IndicatorMAXFlag = false, CompanyMINFlag = false, CompanyMAXFlag = false;
                for (i = 0; i < combinationObject.length; i++) {
                    var obj = combinationObject[i];
                    for (key in obj) {
                        // console.log("Key is " + key + "  value is " + obj[key]);
                        var value1 = obj[key];
                        if(key=="Duration")
                        {
                            duration=value1;
                        }
                        if(key=="AccessDuration")
                        {
                            accessduration = value1;
                        }
                        if (key == "MinValue" && obj["Code"] == "Indicator" && IndicatorMINFlag == false) {
                            IndicatorMinValue = value1;
                            IndicatorMINFlag = true;
                        }
                        else if (key == "MaxValue" && obj["Code"] == "Indicator" && IndicatorMAXFlag == false) {
                            IndicatorMaxValue = value1;
                            IndicatorMAXFlag = true;
                        }
                        else if (key == "MinValue" && obj["Code"] == "Company" && CompanyMINFlag == false) {
                            CompanyMinValue = value1;
                            CompanyMINFlag = true;
                        }
                        else if (key == "MaxValue" && obj["Code"] == "Company" && CompanyMAXFlag == false) {
                            CompanyMaxValue = value1;
                            CompanyMAXFlag = true;
                        }


                        if (IndicatorMINFlag == true && IndicatorMAXFlag == true && CompanyMINFlag == true && CompanyMAXFlag == true) {
                            //console.log("IndicatorMinValue " + IndicatorMinValue)
                            //console.log("IndicatorMaxValue " + IndicatorMaxValue)
                            //console.log("CompanyMinValue " + CompanyMinValue)
                            //console.log("CompanyMaxValue " + CompanyMaxValue)
                            i = combinationObject.length;
                            break;
                        }
                    }

                }
                if (combinationObject != undefined && combinationObject != "")
                {
                  
                    if(duration>60)
                     {
                        if(accessduration<24 && accessduration!=0)
                        {
                            LoadChart(); 
                        }
                        else
                        {
                            document.getElementById("displayMessage").innerHTML =   'Dear DataCast User, <br/> Your Dataset is over 60 days old. We recommend visiting your data upload page to re run the analysis.';
                            
                            $('#displayMessage').append('<br/> <br/>');//Prepending Close button to popup
                            $('#displayMessage').append('<label style="width:350px"></label> <input type="button" style="width:50px" value="OK"  class="displaypopupOK" />');
                            $('#displayMessage').prepend('<span class="button b-close" id="buttonclose"><span>X</span></span>');//Prepending Close button to popup
                        
                            $('#displayMessage').bPopup({
                                //  autoClose: 4000,
                                onClose: function () { 
                                    LoadChart(); 
                                }
                            });
                            $(".displaypopupOK").click(function() {  
                                
                                var localurl="InsertPopupAccessDate"
                                var modelobjlocal = {
                                    CompanyShortCode:companyCode ,
                                    UserID: _CompanyId
                                };
                                var response = SendRequestJSON(localurl, modelobjlocal);

                                $( "#buttonclose" ).trigger( "click" );                           
                            });
                        }
                    }
                    else
                    {
                        LoadChart(); 
                    }
            }
                // LoadDDChart();
            }).error(function (jqXHR, textStatus, errorThrown) {
                //  // console.log("incoming Text " + jqXHR.responseText);
                ajaxindicatorstop();// Remove the loader
                document.getElementById("displayMessage").innerHTML = 'There is something wrong with the Combination you selected, please try a different combination';
                $('#displayMessage').prepend('<span class="button b-close"><span>X</span></span>');//Prepending Close button to popup
                $('#displayMessage').bPopup({
                    autoClose: 2000
                    // , onClose: function () { window.history.back(); }
                });
                //$('#chart').height(500);
            });

        }
        


        function LoadIDTChartData() {

            $.getJSON("GetCompanyDataForTrends?CompanyShortCode=" + IDTdataSetName + "&CaluclationType=" + caluculationTypeVal,
            function (data) {
                IDTcombinationObject = JSON.parse(data);
                //IDTcombinationObject = combinationObject;//For InternalDataTrends chart
                var MM12MINFlag = false, MM12MAXFlag = false, MM3MINFlag = false, MM3MAXFlag = false;
                for (i = 0; i < IDTcombinationObject.length; i++) {
                    var obj = IDTcombinationObject[i];
                    for (key in obj) {
                        // console.log("Key is " + key + "  value is " + obj[key]);
                        var value1 = obj[key];
                        if (key == "Min12MM" && MM12MINFlag == false) {
                            MM12MinValue = value1;
                            MM12MINFlag = true;
                        }
                        else if (key == "Max12MM" && MM12MAXFlag == false) {
                            MM12MaxValue = value1;
                            MM12MAXFlag = true;
                        }
                        else if (key == "Min3MM" && MM3MINFlag == false) {
                            MM3MinValue = value1;
                            MM3MINFlag = true;
                        }
                        else if (key == "Max3MM" && MM3MAXFlag == false) {
                            MM3MaxValue = value1;
                            MM3MAXFlag = true;
                        }

                        if (MM12MINFlag == true && MM12MAXFlag == true && MM3MINFlag == true && MM3MAXFlag == true) {
                            //console.log("MM12MinValue " + MM12MinValue)
                            //console.log("MM12MaxValue " + MM12MaxValue)
                            //console.log("MM3MinValue " + MM3MinValue)
                            //console.log("MM3MaxValue " + MM3MaxValue)
                            i = IDTcombinationObject.length;
                            break;
                        }
                    }

                }
                if (IDTcombinationObject != undefined && IDTcombinationObject != "")
                {
                    /*Added by Vishnuvardhan Reddy Ammana ,On 20-March-2017
                    Rich specifically mentioned that the 3MMT should be 1/4 that of the 12MMT.
                    But for MMA, the 3MMA should be on the same scale as the 12MMA, if that is possible
                    So we are setting the Second Axis scale proportions dynamically based on Radio butoon selection like for MMT / MMA
                 Here:  caluculationTypeVal =0 -->Monthly Moving Total and this is the default value on page load(so MM12 scale will be 4 times of MM3Scale)
                        caluculationTypeVal = 1 -->Monthly Moving Average (so MM12 scale will be equal to MM3Scale)
                    */

                    if(caluculationTypeVal ==0){
                        MM12Scale=((Math.abs(MM3MinValue) + MM3MaxValue) * 4 / 8);
                    }
                    else if(caluculationTypeVal ==1){
                        MM12Scale=((Math.abs(MM3MinValue) + MM3MaxValue) / 8);
                    }
                    LoadIDTChart();
                }
            }).error(function (jqXHR, textStatus, errorThrown) {
                //  // console.log("incoming Text " + jqXHR.responseText);
                ajaxindicatorstop();// Remove the loader
                document.getElementById("displayMessage").innerHTML = 'There is something wrong with the Combination you selected, please try a different combination';
                $('#displayMessage').prepend('<span class="button b-close"><span>X</span></span>');//Prepending Close button to popup
                $('#displayMessage').bPopup({
                    autoClose: 2000
                    // , onClose: function () { window.history.back(); }
                });
                //$('#chart').height(500);
            });

        }

        var FirstMinCompany= 0,FirstMaxCompany= 0,SecondMinCompany= 0,SecondMinCompany = 0;
        //Created By Vishnu, Will loads the Internal rates of change data.
        function LoadIRCChartData() {
            $.getJSON("GetCompaniesDataForInternalRatesOfChange?FirstCompanyDatasetName=" + IRCdataSetName1 + "&FirstDatasetCaluclationType=" + IRCTooltip1Text + "&SecondCompanyDatasetName=" + IRCdataSetName2 + "&SecondDatasetCaluclationType=" + IRCTooltip2Text,
                        function (data) {
                            IRCcombinationObject1 = JSON.parse(data);

                            var FirstMinFlag = false, FirstMaxFlag = false, SecondMinFlag = false, SecondMaxFlag = false;
                            for (i = 0; i < IRCcombinationObject1.length; i++) {
                                var obj = IRCcombinationObject1[i];
                                for (key in obj) {
                                    // console.log("Key is " + key + "  value is " + obj[key]);
                                    var value1 = obj[key];

                                    if (key == "FirstMinCompany") {
                                        FirstMinCompany= value1 ;
                                        FirstMinFlag=true;
                                    }
                                    else if (key == "FirstMaxCompany") {
                                        FirstMaxCompany= value1;
                                        FirstMaxFlag = true;
                                    }
                                    else if (key == "SecondMinCompany") {
                                        SecondMinCompany= value1;
                                        SecondMinFlag = true;
                                    }
                                    else if (key == "SecondMaxCompany") {
                                        SecondMaxCompany = value1;
                                        SecondMaxFlag= true;
                                    }

                                    if (FirstMinFlag == true && FirstMaxFlag == true && SecondMinFlag == true && SecondMaxFlag == true ) {

                                        break;
                                    }
                                }

                            }

                            if (IRCcombinationObject1 != undefined && IRCcombinationObject1 != "")
                                LoadIRCChart();
                        }).error(function (jqXHR, textStatus, errorThrown) {
                            //  // console.log("incoming Text " + jqXHR.responseText);
                            ajaxindicatorstop();// Remove the loader
                            document.getElementById("displayMessage").innerHTML = 'There is something wrong with the Combination you selected, please try a different combination';
                            $('#displayMessage').prepend('<span class="button b-close"><span>X</span></span>');//Prepending Close button to popup
                            $('#displayMessage').bPopup({
                                autoClose: 2000
                                // , onClose: function () { window.history.back(); }
                            });
                            //$('#chart').height(500);
                        });

        }

        //Created By:Khajavali checking chart
        function LoadChart() {

            ticksRepeatCompany=0;
            ticksRepeatIndicator=0;
            CompanyMaxvalueLine =0;
            IndicatorMaxvalueLine =0;
            CompanyIndicatorMaxLineDifference = 0;
            CompanyZeroLine =0;
            IndicatorZeroLine =0;
            CompanyZeroLineFlag =false;
            IndicatorZeroLineFlag =false;
            CompanyNeededLines =0;
            IndicatorNeededLines =0;
            ZeroLinesAlign = false;
            i = 0;
            j = 0;


            ticksRepeatCompany = Math.round((Math.abs(CompanyMinValue) + CompanyMaxValue) / 8);
            if(IndicatorMinValue != '0')
                ticksRepeatIndicator = Math.round((Math.abs(IndicatorMinValue) + IndicatorMaxValue) / 8);
            else
            {
                IndicatorMinValue =  Math.round((CompanyMinValue * IndicatorMaxValue)/CompanyMaxValue);
                ticksRepeatIndicator = Math.round((Math.abs(IndicatorMinValue) + IndicatorMaxValue) / 8);
            }


            if (isInvertedVal == false) {
                if (CompanyNeededLines != IndicatorNeededLines) {
                    ticksRepeatCompany = Math.round(CompanyMaxValue / IndicatorMaxvalueLine);
                }
            }

            if($("#chkBusinessPhase").is(':checked'))
            {

                CheckZeroLineForBusinessPhase();
            }
            else
            {

                CheckZeroLine();
            }

        }
        //Created By:Khajavali checking 0 lines
        function CheckZeroLine() {
            i = 0;
            j = 0;
            CompanyZeroLineFlag = false;
            IndicatorZeroLineFlag = false;
            CompanyZeroLine = 0;
            IndicatorZeroLine = 0;
            CompanyMinValueNew = 0;
            CompanyMaxValueNew = 0;
            IndicatorMinValueNew = 0;
            IndicatorMaxValueNew = 0;

            CompanyMinValueOrg = 0;
            CompanyMaxValueOrg = 0;
            IndicatorMinValueOrg = 0;
            IndicatorMaxValueOrg = 0;
            if(k == 0){
                ChartIndicatorMinValue = 0;
                ChartIndicatorMaxValue = 0;
                ChartCompanyMinValue = 0;
                ChartCompanyMaxValue = 0;
            }

            CompanyMinValueOrg = CompanyMinValue;
            CompanyMaxValueOrg = CompanyMaxValue;
            IndicatorMinValueOrg = IndicatorMinValue;
            IndicatorMaxValueOrg = IndicatorMaxValue;


            var indicatortitlestatus=0,companytitlestatus=0;

            //IndicatorMinValueFlag = false;


            $("#chart").shieldChart({
                theme: "light",
                height: 500,
                //primaryHeader: {
                //    text: "ITR - DataCast: US Single-Unit Housing Starts"
                //},
                exportOptions: {
                    image: false,
                    print: false
                },
                axisX: [{
                    drawWidth: 1,
                    ticksRepeat: 24,
                    categoricalValues: $.map(combinationObject, function (item) {
                        // console.log(item)
                        if (item.Code == "Indicator") {
                            var dateValue = new Date(parseInt(item.MonthYear.substr(6)));
                            // dateValue= parseInt(dateValue.getMonth() + 1) + "/" + parseInt(dateValue.getDate()) + "/" + dateValue.getFullYear()
                            var monthName = GetMonthName(dateValue.getMonth() + 1);
                            var date = monthName + '  ' + dateValue.getFullYear()
                            return date;
                        }
                    }),
                    title: {
                        text: 'Years',
                        style: {
                            color: '#000000'
                        }
                    },
                    axisTickText: {
                        // return a new text for the ticks of the X-axis
                        format: function (text, axis, chart) {
                            // var dateValue = new Date(text);
                            var string = text;
                            string = string.split("  ");

                            return string[1];//Here 0-index will have month name and 1-index will have year//dateValue.getFullYear();
                        },
                        style: {
                            color: '#000000'
                        }
                    }

                }],
                axisY: [{
                    min: CompanyMinValue,
                    max: CompanyMaxValue,
                    //ticksRepeat:parseInt((Math.abs(CompanyMinValue) + CompanyMaxValue) / 8),
                    ticksRepeat: ticksRepeatCompany,//Math.round( (Math.abs(CompanyMinValue)+CompanyMaxValue)/8),
                    title: {
                        text:       $.map(combinationObject, function (item) {
                         
                            if(companytitlestatus==0)
                            {
                                if(item.StatPref1=="1/12")
                                {
                                    companytitlestatus=1
                                  //  return  'Company 1/12 (Annual Growth Rate)'
                                    return  'Company - 1/12 '
                               
                                }
                                else if(item.StatPref1=="3/12")
                                {
                                    companytitlestatus=1
                                  //  return  'Company 12/12 (Annual Growth Rate)'
                                    return  'Company - 3/12 '
                                }
                                else
                                {
                                    companytitlestatus=1
                                 //   return  'Company 12/12 (Annual Growth Rate)'
                                    return  'Company - 12/12 '
                                }
                            }
                            
                        }),    // Datacast 2.5 change
                        style: {
                            color: '#000000'
                        }
                       
                     
                    },
                    axisTickText: {
                        format: function (text, axis, chart) {
                            if (text > 0)
                                CompanyMaxValueNew = text;
                            else if (i == 0) {
                                CompanyMinValueNew = text;
                                i = i + 1;
                            }

                            if (text == 0) {
                                CompanyZeroLineFlag = true;
                                //alert(CompanyZeroLineFlag);
                            }
                            if (CompanyZeroLineFlag == false) {
                                CompanyZeroLine = CompanyZeroLine + 1;
                            }

                            return text;
                        },
                        style: {
                            color: '#000000'
                        }

                    },
                    plotLines: [{ start: 0, drawWidth: 3, drawColor: '#C0C0C0' }]
                }
                , {
                    inverseOrder: isInvertedVal,
                    min: IndicatorMinValue,
                    max: IndicatorMaxValue,
                    //ticksRepeat: parseInt((Math.abs(IndicatorMinValue) + IndicatorMaxValue) / 8),
                    ticksRepeat: ticksRepeatIndicator,//Math.round((Math.abs(IndicatorMinValue) + IndicatorMaxValue)/8),
                    title: {
                        text:     $.map(combinationObject, function (item) {
                            if(indicatortitlestatus==0)
                            {
                                if(item.StatPref1=="1/12")
                                {
                                    indicatortitlestatus=1
                                   // return  'Indicator 1/12 (Monthly Growth Rate)'
                                    return  'Indicator - 1/12 '
                               
                                }
                                else if(item.StatPref1=="3/12")
                                {
                                    indicatortitlestatus=1
                                   // return  'Indicator 3/12 (Annual Growth Rate)'
                                    return  ' Indicator - 3/12 '
                                }
                                else
                                {
                                    indicatortitlestatus=1
                                //    return  'Indicator 12/12 (Annual Growth Rate)'
                                    return  ' Indicator - 12/12 '
                                }
                            }
                            
                        }),   // Datacast 2.5 change
                        style: {
                            color: '#000000'
                        }
                        //align: 'high',
                        //textAngle: 1,
                        //offset:60
                        
                    },
                    //seriesSettings: {
                    //    line: {
                    //        pointMark: {
                    //            drawWidth: 20
                    //        }
                    //    }
                    //},
                    swapLocation: true,
                    axisTickText: {
                        format: function (text, axis, chart) {


                            if (text > 0)
                                IndicatorMaxValueNew = text;
                            else if (j == 0) {
                                IndicatorMinValueNew = text;
                                j = j + 1;
                            }


                            if (isInvertedVal == false) {

                                if (text == 0) {
                                    IndicatorZeroLineFlag = true;

                                }
                                if (IndicatorZeroLineFlag == false) {
                                    IndicatorZeroLine = IndicatorZeroLine + 1;
                                }
                            }
                            else {
                                if (text == 0) {
                                    IndicatorZeroLine = 0;
                                }
                                if (text > 0) {
                                    IndicatorZeroLine = IndicatorZeroLine + 1;
                                }
                            }


                            return text;
                        },
                        style: {
                            color: '#000000'
                        },
                        textAngle: 0
                    }
                }
                ],
                dataSeries: [{
                    seriesType: 'line',
                    pointMark: {
                        enabled: false,
                        drawWidth: 0
                    },
                    axis: 0,
                    tooltipSettings: {
                        enabled: true,
                        axisMarkers: {
                            enabled: true,
                            //mode: 'xy',
                            color: 'red',
                            width: 1,
                            zIndex: 3
                        },


                        customPointText:  $.map(combinationObject, function (item) {
                            if (item.Code == "Indicator" && item.Forecast == true ) {
                              //  alert(item.StatPref1);

                                if(item.StatPref1=="1/12")
                                {
                                    return shield.format(
                                                                   '<span><b> Indicator Data Percent Change in 12-Month Moving Average: {value}</b></span>',
                                                                   {
                                                                       value: item.C1By12  //point.y
                                                                   }
                                                               );
                                }
                                else if(item.StatPref1=="3/12")
                                {
                                    return shield.format(
                                                                  '<span><b> Indicator Data Percent Change in 12-Month Moving Average: {value}</b></span>',
                                                                  {
                                                                      value: item.C3BY12  //point.y
                                                                  }
                                                              );
                                }
                                else
                                {
                                    return shield.format(
                                                                  '<span><b> Indicator Data Percent Change in 12-Month Moving Average: {value}</b></span>',
                                                                  {
                                                                      value: item.C12BY12  //point.y
                                                                  }
                                                              );
                                }
                            }
                        })
                        /*
                        customPointText: function (point, chart, text) {
                            return shield.format(
                                '<span><b> Company Percent Change in 12-Month Moving Average: {value}</b></span>',
                                {
                                    value: point.y
                                }
                            );
                        }
                        */
                    },
                    collectionAlias: "Company Division Data",
                    data: $.map(combinationObject, function (item) {
                        if (item.Code == "Company") {
                            if(item.StatPref1=="1/12")
                            {
                                if(k == 0)
                                {
                                    if(item.C1By12 < 0)
                                    {
                                        if(ChartCompanyMinValue > item.C1By12)
                                            ChartCompanyMinValue = item.C1By12;
                                    }
                                    else{
                                        if(ChartCompanyMaxValue < item.C1By12)
                                            ChartCompanyMaxValue =item.C1By12;
                                    }
                                }

                                return { y: item.C1By12 }// //return { y: item.C12BY12 }
                            }
                            else if(item.StatPref1=="3/12")
                            {
                                if(k == 0)
                                {
                                    if(item.C3BY12 < 0)
                                    {
                                        if(ChartCompanyMinValue > item.C3BY12)
                                            ChartCompanyMinValue = item.C3BY12;
                                    }
                                    else{
                                        if(ChartCompanyMaxValue < item.C3BY12)
                                            ChartCompanyMaxValue =item.C3BY12;
                                    }
                                }

                                return { y: item.C3BY12 }// //return { y: item.C12BY12 }
                            }
                            else
                            {
                                if(k == 0)
                                {
                                    if(item.C12BY12 < 0)
                                    {
                                        if(ChartCompanyMinValue > item.C12BY12)
                                            ChartCompanyMinValue = item.C12BY12;
                                    }
                                    else{
                                        if(ChartCompanyMaxValue < item.C12BY12)
                                            ChartCompanyMaxValue =item.C12BY12;
                                    }
                                }

                                return { y: item.C12BY12 }// //return { y: item.C12BY12 }
                            }
                        }
                    })

                }
                , {
                    seriesType: 'line',
                    axisY: 1,
                    tooltipSettings: {
                        enabled: true,
                        axisMarkers: {
                            enabled: true,
                            //mode: 'xy',
                            color: 'red',
                            width: 1,
                            zIndex: 3
                        },
                        customPointText:  $.map(combinationObject, function (item) {
                            if (item.Code == "Indicator" && item.Forecast == true) {


                                if(item.StatPref1=="1/12")
                                {
                                    return shield.format(
                                          '<span><b> Indicator Data Percent Change in 12-Month Moving Average: {value}</b></span>',
                                         {
                                             value: item.C1By12  //point.y
                                         }
                                   );
                                }
                                else if(item.StatPref1=="3/12")
                                {
                                    return shield.format(
                                          '<span><b> Indicator Data Percent Change in 12-Month Moving Average: {value}</b></span>',
                                         {
                                             value: item.C3BY12  //point.y
                                         }
                                   );
                                }
                                else

                                {
                                    return shield.format(
                                         '<span><b> Indicator Data Percent Change in 12-Month Moving Average: {value}</b></span>',
                                        {
                                            value: item.C12BY12  //point.y
                                        }
                                  );
                                }
                            }
                        })
                       
                        /*
                        customPointText: function (point, chart, text) {
                            return shield.format(
                                '<span><b> Indicator Data Percent Change in 12-Month Moving Average: {value}</b></span>',
                                {
                                    value: point.y
                                }
                            );
                        }
                        */
                    },
                    pointMark: {
                        enabled: false,
                        drawWidth: 0
                    },
                    color: 'green',
                    collectionAlias: "Indicator History",
                    data: $.map(combinationObject, function (item) {
                        if (item.Code == "Indicator" && item.Forecast == false) {

                            //if (item.C12BY12 < 0 && IndicatorMinValueFlag == false) {
                            //    if (item.C12BY12 <= IndicatorMinValueOrg)
                            //        IndicatorMinValueFlag = true;
                            //}


                            if (item.StatPref1=="1/12")
                            {
                                if(k == 0)
                                {
                                    if(item.C1By12 < 0)
                                    {
                                        if(ChartIndicatorMinValue > item.C1By12)
                                            ChartIndicatorMinValue = item.C1By12;
                                    }
                                    else{
                                        if(ChartIndicatorMaxValue < item.C1By12)
                                            ChartIndicatorMaxValue =item.C1By12;
                                    }
                                }

                                return { y: item.C1By12 }
                            }
                            else if(item.StatPref1=="3/12")
                            {
                                if(k == 0)
                                {
                                    if(item.C3BY12 < 0)
                                    {
                                        if(ChartIndicatorMinValue > item.C3BY12)
                                            ChartIndicatorMinValue = item.C3BY12;
                                    }
                                    else{
                                        if(ChartIndicatorMaxValue < item.C3BY12)
                                            ChartIndicatorMaxValue =item.C3BY12;
                                    }
                                }

                                return { y: item.C3BY12 }
                            }
                            else
                            {
                                if(k == 0)
                                {
                                    if(item.C12BY12 < 0)
                                    {
                                        if(ChartIndicatorMinValue > item.C12BY12)
                                            ChartIndicatorMinValue = item.C12BY12;
                                    }
                                    else{
                                        if(ChartIndicatorMaxValue < item.C12BY12)
                                            ChartIndicatorMaxValue =item.C12BY12;
                                    }
                                }

                                return { y: item.C12BY12 }
                            }
                        }
                            //return { y: item.C12BY12 }
                        else if (item.Code == "Indicator" && item.Forecast == true)
                            return { y: null }
                    })
                }
                , {
                    seriesType: 'scatter',
                    axisY: 1,
                    tooltipSettings: {
                        enabled: true,
                        axisMarkers: {
                            enabled: true,
                            color: 'red',
                            width: 1,
                            zIndex: 3
                        },
                        customPointText: function (point, chart, text) {
                            return shield.format(
                                '<span><b> Indicator Forecasted 12-Month Moving Average: {value}</b></span>',
                                {
                                    value: point.y
                                }
                            );
                        }
                    },
                    pointMark: {
                        enabled: true,
                        drawWidth: 0
                    },
                    color: 'lightgreen',
                    collectionAlias: "Indicator Forecast",
                    // data: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 5.9, 11.0, 20.0, -7.8, 9.0]
                    data: $.map(combinationObject, function (item) {
                        //  console.log(item)
                        if (item.Code == "Indicator" && item.Forecast == false)
                            return { y: null }
                        else if (item.Code == "Indicator" && item.Forecast == true)
                        {
                            if(item.StatPref1=="1/12")
                            {
                                return { y: item.C1By12 }
                            }
                            else  if(item.StatPref1=="3/12")
                            {
                                return { y: item.C3BY12 }
                            }
                            else
                            {
                                return { y: item.C12BY12 }
                            }
                        }
                    })
                }
                ],
                chartLegend: {
                    enabled: true,
                    align: 'center'
                },
                events: {//Called on Chart load completed
                    load: function (event) {
                        ajaxindicatorstop();

                        if (CompanyZeroLine == IndicatorZeroLine) {
                            $("#chart").show();
                        }
                        else if (isInvertedVal == false  && k == 0) {
                            k = k + 1;
                            LoadChartCalculations(1);
                        }
                        else if (isInvertedVal == false && k == 1) {
                            k = k + 1;
                            LoadChartCalculations(2);

                        }
                        else if (isInvertedVal == false && k == 2) {
                            k = k + 1;
                            LoadChartCalculations(3);

                        }
                        else if (isInvertedVal == true && k == 0) {

                            k = k + 1;
                            LoadChartCalculations(1);
                        }
                        else if (isInvertedVal == true && k == 1) {
                            k = k + 1;
                            LoadChartCalculations(2);
                        }
                        else if (isInvertedVal == true && k == 2) {
                            k = k + 1;
                            LoadChartCalculations(3);
                        }
                        else if (isInvertedVal == true && k == 3) {
                            k = k + 1;
                            LoadChartCalculations(4);
                        }
                        else if (isInvertedVal == true && k == 4) {
                            k = k + 1;
                            LoadChartCalculations(5);
                        }

                    }
                }
            });
        }



        //Created By:Raghuveer  for Business Phase
        function CheckZeroLineForBusinessPhase() {
            i = 0;
            j = 0;
            CompanyZeroLineFlag = false;
            IndicatorZeroLineFlag = false;
            CompanyZeroLine = 0;
            IndicatorZeroLine = 0;
            CompanyMinValueNew = 0;
            CompanyMaxValueNew = 0;
            IndicatorMinValueNew = 0;
            IndicatorMaxValueNew = 0;

            CompanyMinValueOrg = 0;
            CompanyMaxValueOrg = 0;
            IndicatorMinValueOrg = 0;
            IndicatorMaxValueOrg = 0;
            if(k == 0){
                ChartIndicatorMinValue = 0;
                ChartIndicatorMaxValue = 0;
                ChartCompanyMinValue = 0;
                ChartCompanyMaxValue = 0;
            }

            CompanyMinValueOrg = CompanyMinValue;
            CompanyMaxValueOrg = CompanyMaxValue;
            IndicatorMinValueOrg = IndicatorMinValue;
            IndicatorMaxValueOrg = IndicatorMaxValue;


            //IndicatorMinValueFlag = false;
            var indicatortitlestatus=0,companytitlestatus=0;

            $("#chart").shieldChart({
                theme: "light",
                height: 500,
                //primaryHeader: {
                //    text: "ITR - DataCast: US Single-Unit Housing Starts"
                //},
                exportOptions: {
                    image: false,
                    print: false
                },
                axisX: [{
                    drawWidth: 1,
                    ticksRepeat: 12,
                    categoricalValues: $.map(combinationObject, function (item) {
                        // console.log(item)
                        if (item.Code == "Indicator") {
                            var dateValue = new Date(parseInt(item.MonthYear.substr(6)));
                            // dateValue= parseInt(dateValue.getMonth() + 1) + "/" + parseInt(dateValue.getDate()) + "/" + dateValue.getFullYear()
                            var monthName = GetMonthName(dateValue.getMonth() + 1);
                            var date = monthName + '  ' + dateValue.getFullYear()
                            return date;
                        }
                    }),
                    title: {
                        text: 'Years',
                        style: {
                            color: '#000000'
                        }
                    },
                    axisTickText: {
                        // return a new text for the ticks of the X-axis
                        format: function (text, axis, chart) {
                            // var dateValue = new Date(text);
                            var string = text;
                            string = string.split("  ");

                            return string[0] + "-" + string[1];//Here 0-index will have month name and 1-index will have year//dateValue.getFullYear();
                        },
                        style: {
                            color: '#000000'
                        }
                    },

                    plotBands: $.map(combinationObject, function(item, index) {

                        if (item.Code == "Indicator") {

                            return {
                                start: index-1,
                                end: index  ,
                                drawColor: item.ColorCode == "A" ? '#3175A4'
                                         : (item.ColorCode == "B" ? '#59AC5C' : (item.ColorCode == "C" ? '#ECC32D' : (item.ColorCode=="D"? '#F15E4A'
                                         : (item.ColorCode == "TA" ? '#86B9DB' : (item.ColorCode == "TB" ? '#98CB99' :  (item.ColorCode == "TC" ? '#F4DC84'
                                         :  (item.ColorCode == "TD" ? '#F6978A' : '#FFFFFF')))))))



                                // or based on some other property of the data item
                            }
                        }
                    })

                }],
                axisY: [{
                    min: CompanyMinValue,
                    max: CompanyMaxValue,
                    //ticksRepeat:parseInt((Math.abs(CompanyMinValue) + CompanyMaxValue) / 8),
                    ticksRepeat: ticksRepeatCompany,//Math.round( (Math.abs(CompanyMinValue)+CompanyMaxValue)/8),
                    title: {
                        text:  $.map(combinationObject, function (item) {
                            if(companytitlestatus==0)
                            {
                               
                                if(item.StatPref1=="1/12")
                                {
                                    companytitlestatus=1
                                    return   'Company 1/12 (Annual Growth Rate)'
                               
                                }
                                else if(item.StatPref1=="3/12")
                                {
                                    companytitlestatus=1
                                    return   'Company 3/12 (Annual Growth Rate)'
                                }
                                else
                                {
                                    companytitlestatus=1
                                    return   'Company 12/12 (Annual Growth Rate)'
                                }
                            }
                            
                        }),   // Datacast 2.5 change
                            
                            
                           
                        style: {
                            color: '#000000'
                        }
                    },
                    axisTickText: {
                        format: function (text, axis, chart) {
                            if (text > 0)
                                CompanyMaxValueNew = text;
                            else if (i == 0) {
                                CompanyMinValueNew = text;
                                i = i + 1;
                            }

                            if (text == 0) {
                                CompanyZeroLineFlag = true;
                                //alert(CompanyZeroLineFlag);
                            }
                            if (CompanyZeroLineFlag == false) {
                                CompanyZeroLine = CompanyZeroLine + 1;
                            }

                            return text;
                        },
                        style: {
                            color: '#000000'
                        }

                    },
                    plotLines: [{ start: 0, drawWidth: 3, drawColor: '#C0C0C0' }]
                }
                , {
                    inverseOrder: isInvertedVal,
                    min: IndicatorMinValue,
                    max: IndicatorMaxValue,
                    //ticksRepeat: parseInt((Math.abs(IndicatorMinValue) + IndicatorMaxValue) / 8),
                    ticksRepeat: ticksRepeatIndicator,//Math.round((Math.abs(IndicatorMinValue) + IndicatorMaxValue)/8),
                    title: {
                        text:  $.map(combinationObject, function (item) {
                            if(indicatortitlestatus==0)
                            {
                               
                                if(item.StatPref1=="1/12")
                                {
                                    indicatortitlestatus=1
                                    return   'Indicator 1/12 (Annual Growth Rate)'
                               
                                }
                                else if(item.StatPref1=="3/12")
                                {
                                    indicatortitlestatus=1
                                    return   'Indicator 3/12 (Annual Growth Rate)'
                                }
                                else
                                {
                                    indicatortitlestatus=1
                                    return   'Indicator 12/12 (Annual Growth Rate)'
                                }
                            }
                            
                        }),   // Datacast 2.5 change
                            
                            
                            
                            
                        style: {
                            color: '#000000'
                        }
                    },
                    //seriesSettings: {
                    //    line: {
                    //        pointMark: {
                    //            drawWidth: 20
                    //        }
                    //    }
                    //},
                    swapLocation: true,
                    axisTickText: {
                        format: function (text, axis, chart) {


                            if (text > 0)
                                IndicatorMaxValueNew = text;
                            else if (j == 0) {
                                IndicatorMinValueNew = text;
                                j = j + 1;
                            }


                            if (isInvertedVal == false) {

                                if (text == 0) {
                                    IndicatorZeroLineFlag = true;

                                }
                                if (IndicatorZeroLineFlag == false) {
                                    IndicatorZeroLine = IndicatorZeroLine + 1;
                                }
                            }
                            else {
                                if (text == 0) {
                                    IndicatorZeroLine = 0;
                                }
                                if (text > 0) {
                                    IndicatorZeroLine = IndicatorZeroLine + 1;
                                }
                            }


                            return text;
                        },
                        style: {
                            color: '#000000'
                        },
                        textAngle: 0
                    }
                }
                ],
                dataSeries: [{
                    seriesType: 'line',
                    pointMark: {
                        enabled: false,
                        drawWidth: 0
                    },
                    axis: 0,
                    tooltipSettings: {
                        enabled: true,
                        axisMarkers: {
                            enabled: true,
                            //mode: 'xy',
                            color: 'red',
                            width: 1,
                            zIndex: 3
                        },
                        customPointText: function (point, chart, text) {
                            return shield.format(
                                '<span><b> Company Percent Change in 12-Month Moving Average: {value}</b></span>',
                                {
                                    value: point.y
                                }
                            );
                        }
                    },
                    collectionAlias: "Company Division Data",
                    data: $.map(combinationObject, function (item) {
                        if (item.Code == "Company") {
                            if(item.StatPref1=="1/12")
                                {
                            if(k == 0)
                            {
                                if(item.C1By12 < 0)
                                {
                                    if(ChartCompanyMinValue > item.C1By12)
                                        ChartCompanyMinValue = item.C1By12;
                                }
                                else{
                                    if(ChartCompanyMaxValue < item.C1By12)
                                        ChartCompanyMaxValue =item.C1By12;
                                }
                            }

                            return { y: item.C1By12 }// //return { y: item.C12BY12 }
                            }
                            else if(item.StatPref1=="3/12")
                            {
                                if(k == 0)
                                {
                                    if(item.C3BY12 < 0)
                                    {
                                        if(ChartCompanyMinValue > item.C3BY12)
                                            ChartCompanyMinValue = item.C3BY12;
                                    }
                                    else{
                                        if(ChartCompanyMaxValue < item.C3BY12)
                                            ChartCompanyMaxValue =item.C3BY12;
                                    }
                                }

                                return { y: item.C3BY12 }// //return { y: item.C12BY12 }
                            }
                            else
                            {
                                if(k == 0)
                                {
                                    if(item.C12BY12 < 0)
                                    {
                                        if(ChartCompanyMinValue > item.C12BY12)
                                            ChartCompanyMinValue = item.C12BY12;
                                    }
                                    else{
                                        if(ChartCompanyMaxValue < item.C12BY12)
                                            ChartCompanyMaxValue =item.C12BY12;
                                    }
                                }

                                return { y: item.C12BY12 }// //return { y: item.C12BY12 }
                            }
                        }
                    })

                }
                , {
                    seriesType: 'line',
                    axisY: 1,
                    tooltipSettings: {
                        enabled: true,
                        axisMarkers: {
                            enabled: true,
                            //mode: 'xy',
                            color: 'red',
                            width: 1,
                            zIndex: 3
                        },
                        customPointText: function (point, chart, text) {
                            return shield.format(
                                '<span><b> Indicator Data Percent Change in 12-Month Moving Average: {value}</b></span>',
                                {
                                    value: point.y
                                }
                            );
                        }
                    },
                    pointMark: {
                        enabled: false,
                        drawWidth: 0
                    },
                    color: 'green',
                    collectionAlias: "Indicator History",
                    data: $.map(combinationObject, function (item) {
                        if (item.Code == "Indicator" && item.Forecast == false) {

                            //if (item.C12BY12 < 0 && IndicatorMinValueFlag == false) {
                            //    if (item.C12BY12 <= IndicatorMinValueOrg)
                            //        IndicatorMinValueFlag = true;
                            //}
                            if(item.StatPref1=="1/12")
                            {
                                if(k == 0)
                                {
                                    if(item.C1By12 < 0)
                                    {
                                        if(ChartIndicatorMinValue > item.C1By12)
                                            ChartIndicatorMinValue = item.C1By12;
                                    }
                                    else{
                                        if(ChartIndicatorMaxValue < item.C1By12)
                                            ChartIndicatorMaxValue =item.C1By12;
                                    }
                                }

                                return { y: item.C1By12 }
                            }
                            else  if(item.StatPref1=="3/12")
                            {
                                if(k == 0)
                                {
                                    if(item.C3BY12 < 0)
                                    {
                                        if(ChartIndicatorMinValue > item.C3BY12)
                                            ChartIndicatorMinValue = item.C3BY12;
                                    }
                                    else{
                                        if(ChartIndicatorMaxValue < item.C3BY12)
                                            ChartIndicatorMaxValue =item.C3BY12;
                                    }
                                }

                                return { y: item.C3BY12 }
                            }
                            else
                                {
                                    if(k == 0)
                                    {
                                        if(item.C12BY12 < 0)
                                        {
                                            if(ChartIndicatorMinValue > item.C12BY12)
                                                ChartIndicatorMinValue = item.C12BY12;
                                        }
                                        else{
                                            if(ChartIndicatorMaxValue < item.C12BY12)
                                                ChartIndicatorMaxValue =item.C12BY12;
                                        }
                                    }

                                    return { y: item.C12BY12 }
                                }
                        }
                            //return { y: item.C12BY12 }
                        else if (item.Code == "Indicator" && item.Forecast == true)
                            return { y: null }
                    })
                }
                , {
                    seriesType: 'scatter',
                    axisY: 1,
                    tooltipSettings: {
                        enabled: true,
                        axisMarkers: {
                            enabled: true,
                            color: 'red',
                            width: 1,
                            zIndex: 3
                        },
                        customPointText: function (point, chart, text) {
                            return shield.format(
                                '<span><b> Indicator Forecasted 12-Month Moving Average: {value}</b></span>',
                                {
                                    value: point.y
                                }
                            );
                        }
                    },
                    pointMark: {
                        enabled: true,
                        drawWidth: 0
                    },
                    color: 'lightgreen',
                    collectionAlias: "Indicator Forecast",
                    // data: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 5.9, 11.0, 20.0, -7.8, 9.0]
                    data: $.map(combinationObject, function (item) {
                        //  console.log(item)
                        if (item.Code == "Indicator" && item.Forecast == false)
                            return { y: null }
                        else if (item.Code == "Indicator" && item.Forecast == true)
                        {
                            if(item.StatPref1=="1/12")
                                return { y: item.C1By12 }
                            else if(item.StatPref1=="3/12")
                                return { y: item.C3BY12 }
                            else
                                return { y: item.C12BY12 }

                    }
                    })
                }
                ],
                chartLegend: {
                    enabled: true,
                    align: 'center'
                },
                events: {//Called on Chart load completed
                    load: function (event) {
                        ajaxindicatorstop();

                        if (CompanyZeroLine == IndicatorZeroLine) {
                            $("#chart").show();
                        }
                        else if (isInvertedVal == false  && k == 0) {
                            k = k + 1;
                            LoadChartCalculations(1);
                        }
                        else if (isInvertedVal == false && k == 1) {
                            k = k + 1;
                            LoadChartCalculations(2);

                        }
                        else if (isInvertedVal == false && k == 2) {
                            k = k + 1;
                            LoadChartCalculations(3);

                        }
                        else if (isInvertedVal == true && k == 0) {

                            k = k + 1;
                            LoadChartCalculations(1);
                        }
                        else if (isInvertedVal == true && k == 1) {
                            k = k + 1;
                            LoadChartCalculations(2);
                        }
                        else if (isInvertedVal == true && k == 2) {
                            k = k + 1;
                            LoadChartCalculations(3);
                        }
                        else if (isInvertedVal == true && k == 3) {
                            k = k + 1;
                            LoadChartCalculations(4);
                        }
                        else if (isInvertedVal == true && k == 4) {
                            k = k + 1;
                            LoadChartCalculations(5);
                        }

                    }
                }
            });
        }



        function LoadChartCalculations(caseT)
        {
            //don't delete
            //if (isInvertedVal == false) {
            //    CompanyMinValue = CompanyMinValueNew;//100
            //    CompanyMaxValue = CompanyMaxValueNew;//200
            //        IndicatorMinValue = IndicatorMinValueNew;//-7
            //        IndicatorMaxValue = IndicatorMaxValueNew;//5
            //    }



            var IndicatorMinvalueLine = 0;
            var ticksRepeatCompany_Privious = ticksRepeatCompany;//25
            var ticksRepeatIndicator_Privious = ticksRepeatIndicator;//25

            var modulus =0;

            if (isInvertedVal == false) {

                switch (caseT) {
                    case 1:
                        //alert('case 1');
                        modulus = Math.abs(CompanyMinValue % IndicatorZeroLine);
                        if (modulus > 0) {

                            ticksRepeatCompany = Math.abs(Math.floor(CompanyMinValue / IndicatorZeroLine)) + 1;
                        }
                        else
                            ticksRepeatCompany = Math.abs(Math.floor(CompanyMinValue / IndicatorZeroLine));

                        if (ticksRepeatCompany == ticksRepeatCompany_Privious) {

                            CompanyMinValue = CompanyMinValue - (ticksRepeatCompany * (Math.abs(Math.abs(CompanyZeroLine) - Math.abs(IndicatorZeroLine))));
                        }
                        break;
                    case 2:
                        // alert('case 2');
                        CompanyMinValue = CompanyMinValueNew;//100
                        CompanyMaxValue = CompanyMaxValueNew;//200
                        IndicatorMinValue = IndicatorMinValueNew;//-7
                        IndicatorMaxValue = IndicatorMaxValueNew;//5
                        modulus = Math.abs(CompanyMinValue % IndicatorZeroLine);
                        if (modulus > 0) {

                            ticksRepeatCompany = Math.abs(Math.floor(CompanyMinValue / IndicatorZeroLine)) + 1;
                        }
                        else
                            ticksRepeatCompany = Math.abs(Math.floor(CompanyMinValue / IndicatorZeroLine));

                        if (ticksRepeatCompany == ticksRepeatCompany_Privious) {

                            CompanyMinValue = CompanyMinValue - (ticksRepeatCompany * (Math.abs(Math.abs(CompanyZeroLine) - Math.abs(IndicatorZeroLine))));
                        }
                        break;
                    case 3:
                        {
                            //  alert('case 3');
                            CompanyMinValue = CompanyMinValue - (ticksRepeatCompany * (Math.abs(Math.abs(CompanyZeroLine) - Math.abs(IndicatorZeroLine))));
                        }
                        break;
                }


            }
            else {


                switch (caseT) {
                    case 1:
                        //alert('case 1');
                        //if (IndicatorMinValueFlag == false) {
                        //    if (CompanyMinValueNew < IndicatorMinValue)// -38 < -52
                        //        IndicatorMinValue = CompanyMinValueNew;
                        //    CompanyMinValue = CompanyMinValueNew - 1;
                        //}
                        modulus = Math.abs(Math.abs(IndicatorMinValue) % ticksRepeatIndicator);
                        if (modulus > 0) {
                            //ticksRepeatCompany = Math.round(Math.abs(CompanyMinValue / IndicatorZeroLine)) + 1;
                            IndicatorMinvalueLine = Math.floor(Math.abs(IndicatorMinValue) / ticksRepeatIndicator) + 1;
                        } else
                            IndicatorMinvalueLine = Math.floor(Math.abs(IndicatorMinValue) / ticksRepeatIndicator);

                        modulus = 0;

                        modulus = Math.abs(CompanyMaxValueOrg % IndicatorMinvalueLine);
                        if (modulus > 0) {
                            ticksRepeatCompany = Math.floor(CompanyMaxValueOrg / IndicatorMinvalueLine) + 1;
                        } else
                            ticksRepeatCompany = Math.floor(CompanyMaxValueOrg / IndicatorMinvalueLine);
                        break;
                    case 2:
                        //alert('case 2');
                        if (ticksRepeatIndicator == ticksRepeatIndicator_Privious || ticksRepeatCompany == ticksRepeatCompany_Privious) {

                            //  if (IndicatorMinValueFlag == true) {

                            CompanyMinValue = CompanyMinValueNew;//100
                            CompanyMaxValue = CompanyMaxValueNew;//200
                            IndicatorMinValue = IndicatorMinValueNew;//-7
                            IndicatorMaxValue = IndicatorMaxValueNew;//5

                            modulus = Math.abs(CompanyMinValue % IndicatorZeroLine);
                            if (modulus > 0) {
                                ticksRepeatCompany = Math.floor(Math.abs(CompanyMinValue / IndicatorZeroLine)) + 1;
                            } else
                                ticksRepeatCompany = Math.floor(Math.abs(CompanyMinValue / IndicatorZeroLine));

                            //  }

                        }
                        break;
                    case 3:
                        {
                            //alert('case 3');


                            var tempIndicatorMinValue =0;
                            var tempCompanyMinValue =0;
                            if( ChartCompanyMaxValue > Math.abs(ChartIndicatorMinValue))
                            {
                                modulus = Math.abs(ChartCompanyMaxValue % ticksRepeatCompany);
                                if (modulus > 0) {
                                    tempIndicatorMinValue = Math.floor(Math.abs(ChartCompanyMaxValue / ticksRepeatCompany)) + 1;
                                } else
                                    tempIndicatorMinValue = Math.floor(Math.abs(ChartCompanyMaxValue / ticksRepeatCompany));

                                IndicatorMinValue =  - (ticksRepeatIndicator * tempIndicatorMinValue);
                            }
                            else
                            {
                                modulus = Math.abs(ChartIndicatorMinValue % ticksRepeatCompany);
                                if (modulus > 0) {
                                    tempIndicatorMinValue = Math.floor(Math.abs(ChartIndicatorMinValue / ticksRepeatCompany)) + 1;
                                } else
                                    tempIndicatorMinValue = Math.floor(Math.abs(ChartIndicatorMinValue / ticksRepeatCompany));

                                IndicatorMinValue =  - (ticksRepeatCompany * tempIndicatorMinValue);
                            }

                            if(IndicatorMinValue > ChartIndicatorMinValue)//-70 > -100
                                IndicatorMinValue = ChartIndicatorMinValue;



                            if( ChartIndicatorMaxValue > Math.abs(ChartCompanyMinValue))
                            {
                                modulus = Math.abs(ChartIndicatorMaxValue%ticksRepeatIndicator);
                                if (modulus > 0) {
                                    tempCompanyMinValue = Math.floor(Math.abs(ChartIndicatorMaxValue / ticksRepeatIndicator)) + 1;
                                } else
                                    tempCompanyMinValue = Math.floor(Math.abs(ChartIndicatorMaxValue / ticksRepeatIndicator));

                                CompanyMinValue = - (ticksRepeatCompany * tempCompanyMinValue);

                            }
                            else
                            {
                                modulus = Math.abs(ChartCompanyMinValue%ticksRepeatIndicator);
                                if (modulus > 0) {
                                    tempCompanyMinValue = Math.floor(Math.abs(ChartCompanyMinValue / ticksRepeatIndicator)) + 1;
                                } else
                                    tempCompanyMinValue = Math.floor(Math.abs(ChartCompanyMinValue / ticksRepeatIndicator));

                                CompanyMinValue = - (ticksRepeatIndicator * tempCompanyMinValue);
                            }

                            if(CompanyMinValue > ChartCompanyMinValue)
                                CompanyMinValue = ChartCompanyMinValue;


                            CompanyMaxValue = ChartCompanyMaxValue;//18;//16
                            IndicatorMaxValue = ChartIndicatorMaxValue;// 165;// 154

                        }
                        break;
                    case 4:
                        {
                            //alert('case 4');
                            CompanyMinValue = CompanyMinValue - (ticksRepeatCompany * (Math.abs(Math.abs(CompanyZeroLine) - Math.abs(IndicatorZeroLine))));
                        }
                        break;
                    case 5:
                        {
                            //alert('case 5');
                            CompanyMinValue = CompanyMinValue + (ticksRepeatCompany * (Math.abs(Math.abs(CompanyZeroLine) - Math.abs(IndicatorZeroLine))));
                            //Above line resetting CompanyMinValue which is added in case 4.

                            IndicatorMinValue = IndicatorMinValueNew - (ticksRepeatIndicator * (Math.abs(Math.abs(CompanyZeroLine) - Math.abs(IndicatorZeroLine))));
                        }
                        break;

                }

            }



            if($("#chkBusinessPhase").is(':checked'))
            {

                CheckZeroLineForBusinessPhase();
            }
            else
            {

                CheckZeroLine();
            }

        }


        //function LoadMainChart() {
        //    //Created By:Vishnuvardhan Reddy Ammana, loads the chart with details supplied in combined json object

        //    $("#chart").shieldChart({
        //        theme: "light",
        //        height: 500,
        //        //primaryHeader: {
        //        //    text: "ITR - DataCast: US Single-Unit Housing Starts"
        //        //},
        //        exportOptions: {
        //            image: false,
        //            print: false
        //        },
        //        axisX: [{
        //            drawWidth: 1,
        //            ticksRepeat: 24,
        //            categoricalValues: $.map(combinationObject, function (item) {
        //                // console.log(item)
        //                if (item.Code == "Indicator") {
        //                    var dateValue = new Date(parseInt(item.MonthYear.substr(6)));
        //                    // dateValue= parseInt(dateValue.getMonth() + 1) + "/" + parseInt(dateValue.getDate()) + "/" + dateValue.getFullYear()
        //                    var monthName = GetMonthName(dateValue.getMonth() + 1);
        //                    var date = monthName + '  ' + dateValue.getFullYear()
        //                    return date;
        //                }
        //            }),
        //            title: {
        //                text: 'Years',
        //                style: {
        //                    color: '#000000'
        //                }
        //            },
        //            axisTickText: {
        //                // return a new text for the ticks of the X-axis
        //                format: function (text, axis, chart) {
        //                    // var dateValue = new Date(text);
        //                    var string = text;
        //                    string = string.split("  ");

        //                    return string[1];//Here 0-index will have month name and 1-index will have year//dateValue.getFullYear();
        //                },
        //                style: {
        //                    color: '#000000'
        //                }
        //            }
        //        }],
        //        axisY: [{
        //            min: CompanyMinValue,
        //            max: CompanyMaxValue,
        //            ticksRepeat: parseInt((Math.abs(CompanyMinValue) + CompanyMaxValue) / 8),
        //            //ticksRepeat:Math.round( (Math.abs(CompanyMinValue)+CompanyMaxValue)/8),
        //            title: {
        //                text: 'Company 12/12 (Annual Growth Rate)',
        //                style: {
        //                    color: '#000000'
        //                }
        //            },
        //            axisTickText: {
        //                format: function (text, axis, chart) {
        //                    return text;
        //                },
        //                style: {
        //                    color: '#000000'
        //                }

        //            }
        //        }
        //        , {
        //            inverseOrder: isInvertedVal,
        //            min: IndicatorMinValue,
        //            max: IndicatorMaxValue,
        //            ticksRepeat: parseInt((Math.abs(IndicatorMinValue) + IndicatorMaxValue) / 8),
        //            //ticksRepeat: Math.round((Math.abs(IndicatorMinValue) + IndicatorMaxValue)/8),
        //            title: {
        //                text: 'Indicator 12/12 (Annual Growth Rate)',
        //                style: {
        //                    color: '#000000'
        //                }
        //            },
        //            //seriesSettings: {
        //            //    line: {
        //            //        pointMark: {
        //            //            drawWidth: 20
        //            //        }
        //            //    }
        //            //},
        //            swapLocation: true,
        //            axisTickText: {
        //                format: function (text, axis, chart) {
        //                    return text;
        //                },
        //                style: {
        //                    color: '#000000'
        //                },
        //                textAngle: 0
        //            }
        //        }
        //        ],
        //        dataSeries: [{
        //            seriesType: 'line',
        //            pointMark: {
        //                enabled: false,
        //                drawWidth: 0
        //            },
        //            axis: 0,
        //            tooltipSettings: {
        //                enabled: true,
        //                axisMarkers: {
        //                    enabled: true,
        //                    //mode: 'xy',
        //                    color: 'red',
        //                    width: 1,
        //                    zIndex: 3
        //                },
        //                customPointText: function (point, chart, text) {
        //                    return shield.format(
        //                        '<span><b> Company Percent Change in 12-Month Moving Average: {value}</b></span>',
        //                        {
        //                            value: point.y
        //                        }
        //                    );
        //                }
        //            },
        //            collectionAlias: "Company Division Data",
        //            data: $.map(combinationObject, function (item) {
        //                if (item.Code == "Company") {
        //                    return { y: item.C12BY12 }// //return { y: item.C12BY12 }
        //                }
        //            })

        //        }
        //        , {
        //            seriesType: 'line',
        //            axisY: 1,
        //            tooltipSettings: {
        //                enabled: true,
        //                axisMarkers: {
        //                    enabled: true,
        //                    //mode: 'xy',
        //                    color: 'red',
        //                    width: 1,
        //                    zIndex: 3
        //                },
        //                customPointText: function (point, chart, text) {
        //                    return shield.format(
        //                        '<span><b> Indicator Data Percent Change in 12-Month Moving Average: {value}</b></span>',
        //                        {
        //                            value: point.y
        //                        }
        //                    );
        //                }
        //            },
        //            pointMark: {
        //                enabled: false,
        //                drawWidth: 0
        //            },
        //            color: 'green',
        //            collectionAlias: "Indicator History",
        //            data: $.map(combinationObject, function (item) {
        //                if (item.Code == "Indicator" && item.Forecast == false)
        //                    return { y: item.C12BY12 }                   //return { y: item.C12BY12 }
        //                else if (item.Code == "Indicator" && item.Forecast == true)
        //                    return { y: null }
        //            })
        //        }
        //        , {
        //            seriesType: 'scatter',
        //            axisY: 1,
        //            tooltipSettings: {
        //                enabled: true,
        //                axisMarkers: {
        //                    enabled: true,
        //                    color: 'red',
        //                    width: 1,
        //                    zIndex: 3
        //                },
        //                customPointText: function (point, chart, text) {
        //                    return shield.format(
        //                        '<span><b> Indicator Forecasted 12-Month Moving Average: {value}</b></span>',
        //                        {
        //                            value: point.y
        //                        }
        //                    );
        //                }
        //            },
        //            pointMark: {
        //                enabled: true,
        //                drawWidth: 0
        //            },
        //            color: 'lightgreen',
        //            collectionAlias: "Indicator Forecast",
        //            // data: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 5.9, 11.0, 20.0, -7.8, 9.0]
        //            data: $.map(combinationObject, function (item) {
        //                //  console.log(item)
        //                if (item.Code == "Indicator" && item.Forecast == false)
        //                    return { y: null }
        //                else if (item.Code == "Indicator" && item.Forecast == true)
        //                    return { y: item.C12BY12 }
        //            })
        //        }
        //        ],
        //        chartLegend: {
        //            enabled: true,
        //            align: 'center'
        //        },
        //        events: {//Called on Chart load completed
        //            load: function (event) {
        //                ajaxindicatorstop();
        //            }
        //        }
        //    });
        //}

        //Loads the Download Data chart for selcted Company and Indicator in DataCast Tab
        function LoadDDChart() {
            $("#chartDownloadData").shieldChart({
                theme: "light",
                height: 500,
                width: 800,
                exportOptions: {
                    image: true,
                    print: true
                },
                axisX: [{
                    drawWidth: 1,
                    ticksRepeat: 36,// For 3 years duaration as for the reference site
                    categoricalValues: $.map(combinationObject, function (item) {
                        if (item.Code == "Indicator") {
                            var dateValue = new Date(parseInt(item.MonthYear.substr(6)));
                            var monthName = GetMonthName(dateValue.getMonth() + 1);
                            var date = monthName + '  ' + dateValue.getFullYear()
                            return date;
                        }
                    }),
                    title: {
                        text: 'Years',
                        style: {
                            color: '#000000'
                        }
                    },
                    axisTickText: {
                        // return a new text for the ticks of the X-axis
                        format: function (text, axis, chart) {
                            var string = text;
                            string = string.split("  ");
                            return string[1];//Here 0-index will have month name and 1-index will have year//dateValue.getFullYear();
                        },
                        style: {
                            color: '#000000'
                        }
                    }
                }],
                axisY: [{
                    min: CompanyMinValue,
                    max: CompanyMaxValue,
                    ticksRepeat: parseInt((Math.abs(CompanyMinValue) + CompanyMaxValue) / 8),
                    title: {
                        text: 'Company 12/12 (Annual Growth Rate)',
                        style: {
                            color: '#000000'
                        }
                    },
                    axisTickText: {
                        style: {
                            color: '#000000'
                        }
                    }
                }
                , {
                    inverseOrder: isInvertedVal,
                    min: IndicatorMinValue,
                    max: IndicatorMaxValue,
                    ticksRepeat: parseInt((Math.abs(IndicatorMinValue) + IndicatorMaxValue) / 8),
                    title: {
                        text: 'Indicator 12/12 (Annual Growth Rate)',
                        style: {
                            color: '#000000'
                        }
                    },
                    swapLocation: true,
                    axisTickText: {
                        style: {
                            color: '#000000'
                        },
                        textAngle: 0
                    }
                }
                ],
                dataSeries: [{
                    seriesType: 'line',
                    pointMark: {
                        enabled: false,
                        drawWidth: 0
                    },
                    axis: 0,
                    tooltipSettings: {
                        enabled: true,
                        axisMarkers: {
                            enabled: true,
                            color: 'red',
                            width: 1,
                            zIndex: 3
                        },
                        customPointText: function (point, chart, text) {
                            return shield.format(
                                '<span><b> Company Percent Change in 12-Month Moving Average: {value}</b></span>',
                                {
                                    value: point.y
                                }
                            );
                        }
                    },
                    collectionAlias: "Company Division Data",
                    data: $.map(combinationObject, function (item) {
                        if (item.Code == "Company") {
                            return { y: item.C12BY12 }
                        }
                    })

                }
                , {
                    seriesType: 'line',
                    axisY: 1,
                    tooltipSettings: {
                        enabled: true,
                        axisMarkers: {
                            enabled: true,
                            color: 'red',
                            width: 1,
                            zIndex: 3
                        },
                        customPointText: function (point, chart, text) {
                            return shield.format(
                                '<span><b> Indicator Data Percent Change in 12-Month Moving Average: {value}</b></span>',
                                {
                                    value: point.y
                                }
                            );
                        }
                    },
                    pointMark: {
                        enabled: false,
                        drawWidth: 0
                    },
                    color: 'green',
                    collectionAlias: "Indicator History",
                    data: $.map(combinationObject, function (item) {
                        if (item.Code == "Indicator" && item.Forecast == false)
                            return { y: item.C12BY12 }                   //return { y: item.C12BY12 }
                        else if (item.Code == "Indicator" && item.Forecast == true)
                            return { y: null }
                    })
                }
                , {
                    seriesType: 'scatter',
                    axisY: 1,
                    tooltipSettings: {
                        enabled: true,
                        axisMarkers: {
                            enabled: true,
                            color: 'red',
                            width: 1,
                            zIndex: 3
                        },
                        customPointText: function (point, chart, text) {
                            return shield.format(
                                '<span><b> Indicator Forecasted 12-Month Moving Average: {value}</b></span>',
                                {
                                    value: point.y
                                }
                            );
                        }
                    },
                    pointMark: {
                        enabled: true,
                        drawWidth: 0
                    },
                    color: 'lightgreen',
                    collectionAlias: "Indicator Forecast",
                    data: $.map(combinationObject, function (item) {
                        if (item.Code == "Indicator" && item.Forecast == false)
                            return { y: null }
                        else if (item.Code == "Indicator" && item.Forecast == true)
                            return { y: item.C12BY12 }
                    })
                }
                ],
                chartLegend: {
                    enabled: true,
                    align: 'center'
                },
                events: {//Called on Chart load completed
                    load: function (event) {
                        ajaxindicatorstop();
                    }
                }
            });

        }

        //Loads the Internal Data Trends chart for selcted Company and Caluculation Type in InternalDataTrends Tab
        function LoadIDTChart() {
            $("#chartIDT").shieldChart({
                theme: "light",
                height: 500,
                //  width: 800,
                exportOptions: {
                    image: false,
                    print: false
                },
                axisX: [{
                    drawWidth: 1,
                    ticksRepeat: 24,// For 2 years duaration as for the reference site
                    categoricalValues: $.map(IDTcombinationObject, function (item) {
                        // if (item.Code == "Indicator") {
                        var dateValue = new Date(parseInt(item.MonthYear.substr(6)));
                        var monthName = GetMonthName(dateValue.getMonth() + 1);
                        var date = monthName + '  ' + dateValue.getFullYear()
                        return date;
                        // }
                    }),
                    title: {
                        text: 'Years',
                        style: {
                            color: '#000000'
                        }
                    },
                    axisTickText: {
                        // return a new text for the ticks of the X-axis
                        format: function (text, axis, chart) {
                            var string = text;
                            string = string.split("  ");
                            return string[1];//Here 0-index will have month name and 1-index will have year//dateValue.getFullYear();
                        },
                        style: {
                            color: '#000000'
                        }
                    }
                }],
                axisY: [{
                    min: 0,//MM3MinValue,
                    max: MM3MaxValue,
                    // ticksRepeat: Math.round((Math.abs(MM3MinValue) + MM3MaxValue) / 8),
                    ticksRepeat: (Math.abs(MM3MinValue) + MM3MaxValue) / 8,
                    title: {
                        text: '3 MMA or 3 MMT',
                        style: {
                            color: '#000000'
                        }
                    },
                    axisTickText: {
                        style: {
                            color: '#000000'
                        }
                    }
                }
                , {
                    //inverseOrder: isInvertedVal,
                    min: 0,//MM12MinValue,
                    max: MM12MaxValue,
                    // ticksRepeat: Math.round((Math.abs(MM12MinValue) + MM12MaxValue) / 8),
                    //ticksRepeat: (Math.abs(MM3MinValue) + MM3MaxValue) * 4 / 8,
                    ticksRepeat: MM12Scale,
                    title: {
                        text: '12 MMA or MMT',
                        style: {
                            color: '#000000'
                        }
                    },
                    swapLocation: true,
                    axisTickText: {
                        style: {
                            color: '#000000'
                        },
                        textAngle: 0
                    }
                }
                ],
                dataSeries: [{
                    seriesType: 'line',
                    pointMark: {
                        enabled: false,
                        drawWidth: 0
                    },
                    axis: 0,
                    tooltipSettings: {
                        enabled: true,
                        axisMarkers: {
                            enabled: true,
                            color: 'red',
                            width: 1,
                            zIndex: 3
                        },
                        customPointText: function (point, chart, text) {
                            return shield.format(
                                '<span><b> 3 Monthly Moving ' + IDTTooltipText + ' : {value}</b></span>',
                                {
                                    value: point.y
                                }
                            );
                        }
                    },
                    color: 'green',
                    collectionAlias: "3 Monthly Moving " + IDTTooltipText,
                    data: $.map(IDTcombinationObject, function (item) {
                        if (caluculationTypeVal == "0" || caluculationTypeVal == 0) {
                            return { y: item.C3MMT }
                        }
                        else if (caluculationTypeVal == "1" || caluculationTypeVal == 1) {
                            return { y: item.C3MMA }
                        }
                    })

                }
                , {
                    seriesType: 'steparea',//'bar',
                    axisY: 1,
                    tooltipSettings: {
                        enabled: true,
                        axisMarkers: {
                            enabled: true,
                            color: 'red',
                            width: 1,
                            zIndex: 3
                        },
                        customPointText: function (point, chart, text) {
                            return shield.format(
                                '<span><b> 12 Monthly Moving ' + IDTTooltipText + ': {value}</b></span>',
                                {
                                    value: point.y
                                }
                            );
                        }
                    },
                    pointMark: {
                        enabled: false,
                        drawWidth: 3
                    },

                    collectionAlias: "12 Monthly Moving " + IDTTooltipText,
                    data: $.map(IDTcombinationObject, function (item) {
                        if (caluculationTypeVal == "0" || caluculationTypeVal == 0)
                            return { y: item.C12MMT }
                        else if (caluculationTypeVal == "1" || caluculationTypeVal == 1)
                            return { y: item.C12MMA }
                    })
                }
                ],
                chartLegend: {
                    enabled: true,
                    align: 'center'
                },
                events: {//Called on Chart load completed
                    load: function (event) {
                        ajaxindicatorstop();
                    }
                }
            });

        }

        //Loads Internal Rates of change Data Tab
        function LoadIRCChart() {
            //  e.preventDefault();
            $("#chartIRC").shieldChart({
                theme: "light",
                height: 500,
                //  width: 800,
                exportOptions: {
                    image: false,
                    print: false
                },
                axisX: [{
                    drawWidth: 1,
                    ticksRepeat: 24,// For 2 years duaration as for the reference site
                    categoricalValues: $.map(IRCcombinationObject1, function (item) {
                        var dateValue = new Date(parseInt(item.MOnthYear.substr(6)));
                        var monthName = GetMonthName(dateValue.getMonth() + 1);
                        var date = monthName + '  ' + dateValue.getFullYear()
                        return date;
                    }),
                    title: {
                        text: 'Years',
                        style: {
                            color: '#000000'
                        }
                    },
                    axisTickText: {
                        // return a new text for the ticks of the X-axis
                        format: function (text, axis, chart) {
                            // console.log("text " + text);
                            if (text === undefined) {
                                return '0000';
                            }
                            else {
                                var string = text;
                                string = string.split("  ");
                                return string[1];//Here 0-index will have month name and 1-index will have year//dateValue.getFullYear();
                            }
                        },
                        style: {
                            color: '#000000'
                        }
                    }
                }],
                axisY: [{
                    min: FirstMinCompany,
                    max: FirstMaxCompany,
                    ticksRepeat: Math.round((Math.abs(FirstMinCompany) + FirstMaxCompany) / 8),
                    title: {
                        text: 'Dataset 1 Calculation',
                        style: {
                            color: '#000000'
                        }
                    },
                    axisTickText: {
                        style: {
                            color: '#000000'
                        }
                    }
                }
                , {
                    min: SecondMinCompany,
                    max: SecondMaxCompany,
                    ticksRepeat: Math.round((Math.abs(SecondMinCompany) + SecondMaxCompany) / 8),
                    title: {
                        text: 'Dataset 2 Calculation',
                        style: {
                            color: '#000000'
                        }
                    },
                    swapLocation: true,
                    axisTickText: {
                        style: {
                            color: '#000000'
                        },
                        textAngle: 0
                    }
                }
                ],
                dataSeries: [{
                    seriesType: 'line',
                    pointMark: {
                        enabled: false,
                        drawWidth: 0
                    },
                    axis: 0,
                    tooltipSettings: {
                        enabled: true,
                        axisMarkers: {
                            enabled: true,
                            color: 'red',
                            width: 1,
                            zIndex: 3
                        },
                        customPointText: function (point, chart, text) {
                            return shield.format(
                                '<span><b> ' + IRCdataSetName1 + ' for ' + IRCTooltip1Text + ' : {value}</b></span>',
                                //Dataset1 name + ' for ' + first caluculation type selected
                                {
                                    value: point.y
                                }
                            );
                        }
                    },
                    color: 'green',
                    collectionAlias: IRCdataSetName1 + ' for ' + IRCTooltip1Text,
                    data: $.map(IRCcombinationObject1, function (item) {
                        return { y: item.Y1Value }
                    })
                }
                , {
                    seriesType: 'line',
                    axisY: 1,
                    tooltipSettings: {
                        enabled: true,
                        axisMarkers: {
                            enabled: true,
                            color: 'red',
                            width: 1,
                            zIndex: 3
                        },
                        customPointText: function (point, chart, text) {
                            return shield.format(
                                 '<span><b> ' + IRCdataSetName2 + ' for ' + IRCTooltip2Text + ' : {value}</b></span>',
                                //Dataset1 name + ' for ' + first caluculation type selected
                                {
                                    value: point.y
                                }
                            );
                        }
                    },
                    pointMark: {
                        enabled: false,
                        drawWidth: 3
                    },

                    collectionAlias: IRCdataSetName2 + ' for ' + IRCTooltip2Text,
                    data: $.map(IRCcombinationObject1, function (item) {
                        return { y: item.Y2Value }
                    })
                }
                ],
                chartLegend: {
                    enabled: true,
                    align: 'center'
                },
                events: {//Called on Chart load completed
                    load: function (event) {
                        ajaxindicatorstop();
                    }
                }
            });
        }

        function ajaxindicatorstart() {
            // alert("entererd");
            if ($('body').find('#loadingDiv').attr('id') != 'loadingDiv') {
                var loadingString = '<div id="loadingDiv" class="modal1"><div id="loading-image" class="center"><img src="../assets/img/loader.gif" alt="Loading..." /></div></div>';
                $('body').append(loadingString);
                $('#loadingDiv .bg').height('100%');
                $('#loadingDiv').fadeIn(300);
                $('body').css('cursor', 'wait');
                $('body').css('cursorDD', 'wait');
            }
        };

        function ajaxindicatorstop() {
            $('#loadingDiv .bg').height('100%');
            $('#loadingDiv').remove();
            $('body').css('cursor', 'default');
            $('body').css('cursorDD', 'default');
        }

        var divisionID = "";
        var isDataPortalAdmin = "";
        $(document).ready(function (e) {



            //// Handle click on "Select all" control
            //$('#selectAll').on('click', function(){
            //    alert(1);
            //    $('.CBX').prop('checked', this.checked);
            //});
            ajaxindicatorstart();
            $(".spnIndicatorView").text("Normal View");
            $(".spnIDTCalculationType").text("Monthly Moving Total");

            //$('#CorelationLeadLagList').DataTable({
            //    responsive: true
            //});
            //$('#CorelationLeadLagListIndicationSummary').DataTable({
            //    responsive: true
            //});

            //$('[data-toggle="tab-3"]').on('shown.bs.tab', function (e) {
            //    $($.fn.dataTable.tables(true)).DataTable()
            //       .columns.adjust()
            //       .responsive.recalc();
            //});

            //Account and division related stuff
            //  _CompanyId = window.localStorage.getItem('CompanyID');//5916; //
            $("#lblCompanyName").html(_CompanyId);
             $("#lblDivision").html(window.localStorage.getItem('DivisionID'));


            RegisterPopupScript();//For bPopup script
            //bPopup script Added By Vishnu, to overwrite regular browser alerts
            function RegisterPopupScript() {
                (function (c) { c.fn.bPopup = function (A, E) { function L() { a.contentContainer = c(a.contentContainer || b); switch (a.content) { case "iframe": var d = c('<iframe class="b-iframe" ' + a.iframeAttr + "></iframe>"); d.appendTo(a.contentContainer); t = b.outerHeight(!0); u = b.outerWidth(!0); B(); d.attr("src", a.loadUrl); l(a.loadCallback); break; case "image": B(); c("<img />").load(function () { l(a.loadCallback); F(c(this)) }).attr("src", a.loadUrl).hide().appendTo(a.contentContainer); break; default: B(), c('<div class="b-ajax-wrapper"></div>').load(a.loadUrl, a.loadData, function (d, b, e) { l(a.loadCallback, b); F(c(this)) }).hide().appendTo(a.contentContainer) } } function B() { a.modal && c('<div class="b-modal ' + e + '"></div>').css({ backgroundColor: a.modalColor, position: "fixed", top: 0, right: 0, bottom: 0, left: 0, opacity: 0, zIndex: a.zIndex + v }).appendTo(a.appendTo).fadeTo(a.speed, a.opacity); C(); b.data("bPopup", a).data("id", e).css({ left: "slideIn" == a.transition || "slideBack" == a.transition ? "slideBack" == a.transition ? f.scrollLeft() + w : -1 * (x + u) : m(!(!a.follow[0] && n || g)), position: a.positionStyle || "absolute", top: "slideDown" == a.transition || "slideUp" == a.transition ? "slideUp" == a.transition ? f.scrollTop() + y : z + -1 * t : p(!(!a.follow[1] && q || g)), "z-index": a.zIndex + v + 1 }).each(function () { a.appending && c(this).appendTo(a.appendTo) }); G(!0) } function r() { a.modal && c(".b-modal." + b.data("id")).fadeTo(a.speed, 0, function () { c(this).remove() }); a.scrollBar || c("html").css("overflow", "auto"); c(".b-modal." + e).unbind("click"); f.unbind("keydown." + e); k.unbind("." + e).data("bPopup", 0 < k.data("bPopup") - 1 ? k.data("bPopup") - 1 : null); b.undelegate(".bClose, ." + a.closeClass, "click." + e, r).data("bPopup", null); clearTimeout(H); G(); return !1 } function I(d) { y = k.height(); w = k.width(); h = D(); if (h.x || h.y) clearTimeout(J), J = setTimeout(function () { C(); d = d || a.followSpeed; var e = {}; h.x && (e.left = a.follow[0] ? m(!0) : "auto"); h.y && (e.top = a.follow[1] ? p(!0) : "auto"); b.dequeue().each(function () { g ? c(this).css({ left: x, top: z }) : c(this).animate(e, d, a.followEasing) }) }, 50) } function F(d) { var c = d.width(), e = d.height(), f = {}; a.contentContainer.css({ height: e, width: c }); e >= b.height() && (f.height = b.height()); c >= b.width() && (f.width = b.width()); t = b.outerHeight(!0); u = b.outerWidth(!0); C(); a.contentContainer.css({ height: "auto", width: "auto" }); f.left = m(!(!a.follow[0] && n || g)); f.top = p(!(!a.follow[1] && q || g)); b.animate(f, 250, function () { d.show(); h = D() }) } function M() { k.data("bPopup", v); b.delegate(".bClose, ." + a.closeClass, "click." + e, r); a.modalClose && c(".b-modal." + e).css("cursor", "pointer").bind("click", r); N || !a.follow[0] && !a.follow[1] || k.bind("scroll." + e, function () { if (h.x || h.y) { var d = {}; h.x && (d.left = a.follow[0] ? m(!g) : "auto"); h.y && (d.top = a.follow[1] ? p(!g) : "auto"); b.dequeue().animate(d, a.followSpeed, a.followEasing) } }).bind("resize." + e, function () { I() }); a.escClose && f.bind("keydown." + e, function (a) { 27 == a.which && r() }) } function G(d) { function c(e) { b.css({ display: "block", opacity: 1 }).animate(e, a.speed, a.easing, function () { K(d) }) } switch (d ? a.transition : a.transitionClose || a.transition) { case "slideIn": c({ left: d ? m(!(!a.follow[0] && n || g)) : f.scrollLeft() - (u || b.outerWidth(!0)) - 200 }); break; case "slideBack": c({ left: d ? m(!(!a.follow[0] && n || g)) : f.scrollLeft() + w + 200 }); break; case "slideDown": c({ top: d ? p(!(!a.follow[1] && q || g)) : f.scrollTop() - (t || b.outerHeight(!0)) - 200 }); break; case "slideUp": c({ top: d ? p(!(!a.follow[1] && q || g)) : f.scrollTop() + y + 200 }); break; default: b.stop().fadeTo(a.speed, d ? 1 : 0, function () { K(d) }) } } function K(d) { d ? (M(), l(E), a.autoClose && (H = setTimeout(r, a.autoClose))) : (b.hide(), l(a.onClose), a.loadUrl && (a.contentContainer.empty(), b.css({ height: "auto", width: "auto" }))) } function m(a) { return a ? x + f.scrollLeft() : x } function p(a) { return a ? z + f.scrollTop() : z } function l(a, e) { c.isFunction(a) && a.call(b, e) } function C() { z = q ? a.position[1] : Math.max(0, (y - b.outerHeight(!0)) / 2 - a.amsl); x = n ? a.position[0] : (w - b.outerWidth(!0)) / 2; h = D() } function D() { return { x: w > b.outerWidth(!0), y: y > b.outerHeight(!0) } } c.isFunction(A) && (E = A, A = null); var a = c.extend({}, c.fn.bPopup.defaults, A); a.scrollBar || c("html").css("overflow", "hidden"); var b = this, f = c(document), k = c(window), y = k.height(), w = k.width(), N = /OS 6(_\d)+/i.test(navigator.userAgent), v = 0, e, h, q, n, g, z, x, t, u, J, H; b.close = function () { r() }; b.reposition = function (a) { I(a) }; return b.each(function () { c(this).data("bPopup") || (l(a.onOpen), v = (k.data("bPopup") || 0) + 1, e = "__b-popup" + v + "__", q = "auto" !== a.position[1], n = "auto" !== a.position[0], g = "fixed" === a.positionStyle, t = b.outerHeight(!0), u = b.outerWidth(!0), a.loadUrl ? L() : B()) }) }; c.fn.bPopup.defaults = { amsl: 50, appending: !0, appendTo: "body", autoClose: !1, closeClass: "b-close", content: "ajax", contentContainer: !1, easing: "swing", escClose: !0, follow: [!0, !0], followEasing: "swing", followSpeed: 500, iframeAttr: 'scrolling="no" frameborder="0"', loadCallback: !1, loadData: !1, loadUrl: !1, modal: !0, modalClose: !0, modalColor: "transparent", onClose: !1, onOpen: !1, opacity: .7, position: ["auto", "auto"], positionStyle: "absolute", scrollBar: !0, speed: 250, transition: "fadeIn", transitionClose: !1, zIndex: 9997 } })(jQuery);
            }



            // By Raghuveer on 2 August 2017 for Show First View Popup
            $("#chkShowPopup").click(function() {
                if($(this).is(':checked'))
                {
                    window.localStorage.setItem('PopupStatus','0');
                    $("#FirstViewPopup").hide();
                }
                else
                {
                    window.localStorage.setItem('PopupStatus','1');
                    $("#FirstViewPopup").hide();
                }

            });

            // By Raghuveer on 26 July 2017 for Business Phase functionality
            $("#chkBusinessPhase").click(function() {



                if($(this).is(':checked'))
                {
                    if(window.localStorage.getItem('PopupStatus')==null || window.localStorage.getItem('PopupStatus')=='1')
                    {
                        $("#FirstViewPopup").show();
                    }
                    else
                    {
                        $("#FirstViewPopup").hide();
                    }
                    $("#spnBusiness").show();
                    CheckZeroLineForBusinessPhase();
                }
                else
                {
                    $("#spnBusiness").hide();
                    CheckZeroLine();
                }
            });

            // To load divisons of selected Account
            // $("#ddlAccounts").change(function () {
            function LoadDivisions() {
                var accountid =  _CompanyId;//$('#ddlAccounts').val();
                if (accountid != '' && accountid != '0') {
                    var url = 'GetDivisionsByAccountID/';
                    var modelobj = {
                        id: accountid
                    }
                    $.getJSON(url, modelobj,
                                  function (optionsData) {
                                      $.each(optionsData, function (index, itemData) {

                                          if(itemData.Value== divisionID)
                                          {
                                              $("#lblDivision").html(itemData.Text);
                                          }

                                      });
                                      //  select.empty();
                                      //select.append($('<option/>', {
                                      //    value: 0,
                                      //    text: "Select"
                                      //}));
                                      //$.each(optionsData, function (index, itemData) {
                                      //    select.append($('<option/>', {
                                      //        value: itemData.Value,
                                      //        text: itemData.Text
                                      //    }));
                                      //});
                                      //if (divisionID != "" && divisionID != "null" && divisionID != null) {
                                      //    $("#ddlDivision").val(divisionID);
                                      //}
                                      //if (isDataPortalAdmin == true || isDataPortalAdmin == "true" || isDataPortalAdmin == "TRUE") {
                                      //    if (window.localStorage.getItem('DivisionID') != null && window.localStorage.getItem('DivisionID') != "null")
                                      //        $("#ddlDivision").val(window.localStorage.getItem('DivisionID'));
                                      //}
                                  });
                    //if (isDataPortalAdmin == true || isDataPortalAdmin == "true" || isDataPortalAdmin == "TRUE") {
                    //    if (window.localStorage.getItem('DivisionID') != null && window.localStorage.getItem('DivisionID') != "null")
                    //       // $("#ddlDivision").val(window.localStorage.getItem('DivisionID'));
                    //        $("#lblDivision").val(window.localStorage.getItem('DivisionID'));
                    //   // alert(window.localStorage.getItem('DivisionID'));
                    //}

                }
                LoadDataSets();
                //    if (isDataPortalAdmin == true || isDataPortalAdmin == "true" || isDataPortalAdmin == "TRUE") {
                //        // window.localStorage.setItem('CompanyID', $("#ddlAccounts").val());
                //        window.localStorage.setItem('CompanyID', _CompanyId);
                //        window.localStorage.setItem('DivisionID', window.localStorage.getItem('DivisionID'));
                //    }
                //    else {
                //        localStorage.clear();
                //    }
            }
            //);


            _CompanyId = $("#hdnCompanyID").val();//window.localStorage.getItem('CompanyID'); //5916//2857;//
            divisionID = $("#hdnDivisionID").val();//window.localStorage.getItem('DivisionID'); //41//247;//

            var userID = $("#hdnUserID").val();//window.localStorage.getItem('UserID');
            isDataPortalAdmin = $("#hdnIsDataPortalAdmin").val(); //true;//
          

            if (_CompanyId != "" && _CompanyId != "null" && _CompanyId != null) {
                // $("#ddlAccounts").val(companyID);
                // $("#ddlAccounts").trigger('change');
                LoadDivisions();
            }


            if (divisionID != "" && divisionID != "null" && divisionID != null) {
                //  $("#ddlDivision").val(divisionID);
                if (isDataPortalAdmin == true || isDataPortalAdmin == "true" || isDataPortalAdmin == "TRUE") { //enable the dropdowns
                    //$("#ddlAccounts").attr('disabled', false);
                    // $("#ddlDivision").attr('disabled', false);
                }
                else if (divisionID != "0" && divisionID != "") {
                    // $("#ddlAccounts").attr('disabled', true);
                    //  $("#ddlDivision").attr('disabled', true);
                }
                else {
                    // $("#ddlAccounts").attr('disabled', true);
                    // $("#ddlDivision").attr('disabled', true);
                }
                //setTimeout(function () {
                //    LoadDataSets();
                //}, 1500)
            }
            else if (divisionID == null) {
                // $("#ddlAccounts").attr('disabled', true);
                // $("#ddlDivision").attr('disabled', true);
            }



            //Account and division related stuff End
            var statesAvailable = @Html.Raw(ViewBag.Accounts);

            for(var i=0;i<statesAvailable.length;i++)
            {
                if(_CompanyId==statesAvailable[i].RecordId)
                {

                    $("#lblCompanyName").html(statesAvailable[i].AccountName);
                }
            }


            @*var statesAvailable = @Html.Raw(ViewBag.Accounts);
            for(var i=0;i<statesAvailable.length;i++)
            {
                if(divisionID==statesAvailable[i].RecordId)
                {

                    $("#lblDivision").html(statesAvailable[i].AccountName);
                }
            }*@








            $(".QueryBox").val(0);
            $(document).on('click', '.cursor', function (e) {
                ajaxindicatorstart();

                var doc = document.getElementById("divIndicator");
                for (var i = 0; i < doc.childNodes.length; i++) {//for removing the active class of previous selection
                    if (doc.childNodes[i].className == "row cursor active blocked") {
                        $(doc.childNodes[i]).removeClass('row cursor active blocked');
                        $(doc.childNodes[i]).addClass('row cursor');
                        break;
                    }
                }

                if ($(this).data('indicatorshotrcode') != indicatorShotrCode) {
                    $(this).addClass('active blocked')
                    // console.log($(this)[0].firstChild.innerText)
                    $(".spnIndicatorName").text($(this)[0].firstChild.innerText);

                    indicatorShotrCode = $(this).data('indicatorshotrcode');//Assign the value to variable and reload the chart
                    companyCode=$(this).data('companycode');//Assign the value to variable and reload the chart

                    //khaja
                    ticksRepeatCompany = 0;
                    ticksRepeatIndicator = 0;
                    CompanyMaxvalueLine = 0;
                    IndicatorMaxvalueLine = 0;
                    CompanyIndicatorMaxLineDifference = 0;
                    CompanyZeroLine = 0;
                    IndicatorZeroLine = 0;
                    CompanyZeroLineFlag = false;
                    IndicatorZeroLineFlag = false;
                    CompanyNeededLines = 0;
                    IndicatorNeededLines = 0;
                    ZeroLinesAlign = false;
                    IndicatorMinValueNew = "", IndicatorMaxValueNew = "";
                    CompanyMinValueNew = "", CompanyMaxValueNew = "";
                    k = 0;
                    i = 0;
                    j = 0;
                    //IndicatorMinValueFlag = false;
                    //khaja
                    LoadChartData();
                }
            })

            var indicatorShotrCodeDD = ""; var companyCodeDD = "";
            $(document).on('click', '.cursorDD', function (e) {

                ajaxindicatorstart();
                var doc = document.getElementById("divIndicatorDD");

                for (var i = 0; i < doc.childNodes.length; i++) {//for removing the active class of previous selection
                    if (doc.childNodes[i].className == "row cursorDD active") {
                        $(doc.childNodes[i]).removeClass('row cursorDD active');
                        $(doc.childNodes[i]).addClass('row cursorDD');
                        break;
                    }
                }

                if ($(this).data('indicatorshotrcode') != indicatorShotrCodeDD) {
                    $(this).addClass('active');
                    // console.log($(this)[0].firstChild.innerText)
                    $(".spnIndicatorName").text($(this)[0].firstChild.innerText);
                    indicatorShotrCodeDD = $(this).data('indicatorshotrcode');//Assign the value to variable and reload the chart
                    LocalIndicatorShortCode=$(this).data('indicatorshotrcode');
                    // alert($(this).data('indicatorshotrcode'));
                    LoadIndicatorDataForDownloadSection3();
                }
                ajaxindicatorstop();
            });


            $("#ddlDataSets").on('change', function (e) {
                e.preventDefault();
                dataSetID = $("#ddlDataSets").val();
                dataSetIDLocal= $("#ddlDataSets").val();
                $(".spnDataSetName").text($("#ddlDataSets option:selected").text());
                ajaxindicatorstart();

                $('#ShowFavorites').val(' Show Favorites List ');
                $('#SaveFavorites').val(' Save Favorites List ');
                FavListFlag = false;
                FavList = "";
                FavListName = "";
                FavListpaginate = "";
                SelFavName = "";
                $("#spnFavListName").text('');


                var oTable = $('#CorelationLeadLagList').dataTable();
                oTable.fnDraw();
                var bTable = $('#CorelationLeadLagListIndicationSummary').dataTable();
                bTable.fnDraw();


                var cTable = $('#dtFavList').dataTable();
                cTable.fnDraw();
                // LoadIndicatorsList();


            })

            $("#ddlDataSetsDD").on('change', function (e) {
                e.preventDefault();
                dataSetID = $("#ddlDataSetsDD").val();
                $(".spnDataSetName").text($("#ddlDataSetsDD option:selected").text());
                ajaxindicatorstart()
                // LoadIndicatorsListDownloadData();
                LoadIndicatorsListDownloadDataForMultipleCompanyDataSetsSection1();
                //  $("#ddlDataSetsIndList").trigger('change',true);

                ajaxindicatorstop();

            })



            $("#ddlDataSetsIndList").on('change', function (e) {
                e.preventDefault();
                ajaxindicatorstart();
                dataSetIDs = $("#ddlDataSetsIndList").val();
                multipleids = $("#ddlDataSetsIndList").val();

                $(".spnDataSetName").text($("#ddlDataSetsIndList option:selected").text());

                // alert(dataSetIDs);


                // LoadIndicatorsListDownloadDataForMultipleCompanyDataSets();
                // + $("#ddlDataSetsIndList").val()
                var cTable = $('#CorelationLeadLagListDownload').dataTable();
                cTable.fnDraw();
                //$("#divIndicatorDD").find(".cursorDD").trigger("click");
                ajaxindicatorstop();

            })

            $("input[name='radioInvert']").change(function () {
                ajaxindicatorstart();
                // Do something interesting here
                if ($(this).val() === '0') {//Normal View
                    isInvertedVal = false;
                    $(".spnIndicatorView").text("Normal View");
                } else if ($(this).val() === '1') {//Inverted View
                    isInvertedVal = true;
                    $(".spnIndicatorView").text("Inverted View");
                }
                $('#CorelationLeadLagList tbody tr.active').each(function () {
                    var oTable = $('#CorelationLeadLagList').dataTable();
                    var _this = this;
                    var aData = "";
                    var nRow = _this;
                    var aData = oTable.fnGetData(nRow);
                    companyCode=aData[3];
                    indicatorShotrCode = aData[4];
                    //khaja
                    ticksRepeatCompany = 0;
                    ticksRepeatIndicator = 0;
                    CompanyMaxvalueLine = 0;
                    IndicatorMaxvalueLine = 0;
                    CompanyIndicatorMaxLineDifference = 0;
                    CompanyZeroLine = 0;
                    IndicatorZeroLine = 0;
                    CompanyZeroLineFlag = false;
                    IndicatorZeroLineFlag = false;
                    CompanyNeededLines = 0;
                    IndicatorNeededLines = 0;
                    ZeroLinesAlign = false;
                    IndicatorMinValueNew = "", IndicatorMaxValueNew = "";
                    CompanyMinValueNew = "", CompanyMaxValueNew = "";
                    k = 0;
                    i = 0;
                    j = 0;
                    //IndicatorMinValueFlag = false;

                    LoadChartData();// To refetch the data with inverse flag value
                });
                // var oTable = $('#CorelationLeadLagList').dataTable();
                // var aData = oTable.fnGetData();
                // var aData = aData[0];
                //companyCode=aData[3];
                // indicatorShotrCode = aData[4];
                // LoadChartData();// To refetch the data with inverse flag value
            });

            //Handles Move indicator event in DataCast Tab
            $(".QueryBox").change(function () {
                ajaxindicatorstart();
                moveMonths = $(this).val();
                if(moveMonths == '' || moveMonths==null){
                    moveMonths=0; // Leaving empty text box from some other value should be treated as Zero months
                }
                //khaja
                ticksRepeatCompany = 0;
                ticksRepeatIndicator = 0;
                CompanyMaxvalueLine = 0;
                IndicatorMaxvalueLine = 0;
                CompanyIndicatorMaxLineDifference = 0;
                CompanyZeroLine = 0;
                IndicatorZeroLine = 0;
                CompanyZeroLineFlag = false;
                IndicatorZeroLineFlag = false;
                CompanyNeededLines = 0;
                IndicatorNeededLines = 0;
                ZeroLinesAlign = false;
                IndicatorMinValueNew = "", IndicatorMaxValueNew = "";
                CompanyMinValueNew = "", CompanyMaxValueNew = "";
                k = 0;
                i = 0;
                j = 0;
                //IndicatorMinValueFlag = false;
                //khaja
                LoadChartData();
            });

            //For Caluculation type change in IDT Tab
            $("input[name='radioCaluculationType']").change(function () {
                ajaxindicatorstart();
                if ($(this).val() === '0') {//Monthly Moving Total
                    caluculationTypeVal = 0;
                    IDTTooltipText = "Total";
                    $(".radioCaluculationType").text("Monthly Moving Total");
                    $(".spnIDTCalculationType").text("Monthly Moving Total");
                } else if ($(this).val() === '1') {// Monthly Moving Average
                    caluculationTypeVal = 1;
                    IDTTooltipText = "Average";
                    $(".radioCaluculationType").text("Monthly Moving Average");
                    $(".spnIDTCalculationType").text("Monthly Moving Average");

                }
                //LoadIDTChart();
                LoadIDTChartData();
            });

            //For Dataset change in IDT Tab
            $("#ddlIDTDataSets").on('change', function (e) {
                e.preventDefault();
                IDTdataSetName = $("#ddlIDTDataSets option:selected").text();
                $(".spnIDTDataSetName").text($("#ddlIDTDataSets option:selected").text());
                ajaxindicatorstart()
                LoadIDTChartData();

            })

            //For Dataset1 change in IRC Tab
            $("#ddlIRCDataSet1").on('change', function (e) {
                e.preventDefault();
                // IRCdataSetName1 = $("#ddlIRCDataSet1 option:selected").text() + " for " + $("#ddl1stCaluculation option:selected").text();//$("#ddlIRCDataSet1 option:selected").text();
                IRCdataSetName1 = $("#ddlIRCDataSet1 option:selected").text() ;
                $(".spnIRCDataSet1Name").text($("#ddlIRCDataSet1 option:selected").text() + " for " + $("#ddl1stCaluculation option:selected").text());
                ajaxindicatorstart()
                LoadIRCChartData();

            })

            //For 1st caluculation Type change in IRC Tab
            $("#ddl1stCaluculation").on('change', function (e) {
                e.preventDefault();
                //IRCTooltip1Text = $("#ddlIRCDataSet1 option:selected").text() + " for " + $("#ddl1stCaluculation option:selected").text();// $("#ddlIRCDataSet1 option:selected").text();
                IRCTooltip1Text = $("#ddl1stCaluculation option:selected").text();// $("#ddlIRCDataSet1 option:selected").text();
                $(".spnIRCDataSet1Name").text($("#ddlIRCDataSet1 option:selected").text() + " for " + $("#ddl1stCaluculation option:selected").text());
                ajaxindicatorstart();
                // LoadIRCChart(); //V
                LoadIRCChartData();

            })

            //For Dataset2 change in IRC Tab
            $("#ddlIRCDataSet2").on('change', function (e) {
                e.preventDefault();
                // IRCdataSetName2 = $("#ddlIRCDataSet2 option:selected").text() + " for " + $("#ddl2ndCaluculation option:selected").text();//$("#ddlIRCDataSet2 option:selected").text();
                IRCdataSetName2 = $("#ddlIRCDataSet2 option:selected").text() ;//+ " for " + $("#ddl2ndCaluculation option:selected").text();//$("#ddlIRCDataSet2 option:selected").text();
                $(".spnIRCDataSet2Name").text($("#ddlIRCDataSet2 option:selected").text() + " for " + $("#ddl2ndCaluculation option:selected").text());
                ajaxindicatorstart();

                LoadIRCChartData();

            })

            //For 2nd caluculation Type change in IRC Tab
            $("#ddl2ndCaluculation").on('change', function (e) {
                e.preventDefault();
                //  IRCTooltip2Text = $("#ddlIRCDataSet2 option:selected").text() + " for " + $("#ddl2ndCaluculation option:selected").text();//$("#ddlIRCDataSet2 option:selected").text();
                IRCTooltip2Text = $("#ddl2ndCaluculation option:selected").text();
                $(".spnIRCDataSet2Name").text($("#ddlIRCDataSet2 option:selected").text() + " for " + $("#ddl2ndCaluculation option:selected").text());
                ajaxindicatorstart();
                //   LoadIRCChart(); //V
                LoadIRCChartData();

            })

            // Created By: Vishnuvardhan Ammana, On:16-Feb-2016 for Printing Datacast chart
            $("#linkPrint").on("click", function () {//Created By: Vsihnu,Prints page contents with CSS
                $("#divLables").show();
                var left = ($(window).width() / 2) - (900 / 2), top = ($(window).height() / 2) - (600 / 2);
                var divContents = $("#divPrint").html();
                var printWindow = window.open("", "print", "width=" + $(window).width() + ", height=" + $(window).height() + ", top=" + top + ", left=" + left);
                printWindow.document.write('<html><head><title> ITR Economics</title>');
                var myStyle = document.styleSheets;
                for (var i = 0; i < myStyle.length; i++) {
                    if (myStyle[i].href != null && myStyle[i].href != "" && myStyle[i].href != 'null')
                        printWindow.document.write('<link rel="stylesheet" href="' + myStyle[i].href + '" type="text/css" />');
                }
                printWindow.document.write('</head><body >');

                printWindow.document.write(divContents);
                printWindow.document.write('</body></html>');
                printWindow.document.close();
                setTimeout(function () {
                    printWindow.print();
                }, 4500);//To Avoid Blank page printing in Google Chrome
                $("#divLables").hide();
            });
            //Created by Nishanth for downloading Pdf

            //var content = document.querySelectorAll("divToCapture")[0];
            //setTimeout(function(){screenCap();},0);

            //function screenCap(){
            //    html2canvas(content, {
            //        onrendered: function(canvas) {
            //            callbackFunc(canvas.toDataURL());
            //        }
            //    });
            //}

            $("#linkPrintPDF").on("click", function () {
                $("#divLables").show();
                var name = $("#spnIndicatorName").text();
                var div_content = document.querySelectorAll("#divPrint")[0];
                div_content.style.backgroundColor = "white";
                //make it as html5 canvasotab
                html2canvas(div_content).then(function(canvas) {
                    //change the canvas to jpeg image
                    var  image = canvas.toDataURL('image/jpeg');
                    var doc = new jsPDF("l", "pt", "a4");
                    doc.addImage(image, 'JPEG',0,50,850,500);
                    doc.save(name+".pdf");
                    $("#divLables").hide();

                });


            });
            //Created by Nishanth for downloading .png
            $("#linkPrintPNG").on("click", function () {
                $("#divLables").show();
                div_content = document.querySelectorAll("#divPrint");
                div_content[0].style.backgroundColor = "white";
                // var name = $("#spnDataSetName").text();
                var name = $("#spnIndicatorName").text();
                //make it as html5 canvas
                html2canvas(div_content).then(function(canvas) {
                    //change the canvas to jpeg image
                    var  image = canvas.toDataURL('image/jpeg');
                    var uri = 'data:application/octet-stream;' + decodeURIComponent(image);
                    var downloadLink = document.createElement("a");
                    downloadLink.href = uri;
                    downloadLink.download = name+".png";
                    document.body.appendChild(downloadLink);
                    downloadLink.click();
                    document.body.removeChild(downloadLink);
                    $("#divLables").hide();
                });
            });

            //Created by Nishanth for downloading Pdf
            $("#linkPrintPDFIRC").on("click", function () {
                //   $("#divLables").show();
                var name="";
                //alert($("#spnDataSetName").text());
                var D1 = $("#ddlIRCDataSet1").val();
                var D2 = $("#ddlIRCDataSet2").val();
                if(D1==D2)
                {
                    name="IRC_"+D1;
                }
                else
                {
                    name="IRC_"+D1+" "+D2;
                }


                // var name = $("#spnIndicatorName").text();

                //var divContents = $("#divPrint").html();
                div_content = document.querySelectorAll("#divPrintIRC");
                div_content[0].style.backgroundColor = "white";
                //make it as html5 canvasotab
                html2canvas(div_content).then(function(canvas) {
                    //change the canvas to jpeg image

                    var  image = canvas.toDataURL('image/jpeg');
                    //  alert(image);
                    // window.open(image);
                    var doc = new jsPDF("l", "pt", "a4");

                    // var width = 980;
                    //  var height = 500;
                    //   var pdf = new jsPDF("2", "pt", "letter");

                    doc.addImage(image, 'JPEG',0,50,850,500);
                    doc.save(name+".pdf");
                    // $("#divLables").hide();

                });


            });
            //Created by Nishnth for downloading .png
            $("#linkPrintPNGIRC").on("click", function () {
                //  $("#divLables").show();
                div_content = document.querySelectorAll("#divPrintIRC");
                div_content[0].style.backgroundColor = "white";
                //  var name = $("#spnDataSetName").text();
                var name="";
                //alert($("#spnDataSetName").text());
                var D1 = $("#ddlIRCDataSet1").val();
                var D2 = $("#ddlIRCDataSet2").val();
                if(D1==D2)
                {
                    name="IRC_"+D1;
                }
                else
                {
                    name="IRC_"+D1+" "+D2;
                }
                // var name = $("#spnIndicatorName").text();
                //make it as html5 canvas
                html2canvas(div_content).then(function(canvas) {
                    //change the canvas to jpeg image

                    var  image = canvas.toDataURL('image/jpeg');
                    //    image = image.append('<html><head><title> ITR Economics</title>');

                    // window.open(image);
                    var uri = 'data:application/octet-stream;' + decodeURIComponent(image);
                    var downloadLink = document.createElement("a");
                    downloadLink.href = uri;
                    downloadLink.download = name+".png";
                    document.body.appendChild(downloadLink);
                    downloadLink.click();
                    document.body.removeChild(downloadLink);
                    $("#divLables").hide();
                });
            });
            //Created by Nishanth for downloading Pdf
            $("#linkPrintPDFIDT").on("click", function () {
                $("#divLablesIDT").show();
                //alert($("#spnDataSetName").text());
                var name = $("#spnDataSetName").text();
                // alert($("#MMT").text());
                //    alert( $("input[name='radioCaluculationType']:checked").html());
                // alert($(".FIText").attr("title"));
                var months="";
                if($("input[name='radioCaluculationType']:checked").val()==0 && $(".FIText").attr("title")=="Monthly Moving Total")
                {
                    months = " MMT";

                }
                else
                {
                    months=" MMA"

                }
                //  alert(name);
                // var name = $("#spnIndicatorName").text();

                //var divContents = $("#divPrint").html();
                div_content = document.querySelectorAll("#divPrintIDT");
                div_content[0].style.backgroundColor = "white";
                //make it as html5 canvasotab
                html2canvas(div_content).then(function(canvas) {
                    //change the canvas to jpeg image

                    var  image = canvas.toDataURL('image/jpeg');
                    //  alert(image);
                    // window.open(image);
                    var doc = new jsPDF("l", "pt", "a4");

                    // var width = 980;
                    //  var height = 500;
                    //   var pdf = new jsPDF("2", "pt", "letter");

                    doc.addImage(image, 'JPEG',0,50,850,500);
                    // alert(name+months);
                    doc.save("IDT_"+name+months+".pdf");
                    $("#divLablesIDT").hide();

                });


            });
            //Created by Nishnth for downloading .png
            $("#linkPrintPNGIDT").on("click", function () {
                $("#divLablesIDT").show();
                div_content = document.querySelectorAll("#divPrintIDT");
                div_content[0].style.backgroundColor = "white";
                var name = $("#spnDataSetName").text();
                var months="";
                if($("input[name='radioCaluculationType']:checked").val()==0 && $(".FIText").attr("title")=="Monthly Moving Total")
                {
                    months = " MMT";

                }
                else
                {
                    months=" MMA"

                }
                // var name = $("#spnIndicatorName").text();
                //make it as html5 canvas
                html2canvas(div_content).then(function(canvas) {
                    //change the canvas to jpeg image

                    var  image = canvas.toDataURL('image/jpeg');
                    //    image = image.append('<html><head><title> ITR Economics</title>');

                    // window.open(image);
                    var uri = 'data:application/octet-stream;' + decodeURIComponent(image);
                    var downloadLink = document.createElement("a");
                    downloadLink.href = uri;
                    downloadLink.download = "IDT_"+name+months+".png";
                    document.body.appendChild(downloadLink);
                    downloadLink.click();
                    document.body.removeChild(downloadLink);
                    $("#divLablesIDT").hide();
                });
            });
            // Created By: Vishnuvardhan Ammana, On:16-Feb-2016 for Printing Internal Rates of Change chart
            $("#linkPrintIRC").on("click", function () {//Created By: Vsihnu,Prints page contents with CSS
                //$("#divLables").show();
                var left = ($(window).width() / 2) - (900 / 2), top = ($(window).height() / 2) - (600 / 2);
                var divContents = $("#divPrintIRC").html();
                var printWindow = window.open("", "print", "width=" + $(window).width() + ", height=" + $(window).height() + ", top=" + top + ", left=" + left);
                printWindow.document.write('<html><head><title> ITR Economics</title>');
                var myStyle = document.styleSheets;
                for (var i = 0; i < myStyle.length; i++) {
                    if (myStyle[i].href != null && myStyle[i].href != "" && myStyle[i].href != 'null')
                        printWindow.document.write('<link rel="stylesheet" href="' + myStyle[i].href + '" type="text/css" />');
                }
                printWindow.document.write('</head><body >');

                printWindow.document.write(divContents);
                printWindow.document.write('</body></html>');
                printWindow.document.close();
                setTimeout(function () {
                    printWindow.print();
                }, 2500);//To Avoid Blank page printing in Google Chrome
                //  $("#divLables").hide();
            });

            // Created By: Vishnuvardhan Ammana, On:16-Feb-2016 for Printing Internal Data Trends chart
            $("#linkPrintIDT").on("click", function () {//Created By: Vsihnu,Prints page contents with CSS
                $("#divLablesIDT").show();
                var left = ($(window).width() / 2) - (900 / 2), top = ($(window).height() / 2) - (600 / 2);
                var divContents = $("#divPrintIDT").html();
                var printWindow = window.open("", "print", "width=" + $(window).width() + ", height=" + $(window).height() + ", top=" + top + ", left=" + left);
                printWindow.document.write('<html><head><title> ITR Economics</title>');
                var myStyle = document.styleSheets;
                for (var i = 0; i < myStyle.length; i++) {
                    if (myStyle[i].href != null && myStyle[i].href != "" && myStyle[i].href != 'null')
                        printWindow.document.write('<link rel="stylesheet" href="' + myStyle[i].href + '" type="text/css" />');
                }
                printWindow.document.write('</head><body >');

                printWindow.document.write(divContents);
                printWindow.document.write('</body></html>');
                printWindow.document.close();
                setTimeout(function () {
                    printWindow.print();
                }, 2500);//To Avoid Blank page printing in Google Chrome
                $("#divLablesIDT").hide();
            });


            jQuery.fn.toCSVSection1 = function (link) {
                // alert(link);
                var $link = $(link);
                var data = $(this).first(); //Only one table
                var csvData = [];
                var tmpArr = [];
                var tmpStr = '';
                data.find("div.rowstyle").each(function () {
                    tmpArr = [];
                    $(this).find("div").each(function () {
                        if ($(this).text().match(/^-{0,1}\d*\.{0,1}\d+$/)) {
                            tmpArr.push(parseFloat($(this).text()));
                        } else {
                            tmpStr = $(this).text().replace(/"/g, '""');
                            tmpArr.push('"' + tmpStr + '"');
                        }
                    });
                    csvData.push(tmpArr.join(','));
                    //   }
                });
                var output = csvData.join('\n');
                var ua = window.navigator.userAgent;
                var msie = ua.indexOf("MSIE ");

                if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))// If Internet Explorer
                {
                    //alert("ie");
                    if (navigator.msSaveBlob) { // IE 10+
                        navigator.msSaveBlob(new Blob([output], { type: 'text/csv;charset=utf-8;' }), "CompanyData.csv");
                        // $link.attr("href", uri);
                    }
                }
                else
                {
                    //alert("other browser");
                    var uri = 'data:application/csv;charset=UTF-8,' + encodeURIComponent(output);
                    $link.attr("href", uri);
                }

            }


            $("#DownloadSection1").click(function () {
                $("div.downloadsection1").toCSVSection1(this);
            });


            jQuery.fn.toCSVSection2 = function (link) {
                var $link = $(link);
                var data = $(this).first(); //Only one table
                var csvData = [];
                var tmpArr = [];
                var tmpStr = '';
                data.find("tr").each(function () {
                    tmpArr = [];
                    $(this).find("td").each(function () {
                        if ($(this).text().match(/^-{0,1}\d*\.{0,1}\d+$/)) {
                            tmpArr.push(parseFloat($(this).text()));
                        } else {
                            tmpStr = $(this).text().replace(/"/g, '""');
                            tmpArr.push('"' + tmpStr + '"');
                        }
                    });
                    csvData.push(tmpArr.join(','));
                    //   }
                });
                var output = csvData.join('\n');
                var uri = 'data:application/csv;charset=UTF-8,' + encodeURIComponent(output);
                $link.attr("href", uri);
            }

            $("#DownloadSection2").click(function () {




                var cTable = $('#CorelationLeadLagListDownload').dataTable();
                var aData = cTable.fnGetData();
                var aData = aData[3];
                companyCode=aData[3];
                $.get("GetIndicatorSeriesForDownloadSection2", {CompanyShortCode: companyCode} , function(data){
                    // console.log(data);
                    //var str = data;
                    // var $link = $(link);
                    var data = $(data); //Only one table
                    var csvData = [];
                    var tmpArr = [];
                    var tmpStr = '';

                    data.find("tr").each(function () {
                        tmpArr = [];
                        $(this).find("th").each(function () {
                            if ($(this).text().match(/^-{0,1}\d*\.{0,1}\d+$/)) {
                                tmpArr.push(parseFloat($(this).text()));
                            } else {
                                tmpStr = $(this).text().replace(/"/g, '""');
                                tmpArr.push('"' + tmpStr + '"');
                            }
                        });
                        $(this).find("td").each(function () {
                            if ($(this).text().match(/^-{0,1}\d*\.{0,1}\d+$/)) {
                                tmpArr.push(parseFloat($(this).text()));
                            } else {
                                tmpStr = $(this).text().replace(/"/g, '""');
                                tmpArr.push('"' + tmpStr + '"');
                            }
                        });
                        csvData.push(tmpArr.join(','));
                        //   }
                    });

                    var output = csvData.join('\n');
                    var ua = window.navigator.userAgent;
                    var msie = ua.indexOf("MSIE ");

                    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))// If Internet Explorer
                    {

                        if (navigator.msSaveBlob) { // IE 10+
                            navigator.msSaveBlob(new Blob([output], { type: 'text/csv;charset=utf-8;' }), "IndicatorList.csv");
                        }
                    }
                    else  // If another browser, return 0
                    {

                        var uri = 'data:text/csv;charset=utf-8,' + encodeURIComponent(output);
                        var downloadLink = document.createElement("a");
                        downloadLink.href = uri;
                        downloadLink.download = "IndicatorList.csv";
                        document.body.appendChild(downloadLink);
                        downloadLink.click();
                        document.body.removeChild(downloadLink);
                    }



                });


            });




            jQuery.fn.toCSVSection3 = function (link) {
                var $link = $(link);
                var data = $(this).first(); //Only one table
                var csvData = [];
                var tmpArr = [];
                var tmpStr = '';
                data.find("div.row").each(function () {
                    tmpArr = [];
                    $(this).find("div").each(function () {
                        if ($(this).text().match(/^-{0,1}\d*\.{0,1}\d+$/)) {
                            tmpArr.push(parseFloat($(this).text()));
                        } else {
                            tmpStr = $(this).text().replace(/"/g, '""');
                            tmpArr.push('"' + tmpStr + '"');
                        }
                    });
                    csvData.push(tmpArr.join(','));
                    //   }
                });
                var output = csvData.join('\n');

                var ua = window.navigator.userAgent;
                var msie = ua.indexOf("MSIE ");
                if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))// If Internet Explorer
                {

                    if (navigator.msSaveBlob) { // IE 10+
                        navigator.msSaveBlob(new Blob([output], { type: 'text/csv;charset=utf-8;' }), "IndicatorData.csv");
                        // $link.attr("href", uri);
                    }
                }
                else
                {

                    var uri = 'data:application/csv;charset=UTF-8,' + encodeURIComponent(output);
                    $link.attr("href", uri);
                }

            }




            $("#DownloadSection3").click(function () {
                $("div.downloadsection3").toCSVSection3(this);
            });

        })

        function LoadIndicatorDataForDownloadSection3() {
            $.getJSON("GetIndicatorDataByIndicatorShortCodes?indicatorshortcodes=" + LocalIndicatorShortCode + "&companyCode=" + companyCodeDD,
       function (data) {
           var jsonObject = JSON.parse(data);
           var htmlIndicatorString = "";
           $("#divIndicatorDDShortCodes").html('');//To clean Previous content if any
           //  $(".divIndicatorDD").html('');//To clean Previous content if any
           companyCode = ""; indicatorShotrCode = "";
           for (i = 0; i < jsonObject.length; i++) {
               var obj = jsonObject[i];

               if (i == 0) { //For Loading first time
                   indicatorShotrCode = obj["Indicator"];
                   companyCode = obj["Company"];

               }

               if (i == 0) {
                   htmlIndicatorString = htmlIndicatorString + '<div class="row cursorDD" data-indicatorShotrCode="' + obj["Indicator"] + '"   data-companyCode="' + obj["Company"] + '">';
                   $(".spnIndicatorName").html(obj["ASeriesName"]);
                   // console.log( $(".spnIndicatorName").html());
                   // alert($(".spnIndicatorName").html());
               }
               else {
                   htmlIndicatorString = htmlIndicatorString + '<div class="row cursorDD" data-indicatorShotrCode="' + obj["Indicator"] + '"   data-companyCode="' + obj["Company"] + '">';
               }
               for (key in obj) {
                   //  console.log("Key is " + key + "  value is " + obj[key]);
                   if (key == "MonthYear") {
                       var dateValue = new Date(parseInt(obj["MonthYear"].substr(6)));
                       // dateValue= parseInt(dateValue.getMonth() + 1) + "/" + parseInt(dateValue.getDate()) + "/" + dateValue.getFullYear()
                       var monthName = GetMonthName(dateValue.getMonth() + 1);
                       var date = monthName + '  ' + dateValue.getFullYear()
                       htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-3" style="font-size: 11px;">	' + date + '</div>';
                   }
                   else if (key == "IndicatorFullName") {
                       htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-3">	' + obj["IndicatorFullName"] + '	</div>'
                   }
                   else if (key == "C12BY12") {
                       htmlIndicatorString = htmlIndicatorString + '<div class="col-sm-3">	' + obj["C12BY12"] + '	</div>';
                   }
               }

               htmlIndicatorString = htmlIndicatorString + '</div>';

           }
           $("#divIndicatorDDShortCodes").html(htmlIndicatorString);
           //alert(htmlIndicatorString);
           //   LoadDDChart();
       });

        }
    </script>
}








